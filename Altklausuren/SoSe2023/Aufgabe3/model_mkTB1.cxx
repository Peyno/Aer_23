/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Feb 20 15:55:26 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTB1.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTB1::MODEL_mkTB1()
{
  mkTB1_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTB1()
{
  MODEL_mkTB1 *model = new MODEL_mkTB1();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTB1 &INST_top = *((MOD_mkTB1 *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d47;
	 tUInt8 DEF_INST_top_DEF_abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d51;
	 tUInt8 DEF_INST_top_DEF_abort_whas_AND_abort_wget___d6;
	 tUInt8 DEF_INST_top_DEF_NOT_start_wire_whas_OR_NOT_start_wire_wget_0___d11;
	 tUInt8 DEF_INST_top_DEF_NOT_abort_whas_6_OR_NOT_abort_wget_7___d28;
	 tUInt8 DEF_INST_top_DEF_abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d35;
	 tUInt8 DEF_INST_top_DEF_state_mkFSMstate_read__1_EQ_2___d34;
	 tUInt8 DEF_INST_top_DEF_abort_wget____d5;
	 tUInt8 DEF_INST_top_DEF_abort_whas____d4;
	 tUInt8 DEF_INST_top_DEF_start_reg__h7197;
	 tUInt8 DEF_INST_top_DEF_running__h7283;
	 tUInt8 DEF_INST_top_DEF_start_wire_wget____d9;
	 tUInt8 DEF_INST_top_DEF_start_wire_whas____d7;
	 tUInt8 DEF_INST_top_DEF_start_reg_1__h6400;
	 tUInt8 DEF_INST_top_DEF_state_fired__h6402;
	 tUInt8 DEF_INST_top_DEF_state_mkFSMstate_read____d31;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_start_reg__dreg_update;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_start_reg__dreg_update;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_state_handle_abort;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_state_handle_abort;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_state_fired__dreg_update;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_state_fired__dreg_update;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_state_every;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_state_every;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_restart;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_restart;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_action_l112c12;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_action_l114c9;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_idle_l111c14;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_idle_l111c14;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_fsm_start;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_fsm_start;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_auto_start;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_auto_start;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_auto_finish;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_auto_finish;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE___me_check_5;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE___me_check_5;
	 DEF_INST_top_DEF_state_mkFSMstate_read____d31 = INST_top.INST_state_mkFSMstate.METH_read();
	 DEF_INST_top_DEF_abort_whas____d4 = INST_top.INST_abort.METH_whas();
	 DEF_INST_top_DEF_abort_wget____d5 = INST_top.INST_abort.METH_wget();
	 DEF_INST_top_DEF_NOT_abort_whas_6_OR_NOT_abort_wget_7___d28 = !DEF_INST_top_DEF_abort_whas____d4 || !DEF_INST_top_DEF_abort_wget____d5;
	 DEF_INST_top_DEF_CAN_FIRE_RL_action_l114c9 = DEF_INST_top_DEF_NOT_abort_whas_6_OR_NOT_abort_wget_7___d28 && DEF_INST_top_DEF_state_mkFSMstate_read____d31 == (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_action_l114c9 = DEF_INST_top_DEF_CAN_FIRE_RL_action_l114c9;
	 DEF_INST_top_DEF_state_fired__h6402 = INST_top.INST_state_fired.METH_read();
	 DEF_INST_top_DEF_start_reg_1__h6400 = INST_top.INST_start_reg_1.METH_read();
	 DEF_INST_top_DEF_running__h7283 = INST_top.INST_running.METH_read();
	 DEF_INST_top_DEF_start_reg__h7197 = INST_top.INST_start_reg.METH_read();
	 DEF_INST_top_DEF_state_mkFSMstate_read__1_EQ_2___d34 = DEF_INST_top_DEF_state_mkFSMstate_read____d31 == (tUInt8)2u;
	 DEF_INST_top_DEF_abort_whas_AND_abort_wget___d6 = DEF_INST_top_DEF_abort_whas____d4 && DEF_INST_top_DEF_abort_wget____d5;
	 DEF_INST_top_DEF_abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d35 = (DEF_INST_top_DEF_abort_whas_AND_abort_wget___d6 || DEF_INST_top_DEF_state_mkFSMstate_read____d31 == (tUInt8)0u) || DEF_INST_top_DEF_state_mkFSMstate_read__1_EQ_2___d34;
	 DEF_INST_top_DEF_abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d47 = DEF_INST_top_DEF_abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d35 && (!DEF_INST_top_DEF_start_reg_1__h6400 || DEF_INST_top_DEF_state_fired__h6402);
	 DEF_INST_top_DEF_abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d51 = DEF_INST_top_DEF_abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d47 && !DEF_INST_top_DEF_start_reg__h7197;
	 DEF_INST_top_DEF_CAN_FIRE_RL_auto_finish = DEF_INST_top_DEF_running__h7283 && DEF_INST_top_DEF_abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d51;
	 DEF_INST_top_DEF_WILL_FIRE_RL_auto_finish = DEF_INST_top_DEF_CAN_FIRE_RL_auto_finish;
	 DEF_INST_top_DEF_CAN_FIRE_RL_auto_start = DEF_INST_top_DEF_abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d51 && !DEF_INST_top_DEF_running__h7283;
	 DEF_INST_top_DEF_WILL_FIRE_RL_auto_start = DEF_INST_top_DEF_CAN_FIRE_RL_auto_start;
	 DEF_INST_top_DEF_CAN_FIRE_RL_fsm_start = DEF_INST_top_DEF_abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d47 && DEF_INST_top_DEF_start_reg__h7197;
	 DEF_INST_top_DEF_WILL_FIRE_RL_fsm_start = DEF_INST_top_DEF_CAN_FIRE_RL_fsm_start;
	 DEF_INST_top_DEF_CAN_FIRE_RL_restart = (DEF_INST_top_DEF_start_reg_1__h6400 && !DEF_INST_top_DEF_state_fired__h6402) && DEF_INST_top_DEF_NOT_abort_whas_6_OR_NOT_abort_wget_7___d28;
	 DEF_INST_top_DEF_WILL_FIRE_RL_restart = DEF_INST_top_DEF_CAN_FIRE_RL_restart;
	 DEF_INST_top_DEF_CAN_FIRE_RL_start_reg__dreg_update = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_start_reg__dreg_update = DEF_INST_top_DEF_CAN_FIRE_RL_start_reg__dreg_update;
	 DEF_INST_top_DEF_CAN_FIRE_RL_state_fired__dreg_update = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_state_fired__dreg_update = DEF_INST_top_DEF_CAN_FIRE_RL_state_fired__dreg_update;
	 DEF_INST_top_DEF_CAN_FIRE_RL_state_every = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_state_every = DEF_INST_top_DEF_CAN_FIRE_RL_state_every;
	 DEF_INST_top_DEF_CAN_FIRE___me_check_5 = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE___me_check_5 = DEF_INST_top_DEF_CAN_FIRE___me_check_5;
	 if (INST_top.DEF_WILL_FIRE_RL_action_l114c9)
	   INST_top.RL_action_l114c9();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_auto_finish)
	   INST_top.RL_auto_finish();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_auto_start)
	   INST_top.RL_auto_start();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_fsm_start)
	   INST_top.RL_fsm_start();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_restart)
	   INST_top.RL_restart();
	 DEF_INST_top_DEF_start_wire_whas____d7 = INST_top.INST_start_wire.METH_whas();
	 DEF_INST_top_DEF_start_wire_wget____d9 = INST_top.INST_start_wire.METH_wget();
	 DEF_INST_top_DEF_CAN_FIRE_RL_action_l112c12 = ((DEF_INST_top_DEF_start_wire_whas____d7 && DEF_INST_top_DEF_start_wire_wget____d9) && DEF_INST_top_DEF_abort_whas_AND_abort_wget_OR_state_mkFSMstate__ETC___d35) && !DEF_INST_top_DEF_CAN_FIRE_RL_action_l114c9;
	 INST_top.DEF_WILL_FIRE_RL_action_l112c12 = DEF_INST_top_DEF_CAN_FIRE_RL_action_l112c12;
	 DEF_INST_top_DEF_NOT_start_wire_whas_OR_NOT_start_wire_wget_0___d11 = !DEF_INST_top_DEF_start_wire_whas____d7 || !DEF_INST_top_DEF_start_wire_wget____d9;
	 DEF_INST_top_DEF_CAN_FIRE_RL_idle_l111c14 = (DEF_INST_top_DEF_NOT_start_wire_whas_OR_NOT_start_wire_wget_0___d11 && (DEF_INST_top_DEF_NOT_abort_whas_6_OR_NOT_abort_wget_7___d28 && DEF_INST_top_DEF_state_mkFSMstate_read__1_EQ_2___d34)) && !DEF_INST_top_DEF_CAN_FIRE_RL_action_l114c9;
	 DEF_INST_top_DEF_WILL_FIRE_RL_idle_l111c14 = DEF_INST_top_DEF_CAN_FIRE_RL_idle_l111c14;
	 DEF_INST_top_DEF_CAN_FIRE_RL_state_handle_abort = (DEF_INST_top_DEF_abort_whas_AND_abort_wget___d6 && DEF_INST_top_DEF_NOT_start_wire_whas_OR_NOT_start_wire_wget_0___d11) && !(DEF_INST_top_DEF_CAN_FIRE_RL_action_l114c9 || DEF_INST_top_DEF_CAN_FIRE_RL_restart);
	 DEF_INST_top_DEF_WILL_FIRE_RL_state_handle_abort = DEF_INST_top_DEF_CAN_FIRE_RL_state_handle_abort;
	 if (INST_top.DEF_WILL_FIRE_RL_action_l112c12)
	   INST_top.RL_action_l112c12();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_start_reg__dreg_update)
	   INST_top.RL_start_reg__dreg_update();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_state_handle_abort)
	   INST_top.RL_state_handle_abort();
	 if (DEF_INST_top_DEF_WILL_FIRE___me_check_5)
	   INST_top.__me_check_5();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_idle_l111c14)
	   INST_top.RL_idle_l111c14();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_state_every)
	   INST_top.RL_state_every();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_state_fired__dreg_update)
	   INST_top.RL_state_fired__dreg_update();
	 INST_top.INST_state_fired_1.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_state_overlap_pw.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_state_set_pw.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_abort.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_start_reg_2.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_start_wire.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_dut_wert.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_start_reg.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_start_reg_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_state_mkFSMstate.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_state_fired.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_state_can_overlap.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_running.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTB1::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTB1_instance = new MOD_mkTB1(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTB1_instance->INST_start_wire.set_clk_0)("CLK");
  (mkTB1_instance->INST_start_reg_2.set_clk_0)("CLK");
  (mkTB1_instance->INST_abort.set_clk_0)("CLK");
  (mkTB1_instance->INST_state_set_pw.set_clk_0)("CLK");
  (mkTB1_instance->INST_state_overlap_pw.set_clk_0)("CLK");
  (mkTB1_instance->INST_state_fired_1.set_clk_0)("CLK");
  (mkTB1_instance->set_clk_0)("CLK");
}
void MODEL_mkTB1::destroy_model()
{
  delete mkTB1_instance;
  mkTB1_instance = NULL;
}
void MODEL_mkTB1::reset_model(bool asserted)
{
  (mkTB1_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTB1::get_instance()
{
  return mkTB1_instance;
}

/* Fill in version numbers */
void MODEL_mkTB1::get_version(char const **name, char const **build)
{
  *name = "2023.07";
  *build = "0eb551dc";
}

/* Get the model creation time */
time_t MODEL_mkTB1::get_creation_time()
{
  
  /* Tue Feb 20 14:55:26 UTC 2024 */
  return 1708440926llu;
}

/* State dumping function */
void MODEL_mkTB1::dump_state()
{
  (mkTB1_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTB1 & mkTB1_backing(tSimStateHdl simHdl)
{
  static MOD_mkTB1 *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTB1(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTB1::dump_VCD_defs()
{
  (mkTB1_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTB1::dump_VCD(tVCDDumpType dt)
{
  (mkTB1_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTB1_backing(sim_hdl));
}
