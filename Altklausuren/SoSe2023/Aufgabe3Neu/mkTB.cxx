/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Sun Feb 25 12:39:51 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTB.h"


/* String declarations */
static std::string const __str_literal_1("1", 1u);
static std::string const __str_literal_2("2", 1u);
static std::string const __str_literal_3("3", 1u);
static std::string const __str_literal_4("4", 1u);
static std::string const __str_literal_5("Ergebnis der Pipeline: %d", 25u);
static std::string const __str_literal_6("Error: \"Tb.bsv\", line 105, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l105c12] and\n  [RL_action_l106c9] ) fired in the same clock cycle.\n",
					 169u);


/* Constructor */
MOD_mkTB::MOD_mkTB(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_dut_fifos_0(simHdl, "dut_fifos_0", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_fifos_1(simHdl, "dut_fifos_1", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_fifos_2(simHdl, "dut_fifos_2", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_stage0_in(simHdl, "dut_stage0_in", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_stage0_out(simHdl, "dut_stage0_out", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_stage1_in(simHdl, "dut_stage1_in", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_stage1_out(simHdl, "dut_stage1_out", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_x(simHdl, "dut_x", this, 32u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 40u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTB::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_11", SYM_RULE);
  init_symbol(&symbols[1u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[2u], "dut_fifos_0", SYM_MODULE, &INST_dut_fifos_0);
  init_symbol(&symbols[3u], "dut_fifos_1", SYM_MODULE, &INST_dut_fifos_1);
  init_symbol(&symbols[4u], "dut_fifos_2", SYM_MODULE, &INST_dut_fifos_2);
  init_symbol(&symbols[5u], "dut_stage0_in", SYM_MODULE, &INST_dut_stage0_in);
  init_symbol(&symbols[6u], "dut_stage0_out", SYM_MODULE, &INST_dut_stage0_out);
  init_symbol(&symbols[7u], "dut_stage1_in", SYM_MODULE, &INST_dut_stage1_in);
  init_symbol(&symbols[8u], "dut_stage1_out", SYM_MODULE, &INST_dut_stage1_out);
  init_symbol(&symbols[9u], "dut_x", SYM_MODULE, &INST_dut_x);
  init_symbol(&symbols[10u], "RL_action_l105c12", SYM_RULE);
  init_symbol(&symbols[11u], "RL_action_l106c9", SYM_RULE);
  init_symbol(&symbols[12u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[13u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[14u], "RL_dut_r1", SYM_RULE);
  init_symbol(&symbols[15u], "RL_dut_r2", SYM_RULE);
  init_symbol(&symbols[16u], "RL_dut_r3", SYM_RULE);
  init_symbol(&symbols[17u], "RL_dut_r4", SYM_RULE);
  init_symbol(&symbols[18u], "RL_dut_stage0_r", SYM_RULE);
  init_symbol(&symbols[19u], "RL_dut_stage1_r", SYM_RULE);
  init_symbol(&symbols[20u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[21u], "RL_idle_l104c14", SYM_RULE);
  init_symbol(&symbols[22u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[23u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[24u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[25u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[26u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[27u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[28u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[29u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[30u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[31u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[32u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[33u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[34u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[35u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[36u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[37u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_action_l105c12",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l105c12,
	      1u);
  init_symbol(&symbols[39u],
	      "WILL_FIRE_RL_action_l106c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l106c9,
	      1u);
}


/* Rule actions */

void MOD_mkTB::RL_dut_stage0_r()
{
  tUInt32 DEF_dut_stage0_in_first_PLUS_5___d5;
  DEF_dut_stage0_in_first_PLUS_5___d5 = INST_dut_stage0_in.METH_first() + 5u;
  INST_dut_stage0_out.METH_enq(DEF_dut_stage0_in_first_PLUS_5___d5);
}

void MOD_mkTB::RL_dut_stage1_r()
{
  tUInt32 DEF_dut_stage1_in_first_MUL_dut_stage1_in_first_0__ETC___d11;
  tUInt32 DEF_dut_stage1_in_first____d9;
  DEF_dut_stage1_in_first____d9 = INST_dut_stage1_in.METH_first();
  DEF_dut_stage1_in_first_MUL_dut_stage1_in_first_0__ETC___d11 = (tUInt32)(((tUInt64)(DEF_dut_stage1_in_first____d9)) * ((tUInt64)(DEF_dut_stage1_in_first____d9)));
  INST_dut_stage1_out.METH_enq(DEF_dut_stage1_in_first_MUL_dut_stage1_in_first_0__ETC___d11);
}

void MOD_mkTB::RL_dut_r1()
{
  tUInt32 DEF_dut_fifos_0_first____d15;
  DEF_dut_fifos_0_first____d15 = INST_dut_fifos_0.METH_first();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
  INST_dut_fifos_0.METH_deq();
  INST_dut_stage0_in.METH_enq(DEF_dut_fifos_0_first____d15);
}

void MOD_mkTB::RL_dut_r2()
{
  tUInt32 DEF_dut_stage0_out_first____d19;
  DEF_dut_stage0_out_first____d19 = INST_dut_stage0_out.METH_first();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
  INST_dut_stage0_out.METH_deq();
  INST_dut_fifos_1.METH_enq(DEF_dut_stage0_out_first____d19);
}

void MOD_mkTB::RL_dut_r3()
{
  tUInt32 DEF_dut_fifos_1_first____d23;
  DEF_dut_fifos_1_first____d23 = INST_dut_fifos_1.METH_first();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_3);
  INST_dut_fifos_1.METH_deq();
  INST_dut_stage1_in.METH_enq(DEF_dut_fifos_1_first____d23);
}

void MOD_mkTB::RL_dut_r4()
{
  tUInt32 DEF_dut_stage1_out_first____d27;
  DEF_dut_stage1_out_first____d27 = INST_dut_stage1_out.METH_first();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_4);
  INST_dut_stage1_out.METH_deq();
  INST_dut_fifos_2.METH_enq(DEF_dut_stage1_out_first____d27);
}

void MOD_mkTB::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas__8_AND_start_reg_2_wget__9___d30;
  DEF_start_reg_2_whas__8_AND_start_reg_2_wget__9___d30 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas__8_AND_start_reg_2_wget__9___d30);
}

void MOD_mkTB::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTB::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__0_AND_state_fired_1_wget__1___d42;
  DEF_state_fired_1_whas__0_AND_state_fired_1_wget__1___d42 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__0_AND_state_fired_1_wget__1___d42);
}

void MOD_mkTB::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__3_OR_NOT_state_overlap_pw_w_ETC___d48;
  tUInt8 DEF_state_can_overlap__h2721;
  DEF_state_can_overlap__h2721 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__3_OR_NOT_state_overlap_pw_w_ETC___d48 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h2721);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__3_OR_NOT_state_overlap_pw_w_ETC___d48);
}

void MOD_mkTB::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTB::RL_action_l105c12()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_dut_fifos_0.METH_enq(2u);
}

void MOD_mkTB::RL_action_l106c9()
{
  tUInt32 DEF_signed_dut_fifos_2_first__0___d71;
  DEF_signed_dut_fifos_2_first__0___d71 = INST_dut_fifos_2.METH_first();
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_5, DEF_signed_dut_fifos_2_first__0___d71);
  INST_dut_fifos_2.METH_deq();
}

void MOD_mkTB::RL_idle_l104c14()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTB::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTB::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTB::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTB::__me_check_11()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l105c12 && DEF_WILL_FIRE_RL_action_l106c9)
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
}


/* Methods */


/* Reset routines */

void MOD_mkTB::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_dut_stage1_out.reset_RST(ARG_rst_in);
  INST_dut_stage1_in.reset_RST(ARG_rst_in);
  INST_dut_stage0_out.reset_RST(ARG_rst_in);
  INST_dut_stage0_in.reset_RST(ARG_rst_in);
  INST_dut_fifos_2.reset_RST(ARG_rst_in);
  INST_dut_fifos_1.reset_RST(ARG_rst_in);
  INST_dut_fifos_0.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTB::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTB::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_dut_fifos_0.dump_state(indent + 2u);
  INST_dut_fifos_1.dump_state(indent + 2u);
  INST_dut_fifos_2.dump_state(indent + 2u);
  INST_dut_stage0_in.dump_state(indent + 2u);
  INST_dut_stage0_out.dump_state(indent + 2u);
  INST_dut_stage1_in.dump_state(indent + 2u);
  INST_dut_stage1_out.dump_state(indent + 2u);
  INST_dut_x.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTB::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 23u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l105c12", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l106c9", 1u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_dut_fifos_0.dump_VCD_defs(num);
  num = INST_dut_fifos_1.dump_VCD_defs(num);
  num = INST_dut_fifos_2.dump_VCD_defs(num);
  num = INST_dut_stage0_in.dump_VCD_defs(num);
  num = INST_dut_stage0_out.dump_VCD_defs(num);
  num = INST_dut_stage1_in.dump_VCD_defs(num);
  num = INST_dut_stage1_out.dump_VCD_defs(num);
  num = INST_dut_x.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTB::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTB &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTB::vcd_defs(tVCDDumpType dt, MOD_mkTB &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l105c12) != DEF_WILL_FIRE_RL_action_l105c12)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l105c12, 1u);
	backing.DEF_WILL_FIRE_RL_action_l105c12 = DEF_WILL_FIRE_RL_action_l105c12;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l106c9) != DEF_WILL_FIRE_RL_action_l106c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l106c9, 1u);
	backing.DEF_WILL_FIRE_RL_action_l106c9 = DEF_WILL_FIRE_RL_action_l106c9;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l105c12, 1u);
      backing.DEF_WILL_FIRE_RL_action_l105c12 = DEF_WILL_FIRE_RL_action_l105c12;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l106c9, 1u);
      backing.DEF_WILL_FIRE_RL_action_l106c9 = DEF_WILL_FIRE_RL_action_l106c9;
    }
}

void MOD_mkTB::vcd_prims(tVCDDumpType dt, MOD_mkTB &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_dut_fifos_0.dump_VCD(dt, backing.INST_dut_fifos_0);
  INST_dut_fifos_1.dump_VCD(dt, backing.INST_dut_fifos_1);
  INST_dut_fifos_2.dump_VCD(dt, backing.INST_dut_fifos_2);
  INST_dut_stage0_in.dump_VCD(dt, backing.INST_dut_stage0_in);
  INST_dut_stage0_out.dump_VCD(dt, backing.INST_dut_stage0_out);
  INST_dut_stage1_in.dump_VCD(dt, backing.INST_dut_stage1_in);
  INST_dut_stage1_out.dump_VCD(dt, backing.INST_dut_stage1_out);
  INST_dut_x.dump_VCD(dt, backing.INST_dut_x);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}
