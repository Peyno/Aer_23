/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Wed Feb 14 13:24:19 CET 2024
 * 
 */

/* Generation options: */
#ifndef __mkTB_h__
#define __mkTB_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkTB module */
class MOD_mkTB : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_abort;
  MOD_Reg<tUInt32> INST_cntr1;
  MOD_Reg<tUInt32> INST_cntr2;
  MOD_Wire<tUInt8> INST_par_blocks_1_abort;
  MOD_Reg<tUInt8> INST_par_blocks_1_start_reg;
  MOD_Wire<tUInt8> INST_par_blocks_1_start_reg_1;
  MOD_Wire<tUInt8> INST_par_blocks_1_start_wire;
  MOD_Reg<tUInt8> INST_par_blocks_1_state_can_overlap;
  MOD_Reg<tUInt8> INST_par_blocks_1_state_fired;
  MOD_Wire<tUInt8> INST_par_blocks_1_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_par_blocks_1_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_par_blocks_1_state_overlap_pw;
  MOD_Wire<tUInt8> INST_par_blocks_1_state_set_pw;
  MOD_Wire<tUInt8> INST_par_blocks_abort;
  MOD_Reg<tUInt8> INST_par_blocks_start_reg;
  MOD_Wire<tUInt8> INST_par_blocks_start_reg_1;
  MOD_Wire<tUInt8> INST_par_blocks_start_wire;
  MOD_Reg<tUInt8> INST_par_blocks_state_can_overlap;
  MOD_Reg<tUInt8> INST_par_blocks_state_fired;
  MOD_Wire<tUInt8> INST_par_blocks_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_par_blocks_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_par_blocks_state_overlap_pw;
  MOD_Wire<tUInt8> INST_par_blocks_state_set_pw;
  MOD_Wire<tUInt8> INST_par_running;
  MOD_Reg<tUInt8> INST_running;
  MOD_Fifo<tUInt32> INST_sqrt_in;
  MOD_Fifo<tUInt32> INST_sqrt_out;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
 
 /* Constructor */
 public:
  MOD_mkTB(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_actionpar_start_l14c9;
  tUInt8 DEF_WILL_FIRE_RL_action_f_update_l16c17;
  tUInt8 DEF_WILL_FIRE_RL_action_l16c65;
  tUInt8 DEF_WILL_FIRE_RL_action_f_init_l16c17;
  tUInt8 DEF_WILL_FIRE_RL_action_f_update_l21c17;
  tUInt8 DEF_WILL_FIRE_RL_action_l21c65;
  tUInt8 DEF_WILL_FIRE_RL_action_f_init_l21c17;
  tUInt8 DEF_WILL_FIRE_RL_action_l13c9;
  tUInt32 DEF_b__h19051;
  tUInt32 DEF_b__h7200;
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
  void RL_sqrt_get();
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_par_blocks_start_reg__dreg_update();
  void RL_par_blocks_state_handle_abort();
  void RL_par_blocks_state_fired__dreg_update();
  void RL_par_blocks_state_every();
  void RL_par_blocks_restart();
  void RL_par_blocks_1_start_reg__dreg_update();
  void RL_par_blocks_1_state_handle_abort();
  void RL_par_blocks_1_state_fired__dreg_update();
  void RL_par_blocks_1_state_every();
  void RL_par_blocks_1_restart();
  void RL_restart();
  void RL_action_l13c9();
  void RL_action_f_init_l21c17();
  void RL_action_l21c65();
  void RL_action_f_update_l21c17();
  void RL_action_f_init_l16c17();
  void RL_action_l16c65();
  void RL_action_f_update_l16c17();
  void RL_actionpar_start_l14c9();
  void RL_actionpar_run_l14c9();
  void RL_idle_l12c14();
  void RL_idle_l12c14_1();
  void RL_idle_l21c17();
  void RL_idle_l21c17_1();
  void RL_idle_l16c17();
  void RL_idle_l16c17_1();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void __me_check_16();
  void __me_check_17();
  void __me_check_18();
  void __me_check_20();
  void __me_check_21();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTB &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTB &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTB &backing);
};

#endif /* ifndef __mkTB_h__ */
