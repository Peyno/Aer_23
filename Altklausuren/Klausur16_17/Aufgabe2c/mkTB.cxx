/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Wed Feb 14 13:24:19 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTB.h"


/* String declarations */
static std::string const __str_literal_2("Ergebnis: %d", 12u);
static std::string const __str_literal_3("Error: \"Tb.bsv\", line 13, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l13c9] and\n  [RL_action_f_init_l21c17, RL_action_l21c65, RL_action_f_update_l21c17,\n  RL_action_f_init_l16c17, RL_action_l16c65, RL_action_f_update_l16c17,\n  RL_actionpar_start_l14c9] ) fired in the same clock cycle.\n",
					 317u);
static std::string const __str_literal_6("Error: \"Tb.bsv\", line 16, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l16c17] and\n  [RL_action_l16c65, RL_action_f_update_l16c17] ) fired in the same clock\n  cycle.\n",
					 203u);
static std::string const __str_literal_7("Error: \"Tb.bsv\", line 16, column 65: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l16c65] and\n  [RL_action_f_update_l16c17] ) fired in the same clock cycle.\n",
					 176u);
static std::string const __str_literal_4("Error: \"Tb.bsv\", line 21, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l21c17] and\n  [RL_action_l21c65, RL_action_f_update_l21c17] ) fired in the same clock\n  cycle.\n",
					 203u);
static std::string const __str_literal_5("Error: \"Tb.bsv\", line 21, column 65: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l21c65] and\n  [RL_action_f_update_l21c17] ) fired in the same clock cycle.\n",
					 176u);
static std::string const __str_literal_1("Hello", 5u);


/* Constructor */
MOD_mkTB::MOD_mkTB(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_cntr1(simHdl, "cntr1", this, 32u),
    INST_cntr2(simHdl, "cntr2", this, 32u),
    INST_par_blocks_1_abort(simHdl, "par_blocks_1_abort", this, 1u, (tUInt8)0u),
    INST_par_blocks_1_start_reg(simHdl, "par_blocks_1_start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_par_blocks_1_start_reg_1(simHdl, "par_blocks_1_start_reg_1", this, 1u, (tUInt8)0u),
    INST_par_blocks_1_start_wire(simHdl, "par_blocks_1_start_wire", this, 1u, (tUInt8)0u),
    INST_par_blocks_1_state_can_overlap(simHdl,
					"par_blocks_1_state_can_overlap",
					this,
					1u,
					(tUInt8)1u,
					(tUInt8)0u),
    INST_par_blocks_1_state_fired(simHdl, "par_blocks_1_state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_par_blocks_1_state_fired_1(simHdl, "par_blocks_1_state_fired_1", this, 1u, (tUInt8)0u),
    INST_par_blocks_1_state_mkFSMstate(simHdl,
				       "par_blocks_1_state_mkFSMstate",
				       this,
				       3u,
				       (tUInt8)0u,
				       (tUInt8)0u),
    INST_par_blocks_1_state_overlap_pw(simHdl, "par_blocks_1_state_overlap_pw", this, 0u),
    INST_par_blocks_1_state_set_pw(simHdl, "par_blocks_1_state_set_pw", this, 0u),
    INST_par_blocks_abort(simHdl, "par_blocks_abort", this, 1u, (tUInt8)0u),
    INST_par_blocks_start_reg(simHdl, "par_blocks_start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_par_blocks_start_reg_1(simHdl, "par_blocks_start_reg_1", this, 1u, (tUInt8)0u),
    INST_par_blocks_start_wire(simHdl, "par_blocks_start_wire", this, 1u, (tUInt8)0u),
    INST_par_blocks_state_can_overlap(simHdl,
				      "par_blocks_state_can_overlap",
				      this,
				      1u,
				      (tUInt8)1u,
				      (tUInt8)0u),
    INST_par_blocks_state_fired(simHdl, "par_blocks_state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_par_blocks_state_fired_1(simHdl, "par_blocks_state_fired_1", this, 1u, (tUInt8)0u),
    INST_par_blocks_state_mkFSMstate(simHdl,
				     "par_blocks_state_mkFSMstate",
				     this,
				     3u,
				     (tUInt8)0u,
				     (tUInt8)0u),
    INST_par_blocks_state_overlap_pw(simHdl, "par_blocks_state_overlap_pw", this, 0u),
    INST_par_blocks_state_set_pw(simHdl, "par_blocks_state_set_pw", this, 0u),
    INST_par_running(simHdl, "par_running", this, 1u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_sqrt_in(simHdl, "sqrt_in", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_sqrt_out(simHdl, "sqrt_out", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 86u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTB::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_16", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_17", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_18", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_20", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_21", SYM_RULE);
  init_symbol(&symbols[5u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[6u], "b__h19051", SYM_DEF, &DEF_b__h19051, 32u);
  init_symbol(&symbols[7u], "b__h7200", SYM_DEF, &DEF_b__h7200, 32u);
  init_symbol(&symbols[8u], "cntr1", SYM_MODULE, &INST_cntr1);
  init_symbol(&symbols[9u], "cntr2", SYM_MODULE, &INST_cntr2);
  init_symbol(&symbols[10u], "par_blocks_1_abort", SYM_MODULE, &INST_par_blocks_1_abort);
  init_symbol(&symbols[11u], "par_blocks_1_start_reg", SYM_MODULE, &INST_par_blocks_1_start_reg);
  init_symbol(&symbols[12u], "par_blocks_1_start_reg_1", SYM_MODULE, &INST_par_blocks_1_start_reg_1);
  init_symbol(&symbols[13u], "par_blocks_1_start_wire", SYM_MODULE, &INST_par_blocks_1_start_wire);
  init_symbol(&symbols[14u],
	      "par_blocks_1_state_can_overlap",
	      SYM_MODULE,
	      &INST_par_blocks_1_state_can_overlap);
  init_symbol(&symbols[15u], "par_blocks_1_state_fired", SYM_MODULE, &INST_par_blocks_1_state_fired);
  init_symbol(&symbols[16u],
	      "par_blocks_1_state_fired_1",
	      SYM_MODULE,
	      &INST_par_blocks_1_state_fired_1);
  init_symbol(&symbols[17u],
	      "par_blocks_1_state_mkFSMstate",
	      SYM_MODULE,
	      &INST_par_blocks_1_state_mkFSMstate);
  init_symbol(&symbols[18u],
	      "par_blocks_1_state_overlap_pw",
	      SYM_MODULE,
	      &INST_par_blocks_1_state_overlap_pw);
  init_symbol(&symbols[19u],
	      "par_blocks_1_state_set_pw",
	      SYM_MODULE,
	      &INST_par_blocks_1_state_set_pw);
  init_symbol(&symbols[20u], "par_blocks_abort", SYM_MODULE, &INST_par_blocks_abort);
  init_symbol(&symbols[21u], "par_blocks_start_reg", SYM_MODULE, &INST_par_blocks_start_reg);
  init_symbol(&symbols[22u], "par_blocks_start_reg_1", SYM_MODULE, &INST_par_blocks_start_reg_1);
  init_symbol(&symbols[23u], "par_blocks_start_wire", SYM_MODULE, &INST_par_blocks_start_wire);
  init_symbol(&symbols[24u],
	      "par_blocks_state_can_overlap",
	      SYM_MODULE,
	      &INST_par_blocks_state_can_overlap);
  init_symbol(&symbols[25u], "par_blocks_state_fired", SYM_MODULE, &INST_par_blocks_state_fired);
  init_symbol(&symbols[26u], "par_blocks_state_fired_1", SYM_MODULE, &INST_par_blocks_state_fired_1);
  init_symbol(&symbols[27u],
	      "par_blocks_state_mkFSMstate",
	      SYM_MODULE,
	      &INST_par_blocks_state_mkFSMstate);
  init_symbol(&symbols[28u],
	      "par_blocks_state_overlap_pw",
	      SYM_MODULE,
	      &INST_par_blocks_state_overlap_pw);
  init_symbol(&symbols[29u], "par_blocks_state_set_pw", SYM_MODULE, &INST_par_blocks_state_set_pw);
  init_symbol(&symbols[30u], "par_running", SYM_MODULE, &INST_par_running);
  init_symbol(&symbols[31u], "RL_action_f_init_l16c17", SYM_RULE);
  init_symbol(&symbols[32u], "RL_action_f_init_l21c17", SYM_RULE);
  init_symbol(&symbols[33u], "RL_action_f_update_l16c17", SYM_RULE);
  init_symbol(&symbols[34u], "RL_action_f_update_l21c17", SYM_RULE);
  init_symbol(&symbols[35u], "RL_action_l13c9", SYM_RULE);
  init_symbol(&symbols[36u], "RL_action_l16c65", SYM_RULE);
  init_symbol(&symbols[37u], "RL_action_l21c65", SYM_RULE);
  init_symbol(&symbols[38u], "RL_actionpar_run_l14c9", SYM_RULE);
  init_symbol(&symbols[39u], "RL_actionpar_start_l14c9", SYM_RULE);
  init_symbol(&symbols[40u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[41u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[42u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[43u], "RL_idle_l12c14", SYM_RULE);
  init_symbol(&symbols[44u], "RL_idle_l12c14_1", SYM_RULE);
  init_symbol(&symbols[45u], "RL_idle_l16c17", SYM_RULE);
  init_symbol(&symbols[46u], "RL_idle_l16c17_1", SYM_RULE);
  init_symbol(&symbols[47u], "RL_idle_l21c17", SYM_RULE);
  init_symbol(&symbols[48u], "RL_idle_l21c17_1", SYM_RULE);
  init_symbol(&symbols[49u], "RL_par_blocks_1_restart", SYM_RULE);
  init_symbol(&symbols[50u], "RL_par_blocks_1_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[51u], "RL_par_blocks_1_state_every", SYM_RULE);
  init_symbol(&symbols[52u], "RL_par_blocks_1_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[53u], "RL_par_blocks_1_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[54u], "RL_par_blocks_restart", SYM_RULE);
  init_symbol(&symbols[55u], "RL_par_blocks_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[56u], "RL_par_blocks_state_every", SYM_RULE);
  init_symbol(&symbols[57u], "RL_par_blocks_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[58u], "RL_par_blocks_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[59u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[60u], "RL_sqrt_get", SYM_RULE);
  init_symbol(&symbols[61u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[62u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[63u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[64u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[65u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[66u], "sqrt_in", SYM_MODULE, &INST_sqrt_in);
  init_symbol(&symbols[67u], "sqrt_out", SYM_MODULE, &INST_sqrt_out);
  init_symbol(&symbols[68u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[69u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[70u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[71u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[72u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[73u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[74u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[75u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[76u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[77u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[78u],
	      "WILL_FIRE_RL_action_f_init_l16c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_init_l16c17,
	      1u);
  init_symbol(&symbols[79u],
	      "WILL_FIRE_RL_action_f_init_l21c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_init_l21c17,
	      1u);
  init_symbol(&symbols[80u],
	      "WILL_FIRE_RL_action_f_update_l16c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_update_l16c17,
	      1u);
  init_symbol(&symbols[81u],
	      "WILL_FIRE_RL_action_f_update_l21c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_update_l21c17,
	      1u);
  init_symbol(&symbols[82u],
	      "WILL_FIRE_RL_action_l13c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l13c9,
	      1u);
  init_symbol(&symbols[83u],
	      "WILL_FIRE_RL_action_l16c65",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l16c65,
	      1u);
  init_symbol(&symbols[84u],
	      "WILL_FIRE_RL_action_l21c65",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l21c65,
	      1u);
  init_symbol(&symbols[85u],
	      "WILL_FIRE_RL_actionpar_start_l14c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_actionpar_start_l14c9,
	      1u);
}


/* Rule actions */

void MOD_mkTB::RL_sqrt_get()
{
  tUInt32 DEF_sqrt_in_first____d4;
  DEF_sqrt_in_first____d4 = INST_sqrt_in.METH_first();
  INST_sqrt_in.METH_deq();
  INST_sqrt_out.METH_enq(DEF_sqrt_in_first____d4);
}

void MOD_mkTB::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas_AND_start_reg_2_wget___d7;
  DEF_start_reg_2_whas_AND_start_reg_2_wget___d7 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas_AND_start_reg_2_wget___d7);
}

void MOD_mkTB::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTB::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__7_AND_state_fired_1_wget__8___d19;
  DEF_state_fired_1_whas__7_AND_state_fired_1_wget__8___d19 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__7_AND_state_fired_1_wget__8___d19);
}

void MOD_mkTB::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__0_OR_NOT_state_overlap_pw_w_ETC___d25;
  tUInt8 DEF_state_can_overlap__h2080;
  DEF_state_can_overlap__h2080 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__0_OR_NOT_state_overlap_pw_w_ETC___d25 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h2080);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__0_OR_NOT_state_overlap_pw_w_ETC___d25);
}

void MOD_mkTB::RL_par_blocks_start_reg__dreg_update()
{
  tUInt8 DEF_par_blocks_start_reg_1_whas__6_AND_par_blocks__ETC___d28;
  DEF_par_blocks_start_reg_1_whas__6_AND_par_blocks__ETC___d28 = INST_par_blocks_start_reg_1.METH_whas() && INST_par_blocks_start_reg_1.METH_wget();
  INST_par_blocks_start_reg.METH_write(DEF_par_blocks_start_reg_1_whas__6_AND_par_blocks__ETC___d28);
}

void MOD_mkTB::RL_par_blocks_state_handle_abort()
{
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTB::RL_par_blocks_state_fired__dreg_update()
{
  tUInt8 DEF_par_blocks_state_fired_1_whas__8_AND_par_block_ETC___d40;
  DEF_par_blocks_state_fired_1_whas__8_AND_par_block_ETC___d40 = INST_par_blocks_state_fired_1.METH_whas() && INST_par_blocks_state_fired_1.METH_wget();
  INST_par_blocks_state_fired.METH_write(DEF_par_blocks_state_fired_1_whas__8_AND_par_block_ETC___d40);
}

void MOD_mkTB::RL_par_blocks_state_every()
{
  tUInt8 DEF_par_blocks_state_set_pw_whas__1_OR_NOT_par_blo_ETC___d46;
  tUInt8 DEF_par_blocks_state_can_overlap__h4073;
  DEF_par_blocks_state_can_overlap__h4073 = INST_par_blocks_state_can_overlap.METH_read();
  DEF_par_blocks_state_set_pw_whas__1_OR_NOT_par_blo_ETC___d46 = INST_par_blocks_state_set_pw.METH_whas() || (!INST_par_blocks_state_overlap_pw.METH_whas() && DEF_par_blocks_state_can_overlap__h4073);
  INST_par_blocks_state_can_overlap.METH_write(DEF_par_blocks_state_set_pw_whas__1_OR_NOT_par_blo_ETC___d46);
}

void MOD_mkTB::RL_par_blocks_restart()
{
  INST_par_blocks_start_wire.METH_wset((tUInt8)1u);
  INST_par_blocks_start_reg_1.METH_wset((tUInt8)1u);
}

void MOD_mkTB::RL_par_blocks_1_start_reg__dreg_update()
{
  tUInt8 DEF_par_blocks_1_start_reg_1_whas__5_AND_par_block_ETC___d57;
  DEF_par_blocks_1_start_reg_1_whas__5_AND_par_block_ETC___d57 = INST_par_blocks_1_start_reg_1.METH_whas() && INST_par_blocks_1_start_reg_1.METH_wget();
  INST_par_blocks_1_start_reg.METH_write(DEF_par_blocks_1_start_reg_1_whas__5_AND_par_block_ETC___d57);
}

void MOD_mkTB::RL_par_blocks_1_state_handle_abort()
{
  INST_par_blocks_1_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTB::RL_par_blocks_1_state_fired__dreg_update()
{
  tUInt8 DEF_par_blocks_1_state_fired_1_whas__7_AND_par_blo_ETC___d69;
  DEF_par_blocks_1_state_fired_1_whas__7_AND_par_blo_ETC___d69 = INST_par_blocks_1_state_fired_1.METH_whas() && INST_par_blocks_1_state_fired_1.METH_wget();
  INST_par_blocks_1_state_fired.METH_write(DEF_par_blocks_1_state_fired_1_whas__7_AND_par_blo_ETC___d69);
}

void MOD_mkTB::RL_par_blocks_1_state_every()
{
  tUInt8 DEF_par_blocks_1_state_set_pw_whas__0_OR_NOT_par_b_ETC___d75;
  tUInt8 DEF_par_blocks_1_state_can_overlap__h15930;
  DEF_par_blocks_1_state_can_overlap__h15930 = INST_par_blocks_1_state_can_overlap.METH_read();
  DEF_par_blocks_1_state_set_pw_whas__0_OR_NOT_par_b_ETC___d75 = INST_par_blocks_1_state_set_pw.METH_whas() || (!INST_par_blocks_1_state_overlap_pw.METH_whas() && DEF_par_blocks_1_state_can_overlap__h15930);
  INST_par_blocks_1_state_can_overlap.METH_write(DEF_par_blocks_1_state_set_pw_whas__0_OR_NOT_par_b_ETC___d75);
}

void MOD_mkTB::RL_par_blocks_1_restart()
{
  INST_par_blocks_1_start_wire.METH_wset((tUInt8)1u);
  INST_par_blocks_1_start_reg_1.METH_wset((tUInt8)1u);
}

void MOD_mkTB::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTB::RL_action_l13c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
}

void MOD_mkTB::RL_action_f_init_l21c17()
{
  INST_par_blocks_1_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_par_blocks_1_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_1_state_set_pw.METH_wset();
  INST_cntr2.METH_write(0u);
}

void MOD_mkTB::RL_action_l21c65()
{
  tUInt32 DEF_unsigned_sqrt_out_first__60___d161;
  DEF_unsigned_sqrt_out_first__60___d161 = INST_sqrt_out.METH_first();
  INST_par_blocks_1_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_par_blocks_1_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_1_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,32", &__str_literal_2, DEF_unsigned_sqrt_out_first__60___d161);
  INST_sqrt_out.METH_deq();
}

void MOD_mkTB::RL_action_f_update_l21c17()
{
  tUInt32 DEF_cntr2_01_PLUS_1___d165;
  DEF_b__h19051 = INST_cntr2.METH_read();
  DEF_cntr2_01_PLUS_1___d165 = DEF_b__h19051 + 1u;
  INST_par_blocks_1_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_par_blocks_1_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_1_state_set_pw.METH_wset();
  INST_cntr2.METH_write(DEF_cntr2_01_PLUS_1___d165);
}

void MOD_mkTB::RL_action_f_init_l16c17()
{
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_par_blocks_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_state_set_pw.METH_wset();
  INST_cntr1.METH_write(0u);
}

void MOD_mkTB::RL_action_l16c65()
{
  DEF_b__h7200 = INST_cntr1.METH_read();
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_par_blocks_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_state_set_pw.METH_wset();
  INST_sqrt_in.METH_enq(DEF_b__h7200);
}

void MOD_mkTB::RL_action_f_update_l16c17()
{
  tUInt32 DEF_cntr1_16_PLUS_1___d187;
  DEF_b__h7200 = INST_cntr1.METH_read();
  DEF_cntr1_16_PLUS_1___d187 = DEF_b__h7200 + 1u;
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_par_blocks_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_state_set_pw.METH_wset();
  INST_cntr1.METH_write(DEF_cntr1_16_PLUS_1___d187);
}

void MOD_mkTB::RL_actionpar_start_l14c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_par_blocks_1_start_wire.METH_wset((tUInt8)1u);
  INST_par_blocks_1_start_reg_1.METH_wset((tUInt8)1u);
  INST_par_blocks_start_wire.METH_wset((tUInt8)1u);
  INST_par_blocks_start_reg_1.METH_wset((tUInt8)1u);
  INST_par_running.METH_wset((tUInt8)1u);
}

void MOD_mkTB::RL_actionpar_run_l14c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_par_running.METH_wset((tUInt8)1u);
}

void MOD_mkTB::RL_idle_l12c14()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTB::RL_idle_l12c14_1()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTB::RL_idle_l21c17()
{
  INST_par_blocks_1_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_par_blocks_1_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_1_state_set_pw.METH_wset();
}

void MOD_mkTB::RL_idle_l21c17_1()
{
  INST_par_blocks_1_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_par_blocks_1_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_1_state_set_pw.METH_wset();
}

void MOD_mkTB::RL_idle_l16c17()
{
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_par_blocks_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_state_set_pw.METH_wset();
}

void MOD_mkTB::RL_idle_l16c17_1()
{
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_par_blocks_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_state_set_pw.METH_wset();
}

void MOD_mkTB::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTB::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTB::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTB::__me_check_16()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l13c9 && ((((((DEF_WILL_FIRE_RL_action_f_init_l21c17 || DEF_WILL_FIRE_RL_action_l21c65) || DEF_WILL_FIRE_RL_action_f_update_l21c17) || DEF_WILL_FIRE_RL_action_f_init_l16c17) || DEF_WILL_FIRE_RL_action_l16c65) || DEF_WILL_FIRE_RL_action_f_update_l16c17) || DEF_WILL_FIRE_RL_actionpar_start_l14c9))
      dollar_error(sim_hdl, this, "s", &__str_literal_3);
}

void MOD_mkTB::__me_check_17()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_init_l21c17 && (DEF_WILL_FIRE_RL_action_l21c65 || DEF_WILL_FIRE_RL_action_f_update_l21c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkTB::__me_check_18()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l21c65 && DEF_WILL_FIRE_RL_action_f_update_l21c17)
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
}

void MOD_mkTB::__me_check_20()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_init_l16c17 && (DEF_WILL_FIRE_RL_action_l16c65 || DEF_WILL_FIRE_RL_action_f_update_l16c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
}

void MOD_mkTB::__me_check_21()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l16c65 && DEF_WILL_FIRE_RL_action_f_update_l16c17)
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
}


/* Methods */


/* Reset routines */

void MOD_mkTB::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_sqrt_out.reset_RST(ARG_rst_in);
  INST_sqrt_in.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_par_blocks_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_par_blocks_state_fired.reset_RST(ARG_rst_in);
  INST_par_blocks_state_can_overlap.reset_RST(ARG_rst_in);
  INST_par_blocks_start_reg.reset_RST(ARG_rst_in);
  INST_par_blocks_1_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_par_blocks_1_state_fired.reset_RST(ARG_rst_in);
  INST_par_blocks_1_state_can_overlap.reset_RST(ARG_rst_in);
  INST_par_blocks_1_start_reg.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTB::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTB::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_cntr1.dump_state(indent + 2u);
  INST_cntr2.dump_state(indent + 2u);
  INST_par_blocks_1_abort.dump_state(indent + 2u);
  INST_par_blocks_1_start_reg.dump_state(indent + 2u);
  INST_par_blocks_1_start_reg_1.dump_state(indent + 2u);
  INST_par_blocks_1_start_wire.dump_state(indent + 2u);
  INST_par_blocks_1_state_can_overlap.dump_state(indent + 2u);
  INST_par_blocks_1_state_fired.dump_state(indent + 2u);
  INST_par_blocks_1_state_fired_1.dump_state(indent + 2u);
  INST_par_blocks_1_state_mkFSMstate.dump_state(indent + 2u);
  INST_par_blocks_1_state_overlap_pw.dump_state(indent + 2u);
  INST_par_blocks_1_state_set_pw.dump_state(indent + 2u);
  INST_par_blocks_abort.dump_state(indent + 2u);
  INST_par_blocks_start_reg.dump_state(indent + 2u);
  INST_par_blocks_start_reg_1.dump_state(indent + 2u);
  INST_par_blocks_start_wire.dump_state(indent + 2u);
  INST_par_blocks_state_can_overlap.dump_state(indent + 2u);
  INST_par_blocks_state_fired.dump_state(indent + 2u);
  INST_par_blocks_state_fired_1.dump_state(indent + 2u);
  INST_par_blocks_state_mkFSMstate.dump_state(indent + 2u);
  INST_par_blocks_state_overlap_pw.dump_state(indent + 2u);
  INST_par_blocks_state_set_pw.dump_state(indent + 2u);
  INST_par_running.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_sqrt_in.dump_state(indent + 2u);
  INST_sqrt_out.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTB::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 48u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_init_l16c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_init_l21c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_update_l16c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_update_l21c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l13c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l16c65", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l21c65", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_actionpar_start_l14c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h19051", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h7200", 32u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_cntr1.dump_VCD_defs(num);
  num = INST_cntr2.dump_VCD_defs(num);
  num = INST_par_blocks_1_abort.dump_VCD_defs(num);
  num = INST_par_blocks_1_start_reg.dump_VCD_defs(num);
  num = INST_par_blocks_1_start_reg_1.dump_VCD_defs(num);
  num = INST_par_blocks_1_start_wire.dump_VCD_defs(num);
  num = INST_par_blocks_1_state_can_overlap.dump_VCD_defs(num);
  num = INST_par_blocks_1_state_fired.dump_VCD_defs(num);
  num = INST_par_blocks_1_state_fired_1.dump_VCD_defs(num);
  num = INST_par_blocks_1_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_par_blocks_1_state_overlap_pw.dump_VCD_defs(num);
  num = INST_par_blocks_1_state_set_pw.dump_VCD_defs(num);
  num = INST_par_blocks_abort.dump_VCD_defs(num);
  num = INST_par_blocks_start_reg.dump_VCD_defs(num);
  num = INST_par_blocks_start_reg_1.dump_VCD_defs(num);
  num = INST_par_blocks_start_wire.dump_VCD_defs(num);
  num = INST_par_blocks_state_can_overlap.dump_VCD_defs(num);
  num = INST_par_blocks_state_fired.dump_VCD_defs(num);
  num = INST_par_blocks_state_fired_1.dump_VCD_defs(num);
  num = INST_par_blocks_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_par_blocks_state_overlap_pw.dump_VCD_defs(num);
  num = INST_par_blocks_state_set_pw.dump_VCD_defs(num);
  num = INST_par_running.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_sqrt_in.dump_VCD_defs(num);
  num = INST_sqrt_out.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTB::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTB &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTB::vcd_defs(tVCDDumpType dt, MOD_mkTB &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_init_l16c17) != DEF_WILL_FIRE_RL_action_f_init_l16c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_init_l16c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_init_l16c17 = DEF_WILL_FIRE_RL_action_f_init_l16c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_init_l21c17) != DEF_WILL_FIRE_RL_action_f_init_l21c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_init_l21c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_init_l21c17 = DEF_WILL_FIRE_RL_action_f_init_l21c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_update_l16c17) != DEF_WILL_FIRE_RL_action_f_update_l16c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_update_l16c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_update_l16c17 = DEF_WILL_FIRE_RL_action_f_update_l16c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_update_l21c17) != DEF_WILL_FIRE_RL_action_f_update_l21c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_update_l21c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_update_l21c17 = DEF_WILL_FIRE_RL_action_f_update_l21c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l13c9) != DEF_WILL_FIRE_RL_action_l13c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l13c9, 1u);
	backing.DEF_WILL_FIRE_RL_action_l13c9 = DEF_WILL_FIRE_RL_action_l13c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l16c65) != DEF_WILL_FIRE_RL_action_l16c65)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l16c65, 1u);
	backing.DEF_WILL_FIRE_RL_action_l16c65 = DEF_WILL_FIRE_RL_action_l16c65;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l21c65) != DEF_WILL_FIRE_RL_action_l21c65)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l21c65, 1u);
	backing.DEF_WILL_FIRE_RL_action_l21c65 = DEF_WILL_FIRE_RL_action_l21c65;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_actionpar_start_l14c9) != DEF_WILL_FIRE_RL_actionpar_start_l14c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_actionpar_start_l14c9, 1u);
	backing.DEF_WILL_FIRE_RL_actionpar_start_l14c9 = DEF_WILL_FIRE_RL_actionpar_start_l14c9;
      }
      ++num;
      if ((backing.DEF_b__h19051) != DEF_b__h19051)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h19051, 32u);
	backing.DEF_b__h19051 = DEF_b__h19051;
      }
      ++num;
      if ((backing.DEF_b__h7200) != DEF_b__h7200)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h7200, 32u);
	backing.DEF_b__h7200 = DEF_b__h7200;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_init_l16c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_init_l16c17 = DEF_WILL_FIRE_RL_action_f_init_l16c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_init_l21c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_init_l21c17 = DEF_WILL_FIRE_RL_action_f_init_l21c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_update_l16c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_update_l16c17 = DEF_WILL_FIRE_RL_action_f_update_l16c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_update_l21c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_update_l21c17 = DEF_WILL_FIRE_RL_action_f_update_l21c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l13c9, 1u);
      backing.DEF_WILL_FIRE_RL_action_l13c9 = DEF_WILL_FIRE_RL_action_l13c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l16c65, 1u);
      backing.DEF_WILL_FIRE_RL_action_l16c65 = DEF_WILL_FIRE_RL_action_l16c65;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l21c65, 1u);
      backing.DEF_WILL_FIRE_RL_action_l21c65 = DEF_WILL_FIRE_RL_action_l21c65;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_actionpar_start_l14c9, 1u);
      backing.DEF_WILL_FIRE_RL_actionpar_start_l14c9 = DEF_WILL_FIRE_RL_actionpar_start_l14c9;
      vcd_write_val(sim_hdl, num++, DEF_b__h19051, 32u);
      backing.DEF_b__h19051 = DEF_b__h19051;
      vcd_write_val(sim_hdl, num++, DEF_b__h7200, 32u);
      backing.DEF_b__h7200 = DEF_b__h7200;
    }
}

void MOD_mkTB::vcd_prims(tVCDDumpType dt, MOD_mkTB &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_cntr1.dump_VCD(dt, backing.INST_cntr1);
  INST_cntr2.dump_VCD(dt, backing.INST_cntr2);
  INST_par_blocks_1_abort.dump_VCD(dt, backing.INST_par_blocks_1_abort);
  INST_par_blocks_1_start_reg.dump_VCD(dt, backing.INST_par_blocks_1_start_reg);
  INST_par_blocks_1_start_reg_1.dump_VCD(dt, backing.INST_par_blocks_1_start_reg_1);
  INST_par_blocks_1_start_wire.dump_VCD(dt, backing.INST_par_blocks_1_start_wire);
  INST_par_blocks_1_state_can_overlap.dump_VCD(dt, backing.INST_par_blocks_1_state_can_overlap);
  INST_par_blocks_1_state_fired.dump_VCD(dt, backing.INST_par_blocks_1_state_fired);
  INST_par_blocks_1_state_fired_1.dump_VCD(dt, backing.INST_par_blocks_1_state_fired_1);
  INST_par_blocks_1_state_mkFSMstate.dump_VCD(dt, backing.INST_par_blocks_1_state_mkFSMstate);
  INST_par_blocks_1_state_overlap_pw.dump_VCD(dt, backing.INST_par_blocks_1_state_overlap_pw);
  INST_par_blocks_1_state_set_pw.dump_VCD(dt, backing.INST_par_blocks_1_state_set_pw);
  INST_par_blocks_abort.dump_VCD(dt, backing.INST_par_blocks_abort);
  INST_par_blocks_start_reg.dump_VCD(dt, backing.INST_par_blocks_start_reg);
  INST_par_blocks_start_reg_1.dump_VCD(dt, backing.INST_par_blocks_start_reg_1);
  INST_par_blocks_start_wire.dump_VCD(dt, backing.INST_par_blocks_start_wire);
  INST_par_blocks_state_can_overlap.dump_VCD(dt, backing.INST_par_blocks_state_can_overlap);
  INST_par_blocks_state_fired.dump_VCD(dt, backing.INST_par_blocks_state_fired);
  INST_par_blocks_state_fired_1.dump_VCD(dt, backing.INST_par_blocks_state_fired_1);
  INST_par_blocks_state_mkFSMstate.dump_VCD(dt, backing.INST_par_blocks_state_mkFSMstate);
  INST_par_blocks_state_overlap_pw.dump_VCD(dt, backing.INST_par_blocks_state_overlap_pw);
  INST_par_blocks_state_set_pw.dump_VCD(dt, backing.INST_par_blocks_state_set_pw);
  INST_par_running.dump_VCD(dt, backing.INST_par_running);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_sqrt_in.dump_VCD(dt, backing.INST_sqrt_in);
  INST_sqrt_out.dump_VCD(dt, backing.INST_sqrt_out);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}
