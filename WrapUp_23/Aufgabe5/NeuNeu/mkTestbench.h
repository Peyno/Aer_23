/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Sat Feb 24 16:20:42 CET 2024
 * 
 */

/* Generation options: */
#ifndef __mkTestbench_h__
#define __mkTestbench_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkTestbench module */
class MOD_mkTestbench : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_abort;
  MOD_Reg<tUInt32> INST_dut_cc;
  MOD_Reg<tUInt32> INST_dut_count;
  MOD_Fifo<tUInt8> INST_dut_fifo;
  MOD_Reg<tUInt8> INST_dut_fifowert;
  MOD_Reg<tUInt8> INST_dut_pinbit;
  MOD_Reg<tUInt8> INST_dut_state;
  MOD_Fifo<tUInt8> INST_fOut;
  MOD_Wire<tUInt8> INST_par_blocks_1_abort;
  MOD_Wire<tUInt8> INST_par_blocks_1_par_blocks_1_abort;
  MOD_Reg<tUInt8> INST_par_blocks_1_par_blocks_1_fired;
  MOD_Wire<tUInt8> INST_par_blocks_1_par_blocks_1_fired_1;
  MOD_Reg<tUInt8> INST_par_blocks_1_par_blocks_1_start_reg;
  MOD_Wire<tUInt8> INST_par_blocks_1_par_blocks_1_start_reg_1;
  MOD_Wire<tUInt8> INST_par_blocks_1_par_blocks_1_start_wire;
  MOD_Wire<tUInt8> INST_par_blocks_1_par_blocks_abort;
  MOD_Reg<tUInt8> INST_par_blocks_1_par_blocks_start_reg;
  MOD_Wire<tUInt8> INST_par_blocks_1_par_blocks_start_reg_1;
  MOD_Wire<tUInt8> INST_par_blocks_1_par_blocks_start_wire;
  MOD_Reg<tUInt8> INST_par_blocks_1_par_blocks_state_can_overlap;
  MOD_Reg<tUInt8> INST_par_blocks_1_par_blocks_state_fired;
  MOD_Wire<tUInt8> INST_par_blocks_1_par_blocks_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_par_blocks_1_par_blocks_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_par_blocks_1_par_blocks_state_overlap_pw;
  MOD_Wire<tUInt8> INST_par_blocks_1_par_blocks_state_set_pw;
  MOD_Wire<tUInt8> INST_par_blocks_1_par_running;
  MOD_Reg<tUInt8> INST_par_blocks_1_start_reg;
  MOD_Wire<tUInt8> INST_par_blocks_1_start_reg_1;
  MOD_Wire<tUInt8> INST_par_blocks_1_start_wire;
  MOD_Reg<tUInt8> INST_par_blocks_1_state_can_overlap;
  MOD_Reg<tUInt8> INST_par_blocks_1_state_fired;
  MOD_Wire<tUInt8> INST_par_blocks_1_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_par_blocks_1_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_par_blocks_1_state_overlap_pw;
  MOD_Wire<tUInt8> INST_par_blocks_1_state_set_pw;
  MOD_Wire<tUInt8> INST_par_blocks_abort;
  MOD_Reg<tUInt8> INST_par_blocks_start_reg;
  MOD_Wire<tUInt8> INST_par_blocks_start_reg_1;
  MOD_Wire<tUInt8> INST_par_blocks_start_wire;
  MOD_Reg<tUInt8> INST_par_blocks_state_can_overlap;
  MOD_Reg<tUInt8> INST_par_blocks_state_fired;
  MOD_Wire<tUInt8> INST_par_blocks_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_par_blocks_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_par_blocks_state_overlap_pw;
  MOD_Wire<tUInt8> INST_par_blocks_state_set_pw;
  MOD_Wire<tUInt8> INST_par_running;
  MOD_Reg<tUInt32> INST_rCounter;
  MOD_Reg<tUInt32> INST_rIndex;
  MOD_Reg<tUInt8> INST_rPkt;
  MOD_Reg<tUInt32> INST_rTestIndexOut;
  MOD_Reg<tUInt32> INST_rTestIndexRX;
  MOD_Reg<tUInt8> INST_running;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
 
 /* Constructor */
 public:
  MOD_mkTestbench(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_action_l203c9;
  tUInt8 DEF_WILL_FIRE_RL_actionpar_start_l150c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l152c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l200c26;
  tUInt8 DEF_WILL_FIRE_RL_actionpar_start_l179c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l183c17;
  tUInt8 DEF_WILL_FIRE_RL_action_l182c30;
  tUInt8 DEF_WILL_FIRE_RL_action_l171c17;
  tUInt8 DEF_WILL_FIRE_RL_action_l169c30;
  tUInt8 DEF_WILL_FIRE_RL_action_l161c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l149c22;
  tUInt8 DEF_WILL_FIRE_RL_action_l148c23;
  tUInt32 DEF_b__h314;
  tUInt32 DEF_b__h37872;
  tUInt32 DEF_x__h76984;
  tUInt32 DEF_b__h16697;
  tUInt32 DEF_x__h74608;
  tUInt8 DEF_dut_pinbit__h75551;
  tUInt8 DEF_NOT_dut_pinbit_67___d168;
 
 /* Local definitions */
 private:
  tUInt8 DEF_c__h74502;
  tUInt32 DEF_rCounter_88_MINUS_1___d205;
 
 /* Rules */
 public:
  void RL_dut_counter();
  void RL_dut_idlerule();
  void RL_dut_startrule();
  void RL_dut_transferrule();
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_par_blocks_start_reg__dreg_update();
  void RL_par_blocks_state_handle_abort();
  void RL_par_blocks_state_fired__dreg_update();
  void RL_par_blocks_state_every();
  void RL_par_blocks_restart();
  void RL_par_blocks_1_start_reg__dreg_update();
  void RL_par_blocks_1_state_handle_abort();
  void RL_par_blocks_1_state_fired__dreg_update();
  void RL_par_blocks_1_state_every();
  void RL_par_blocks_1_par_blocks_start_reg__dreg_update();
  void RL_par_blocks_1_par_blocks_state_handle_abort();
  void RL_par_blocks_1_par_blocks_state_fired__dreg_update();
  void RL_par_blocks_1_par_blocks_state_every();
  void RL_par_blocks_1_par_blocks_restart();
  void RL_par_blocks_1_par_blocks_1_start_reg__dreg_update();
  void RL_par_blocks_1_par_blocks_1_fired__dreg_update();
  void RL_par_blocks_1_par_blocks_1_restart();
  void RL_par_blocks_1_restart();
  void RL_restart();
  void RL_action_l148c23();
  void RL_action_l149c22();
  void RL_action_l161c13();
  void RL_action_l169c30();
  void RL_action_l171c17();
  void RL_action_l182c30();
  void RL_action_l183c17();
  void RL_actionpar_start_l179c13();
  void RL_action_l200c26();
  void RL_action_l152c13();
  void RL_actionpar_start_l150c9();
  void RL_action_l203c9();
  void RL_action_l190c13();
  void RL_actionpar_run_l179c13();
  void RL_actionpar_run_l150c9();
  void RL_idle_l147c14();
  void RL_idle_l160c9();
  void RL_idle_l160c9_1();
  void RL_idle_l180c13();
  void RL_idle_l151c9();
  void RL_idle_l151c9_1();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void __me_check_27();
  void __me_check_28();
  void __me_check_29();
  void __me_check_30();
  void __me_check_31();
  void __me_check_32();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTestbench &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTestbench &backing);
};

#endif /* ifndef __mkTestbench_h__ */
