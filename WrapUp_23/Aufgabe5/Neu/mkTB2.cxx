/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Fri Feb 23 22:19:31 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTB2.h"


/* String declarations */
static std::string const __str_literal_6("%d Wrong Data expected: %d got: %d  Time: %d", 44u);
static std::string const __str_literal_8("Code executed with %d Mistakes!", 31u);
static std::string const __str_literal_5("Data: %d ... Fetching Data from Tackt: %d", 41u);
static std::string const __str_literal_13("Error: \"Tb.bsv\", line 102, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l102c13] and\n  [RL_action_l102c25, RL_action_f_init_l109c13, RL_action_r_init_l110c17,\n  RL_action_l110c29, RL_action_f_update_l109c13, RL_action_r_init_l121c13,\n  RL_action_l121c25, RL_action_l129c13] ) fired in the same clock cycle.\n",
					  344u);
static std::string const __str_literal_14("Error: \"Tb.bsv\", line 102, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l102c25] and\n  [RL_action_f_init_l109c13, RL_action_r_init_l110c17, RL_action_l110c29,\n  RL_action_f_update_l109c13, RL_action_r_init_l121c13, RL_action_l121c25,\n  RL_action_l129c13] ) fired in the same clock cycle.\n",
					  318u);
static std::string const __str_literal_15("Error: \"Tb.bsv\", line 109, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l109c13] and\n  [RL_action_r_init_l110c17, RL_action_l110c29, RL_action_f_update_l109c13,\n  RL_action_r_init_l121c13, RL_action_l121c25, RL_action_l129c13] ) fired in\n  the same clock cycle.\n",
					  299u);
static std::string const __str_literal_18("Error: \"Tb.bsv\", line 109, column 52: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_update_l109c13] and\n  [RL_action_r_init_l121c13, RL_action_l121c25, RL_action_l129c13] ) fired in\n  the same clock cycle.\n",
					  226u);
static std::string const __str_literal_16("Error: \"Tb.bsv\", line 110, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l110c17] and\n  [RL_action_l110c29, RL_action_f_update_l109c13, RL_action_r_init_l121c13,\n  RL_action_l121c25, RL_action_l129c13] ) fired in the same clock cycle.\n",
					  271u);
static std::string const __str_literal_17("Error: \"Tb.bsv\", line 110, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l110c29] and\n  [RL_action_f_update_l109c13, RL_action_r_init_l121c13, RL_action_l121c25,\n  RL_action_l129c13] ) fired in the same clock cycle.\n",
					  245u);
static std::string const __str_literal_19("Error: \"Tb.bsv\", line 121, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l121c13] and\n  [RL_action_l121c25, RL_action_l129c13] ) fired in the same clock cycle.\n",
					  196u);
static std::string const __str_literal_20("Error: \"Tb.bsv\", line 121, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l121c25] and\n  [RL_action_l129c13] ) fired in the same clock cycle.\n",
					  170u);
static std::string const __str_literal_9("Error: \"Tb.bsv\", line 87, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l87c13] and\n  [RL_action_l88c13, RL_action_l95c16, RL_action_l96c13,\n  RL_action_r_init_l102c13, RL_action_l102c25, RL_action_f_init_l109c13,\n  RL_action_r_init_l110c17, RL_action_l110c29, RL_action_f_update_l109c13,\n  RL_action_r_init_l121c13, RL_action_l121c25, RL_action_l129c13] ) fired in\n  the same clock cycle.\n",
					 419u);
static std::string const __str_literal_10("Error: \"Tb.bsv\", line 88, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l88c13] and\n  [RL_action_l95c16, RL_action_l96c13, RL_action_r_init_l102c13,\n  RL_action_l102c25, RL_action_f_init_l109c13, RL_action_r_init_l110c17,\n  RL_action_l110c29, RL_action_f_update_l109c13, RL_action_r_init_l121c13,\n  RL_action_l121c25, RL_action_l129c13] ) fired in the same clock cycle.\n",
					  399u);
static std::string const __str_literal_11("Error: \"Tb.bsv\", line 95, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l95c16] and\n  [RL_action_l96c13, RL_action_r_init_l102c13, RL_action_l102c25,\n  RL_action_f_init_l109c13, RL_action_r_init_l110c17, RL_action_l110c29,\n  RL_action_f_update_l109c13, RL_action_r_init_l121c13, RL_action_l121c25,\n  RL_action_l129c13] ) fired in the same clock cycle.\n",
					  381u);
static std::string const __str_literal_12("Error: \"Tb.bsv\", line 96, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l96c13] and\n  [RL_action_r_init_l102c13, RL_action_l102c25, RL_action_f_init_l109c13,\n  RL_action_r_init_l110c17, RL_action_l110c29, RL_action_f_update_l109c13,\n  RL_action_r_init_l121c13, RL_action_l121c25, RL_action_l129c13] ) fired in\n  the same clock cycle.\n",
					  363u);
static std::string const __str_literal_1("StartTB ...", 11u);
static std::string const __str_literal_3("Waiting for Data to be sent ...", 31u);
static std::string const __str_literal_4("Wrong Data Notification!", 24u);
static std::string const __str_literal_7("Wrong END Bit: 1 got: ", 22u);
static std::string const __str_literal_2("Wrong Idle Output!", 18u);


/* Constructor */
MOD_mkTB2::MOD_mkTB2(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_counter(simHdl, "counter", this, 32u, 0u, (tUInt8)0u),
    INST_dut_bbit(simHdl, "dut_bbit", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_dut_c(simHdl, "dut_c", this, 32u, 0u, (tUInt8)0u),
    INST_dut_count(simHdl, "dut_count", this, 32u, 16u, (tUInt8)0u),
    INST_dut_datafifo(simHdl, "dut_datafifo", this, 8u),
    INST_dut_fifo(simHdl, "dut_fifo", this, 8u, 2u, (tUInt8)1u, 0u),
    INST_dut_state(simHdl, "dut_state", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_jj_1_repeat_count(simHdl, "jj_1_repeat_count", this, 16u, 1u, (tUInt8)0u),
    INST_jj_2_repeat_count(simHdl, "jj_2_repeat_count", this, 16u, 1u, (tUInt8)0u),
    INST_jj_repeat_count(simHdl, "jj_repeat_count", this, 15u, 1u, (tUInt8)0u),
    INST_mistakes(simHdl, "mistakes", this, 32u, 0u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 5u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h75683(12297829382473034410llu),
    DEF_v__h75582(12297829382473034410llu)
{
  symbol_count = 82u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTB2::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_10", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_11", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_12", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_13", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_14", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_15", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_16", SYM_RULE);
  init_symbol(&symbols[7u], "__me_check_17", SYM_RULE);
  init_symbol(&symbols[8u], "__me_check_18", SYM_RULE);
  init_symbol(&symbols[9u], "__me_check_19", SYM_RULE);
  init_symbol(&symbols[10u], "__me_check_20", SYM_RULE);
  init_symbol(&symbols[11u], "__me_check_21", SYM_RULE);
  init_symbol(&symbols[12u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[13u], "b__h322", SYM_DEF, &DEF_b__h322, 32u);
  init_symbol(&symbols[14u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[15u], "dut_bbit", SYM_MODULE, &INST_dut_bbit);
  init_symbol(&symbols[16u], "dut_bbit__h77840", SYM_DEF, &DEF_dut_bbit__h77840, 1u);
  init_symbol(&symbols[17u], "dut_c", SYM_MODULE, &INST_dut_c);
  init_symbol(&symbols[18u], "dut_count", SYM_MODULE, &INST_dut_count);
  init_symbol(&symbols[19u], "dut_datafifo", SYM_MODULE, &INST_dut_datafifo);
  init_symbol(&symbols[20u], "dut_fifo", SYM_MODULE, &INST_dut_fifo);
  init_symbol(&symbols[21u], "dut_state", SYM_MODULE, &INST_dut_state);
  init_symbol(&symbols[22u], "jj_1_repeat_count", SYM_MODULE, &INST_jj_1_repeat_count);
  init_symbol(&symbols[23u], "jj_2_repeat_count", SYM_MODULE, &INST_jj_2_repeat_count);
  init_symbol(&symbols[24u], "jj_repeat_count", SYM_MODULE, &INST_jj_repeat_count);
  init_symbol(&symbols[25u], "mistakes", SYM_MODULE, &INST_mistakes);
  init_symbol(&symbols[26u], "RL_action_f_init_l109c13", SYM_RULE);
  init_symbol(&symbols[27u], "RL_action_f_update_l109c13", SYM_RULE);
  init_symbol(&symbols[28u], "RL_action_l102c25", SYM_RULE);
  init_symbol(&symbols[29u], "RL_action_l110c29", SYM_RULE);
  init_symbol(&symbols[30u], "RL_action_l121c25", SYM_RULE);
  init_symbol(&symbols[31u], "RL_action_l129c13", SYM_RULE);
  init_symbol(&symbols[32u], "RL_action_l87c13", SYM_RULE);
  init_symbol(&symbols[33u], "RL_action_l88c13", SYM_RULE);
  init_symbol(&symbols[34u], "RL_action_l95c16", SYM_RULE);
  init_symbol(&symbols[35u], "RL_action_l96c13", SYM_RULE);
  init_symbol(&symbols[36u], "RL_action_ovlp_r_update_l102c13", SYM_RULE);
  init_symbol(&symbols[37u], "RL_action_ovlp_r_update_l110c17", SYM_RULE);
  init_symbol(&symbols[38u], "RL_action_ovlp_r_update_l121c13", SYM_RULE);
  init_symbol(&symbols[39u], "RL_action_r_init_l102c13", SYM_RULE);
  init_symbol(&symbols[40u], "RL_action_r_init_l110c17", SYM_RULE);
  init_symbol(&symbols[41u], "RL_action_r_init_l121c13", SYM_RULE);
  init_symbol(&symbols[42u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[43u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[44u], "RL_dut_cc", SYM_RULE);
  init_symbol(&symbols[45u], "RL_dut_r1", SYM_RULE);
  init_symbol(&symbols[46u], "RL_dut_r2", SYM_RULE);
  init_symbol(&symbols[47u], "RL_dut_r3", SYM_RULE);
  init_symbol(&symbols[48u], "RL_dut_r4", SYM_RULE);
  init_symbol(&symbols[49u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[50u], "RL_idle_l86c18", SYM_RULE);
  init_symbol(&symbols[51u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[52u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[53u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[54u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[55u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[56u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[57u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[58u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[59u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[60u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[61u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[62u], "state_can_overlap__h7145", SYM_DEF, &DEF_state_can_overlap__h7145, 1u);
  init_symbol(&symbols[63u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[64u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[65u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[66u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[67u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[68u],
	      "WILL_FIRE_RL_action_f_init_l109c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_init_l109c13,
	      1u);
  init_symbol(&symbols[69u],
	      "WILL_FIRE_RL_action_f_update_l109c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_update_l109c13,
	      1u);
  init_symbol(&symbols[70u],
	      "WILL_FIRE_RL_action_l102c25",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l102c25,
	      1u);
  init_symbol(&symbols[71u],
	      "WILL_FIRE_RL_action_l110c29",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l110c29,
	      1u);
  init_symbol(&symbols[72u],
	      "WILL_FIRE_RL_action_l121c25",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l121c25,
	      1u);
  init_symbol(&symbols[73u],
	      "WILL_FIRE_RL_action_l129c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l129c13,
	      1u);
  init_symbol(&symbols[74u],
	      "WILL_FIRE_RL_action_l87c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l87c13,
	      1u);
  init_symbol(&symbols[75u],
	      "WILL_FIRE_RL_action_l88c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l88c13,
	      1u);
  init_symbol(&symbols[76u],
	      "WILL_FIRE_RL_action_l95c16",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l95c16,
	      1u);
  init_symbol(&symbols[77u],
	      "WILL_FIRE_RL_action_l96c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l96c13,
	      1u);
  init_symbol(&symbols[78u],
	      "WILL_FIRE_RL_action_r_init_l102c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l102c13,
	      1u);
  init_symbol(&symbols[79u],
	      "WILL_FIRE_RL_action_r_init_l110c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l110c17,
	      1u);
  init_symbol(&symbols[80u],
	      "WILL_FIRE_RL_action_r_init_l121c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l121c13,
	      1u);
  init_symbol(&symbols[81u], "x__h75742", SYM_DEF, &DEF_x__h75742, 32u);
}


/* Rule actions */

void MOD_mkTB2::RL_dut_cc()
{
  tUInt32 DEF_dut_count_MINUS_1___d4;
  DEF_b__h322 = INST_dut_count.METH_read();
  DEF_dut_count_MINUS_1___d4 = DEF_b__h322 - 1u;
  INST_dut_count.METH_write(DEF_dut_count_MINUS_1___d4);
}

void MOD_mkTB2::RL_dut_r1()
{
  tUInt8 DEF_dut_fifo_notEmpty____d9;
  DEF_dut_fifo_notEmpty____d9 = INST_dut_fifo.METH_notEmpty();
  INST_dut_c.METH_write(0u);
  INST_dut_count.METH_write(16u);
  INST_dut_bbit.METH_write((tUInt8)1u);
  if (DEF_dut_fifo_notEmpty____d9)
    INST_dut_state.METH_write((tUInt8)1u);
}

void MOD_mkTB2::RL_dut_r2()
{
  INST_dut_count.METH_write(16u);
  INST_dut_bbit.METH_write((tUInt8)0u);
  INST_dut_state.METH_write((tUInt8)2u);
}

void MOD_mkTB2::RL_dut_r3()
{
  tUInt32 DEF_dut_c_6_PLUS_1___d17;
  tUInt8 DEF_dut_c_6_SLT_8___d19;
  tUInt8 DEF_NOT_dut_c_6_SLT_8_9___d23;
  tUInt8 DEF_x__h709;
  tUInt8 DEF_dut_c_6_BITS_2_TO_0___d21;
  tUInt8 DEF_x__h666;
  tUInt8 DEF_bs__h740;
  tUInt32 DEF_x__h770;
  DEF_x__h770 = INST_dut_c.METH_read();
  DEF_bs__h740 = INST_dut_datafifo.METH_read();
  DEF_x__h666 = INST_dut_fifo.METH_first();
  DEF_dut_c_6_BITS_2_TO_0___d21 = (tUInt8)((tUInt8)7u & DEF_x__h770);
  DEF_x__h709 = primExtract8(1u,
			     8u,
			     (tUInt8)(DEF_bs__h740),
			     3u,
			     (tUInt8)(DEF_dut_c_6_BITS_2_TO_0___d21),
			     3u,
			     (tUInt8)(DEF_dut_c_6_BITS_2_TO_0___d21));
  DEF_dut_c_6_SLT_8___d19 = primSLT8(1u, 32u, (tUInt32)(DEF_x__h770), 32u, 8u);
  DEF_NOT_dut_c_6_SLT_8_9___d23 = !DEF_dut_c_6_SLT_8___d19;
  DEF_dut_c_6_PLUS_1___d17 = DEF_x__h770 + 1u;
  INST_dut_count.METH_write(16u);
  INST_dut_c.METH_write(DEF_dut_c_6_PLUS_1___d17);
  INST_dut_datafifo.METH_write(DEF_x__h666);
  if (DEF_dut_c_6_SLT_8___d19)
    INST_dut_bbit.METH_write(DEF_x__h709);
  if (DEF_NOT_dut_c_6_SLT_8_9___d23)
    INST_dut_state.METH_write((tUInt8)0u);
  if (DEF_NOT_dut_c_6_SLT_8_9___d23)
    INST_dut_fifo.METH_deq();
}

void MOD_mkTB2::RL_dut_r4()
{
  INST_dut_fifo.METH_deq();
  INST_dut_c.METH_write(0u);
  INST_dut_count.METH_write(16u);
  INST_dut_bbit.METH_write((tUInt8)1u);
  INST_dut_state.METH_write((tUInt8)0u);
}

void MOD_mkTB2::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas__7_AND_start_reg_2_wget__8___d29;
  DEF_start_reg_2_whas__7_AND_start_reg_2_wget__8___d29 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas__7_AND_start_reg_2_wget__8___d29);
}

void MOD_mkTB2::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTB2::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__9_AND_state_fired_1_wget__0___d41;
  DEF_state_fired_1_whas__9_AND_state_fired_1_wget__0___d41 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__9_AND_state_fired_1_wget__0___d41);
}

void MOD_mkTB2::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__2_OR_NOT_state_overlap_pw_w_ETC___d47;
  DEF_state_can_overlap__h7145 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__2_OR_NOT_state_overlap_pw_w_ETC___d47 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h7145);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__2_OR_NOT_state_overlap_pw_w_ETC___d47);
}

void MOD_mkTB2::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTB2::RL_action_l87c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
}

void MOD_mkTB2::RL_action_l88c13()
{
  DEF_b__h72727 = INST_mistakes.METH_read();
  DEF_dut_bbit__h77840 = INST_dut_bbit.METH_read();
  DEF_NOT_dut_bbit_5___d66 = !DEF_dut_bbit__h77840;
  DEF_mistakes_7_PLUS_1___d68 = DEF_b__h72727 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_bbit_5___d66)
      dollar_display(sim_hdl, this, "s", &__str_literal_2);
  if (DEF_NOT_dut_bbit_5___d66)
    INST_mistakes.METH_write(DEF_mistakes_7_PLUS_1___d68);
}

void MOD_mkTB2::RL_action_l95c16()
{
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_dut_fifo.METH_enq((tUInt8)170u);
}

void MOD_mkTB2::RL_action_l96c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_3);
}

void MOD_mkTB2::RL_action_r_init_l102c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_repeat_count.METH_write(1u);
}

void MOD_mkTB2::RL_action_l102c25()
{
  DEF_b__h72727 = INST_mistakes.METH_read();
  DEF_dut_bbit__h77840 = INST_dut_bbit.METH_read();
  DEF_mistakes_7_PLUS_1___d68 = DEF_b__h72727 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)7u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_dut_bbit__h77840)
      dollar_display(sim_hdl, this, "s", &__str_literal_4);
  if (DEF_dut_bbit__h77840)
    INST_mistakes.METH_write(DEF_mistakes_7_PLUS_1___d68);
}

void MOD_mkTB2::RL_action_f_init_l109c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)9u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_counter.METH_write(0u);
}

void MOD_mkTB2::RL_action_r_init_l110c17()
{
  INST_state_mkFSMstate.METH_write((tUInt8)10u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_1_repeat_count.METH_write(1u);
}

void MOD_mkTB2::RL_action_l110c29()
{
  tUInt8 DEF_NOT_dut_bbit_5_EQ_0b10101010_BIT_counter_6_BIT_ETC___d129;
  tUInt8 DEF__0b10101010_BIT_counter_6_BITS_2_TO_0_26___d127;
  tUInt8 DEF_counter_6_BITS_2_TO_0___d126;
  tUInt32 DEF_signed_counter_6___d124;
  DEF_x__h75742 = INST_counter.METH_read();
  DEF_signed_counter_6___d124 = DEF_x__h75742;
  DEF_b__h72727 = INST_mistakes.METH_read();
  DEF_dut_bbit__h77840 = INST_dut_bbit.METH_read();
  DEF_counter_6_BITS_2_TO_0___d126 = (tUInt8)((tUInt8)7u & DEF_x__h75742);
  DEF__0b10101010_BIT_counter_6_BITS_2_TO_0_26___d127 = primExtract8(1u,
								     8u,
								     (tUInt8)170u,
								     3u,
								     (tUInt8)(DEF_counter_6_BITS_2_TO_0___d126),
								     3u,
								     (tUInt8)(DEF_counter_6_BITS_2_TO_0___d126));
  DEF_NOT_dut_bbit_5_EQ_0b10101010_BIT_counter_6_BIT_ETC___d129 = !(DEF_dut_bbit__h77840 == DEF__0b10101010_BIT_counter_6_BITS_2_TO_0_26___d127);
  DEF_mistakes_7_PLUS_1___d68 = DEF_b__h72727 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)12u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h75582 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl,
		   this,
		   "s,-32,64",
		   &__str_literal_5,
		   DEF_signed_counter_6___d124,
		   DEF_v__h75582);
    if (DEF_NOT_dut_bbit_5_EQ_0b10101010_BIT_counter_6_BIT_ETC___d129)
      DEF_v__h75683 = dollar_time(sim_hdl);
    else
      DEF_v__h75683 = 12297829382473034410llu;
  }
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_bbit_5_EQ_0b10101010_BIT_counter_6_BIT_ETC___d129)
      dollar_display(sim_hdl,
		     this,
		     "s,-32,1,1,64",
		     &__str_literal_6,
		     DEF_signed_counter_6___d124,
		     DEF__0b10101010_BIT_counter_6_BITS_2_TO_0_26___d127,
		     DEF_dut_bbit__h77840,
		     DEF_v__h75683);
  if (DEF_NOT_dut_bbit_5_EQ_0b10101010_BIT_counter_6_BIT_ETC___d129)
    INST_mistakes.METH_write(DEF_mistakes_7_PLUS_1___d68);
}

void MOD_mkTB2::RL_action_f_update_l109c13()
{
  tUInt32 DEF_counter_6_PLUS_1___d132;
  DEF_x__h75742 = INST_counter.METH_read();
  DEF_counter_6_PLUS_1___d132 = DEF_x__h75742 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)14u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_counter.METH_write(DEF_counter_6_PLUS_1___d132);
}

void MOD_mkTB2::RL_action_r_init_l121c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)15u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_2_repeat_count.METH_write(1u);
}

void MOD_mkTB2::RL_action_l121c25()
{
  DEF_b__h72727 = INST_mistakes.METH_read();
  DEF_dut_bbit__h77840 = INST_dut_bbit.METH_read();
  DEF_NOT_dut_bbit_5___d66 = !DEF_dut_bbit__h77840;
  DEF_mistakes_7_PLUS_1___d68 = DEF_b__h72727 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)17u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_bbit_5___d66)
      dollar_display(sim_hdl, this, "s,1", &__str_literal_7, DEF_dut_bbit__h77840);
  if (DEF_NOT_dut_bbit_5___d66)
    INST_mistakes.METH_write(DEF_mistakes_7_PLUS_1___d68);
}

void MOD_mkTB2::RL_action_l129c13()
{
  tUInt32 DEF_signed_mistakes_7___d152;
  DEF_b__h72727 = INST_mistakes.METH_read();
  DEF_signed_mistakes_7___d152 = DEF_b__h72727;
  INST_state_mkFSMstate.METH_write((tUInt8)19u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_8, DEF_signed_mistakes_7___d152);
}

void MOD_mkTB2::RL_action_ovlp_r_update_l102c13()
{
  tUInt32 DEF_x__h78661;
  tUInt32 DEF_IF_jj_repeat_count_read__6_BIT_14_55_THEN_1_EL_ETC___d158;
  DEF_jj_repeat_count_read____d76 = INST_jj_repeat_count.METH_read();
  DEF_x__h78661 = 32767u & ((((tUInt32)(16383u & DEF_jj_repeat_count_read____d76)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_jj_repeat_count_read__6_BIT_14_55_THEN_1_EL_ETC___d158 = (tUInt8)(DEF_jj_repeat_count_read____d76 >> 14u) ? 1u : DEF_x__h78661;
  INST_state_overlap_pw.METH_wset();
  INST_jj_repeat_count.METH_write(DEF_IF_jj_repeat_count_read__6_BIT_14_55_THEN_1_EL_ETC___d158);
}

void MOD_mkTB2::RL_action_ovlp_r_update_l110c17()
{
  tUInt32 DEF_x__h78875;
  tUInt32 DEF_IF_jj_1_repeat_count_read__8_BIT_15_62_THEN_1__ETC___d165;
  DEF_jj_1_repeat_count_read____d98 = INST_jj_1_repeat_count.METH_read();
  DEF_x__h78875 = 65535u & ((((tUInt32)(32767u & DEF_jj_1_repeat_count_read____d98)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_jj_1_repeat_count_read__8_BIT_15_62_THEN_1__ETC___d165 = (tUInt8)(DEF_jj_1_repeat_count_read____d98 >> 15u) ? 1u : DEF_x__h78875;
  INST_state_overlap_pw.METH_wset();
  INST_jj_1_repeat_count.METH_write(DEF_IF_jj_1_repeat_count_read__8_BIT_15_62_THEN_1__ETC___d165);
}

void MOD_mkTB2::RL_action_ovlp_r_update_l121c13()
{
  tUInt32 DEF_x__h79088;
  tUInt32 DEF_IF_jj_2_repeat_count_read__34_BIT_15_70_THEN_1_ETC___d173;
  DEF_jj_2_repeat_count_read____d134 = INST_jj_2_repeat_count.METH_read();
  DEF_x__h79088 = 65535u & ((((tUInt32)(32767u & DEF_jj_2_repeat_count_read____d134)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_jj_2_repeat_count_read__34_BIT_15_70_THEN_1_ETC___d173 = (tUInt8)(DEF_jj_2_repeat_count_read____d134 >> 15u) ? 1u : DEF_x__h79088;
  INST_state_overlap_pw.METH_wset();
  INST_jj_2_repeat_count.METH_write(DEF_IF_jj_2_repeat_count_read__34_BIT_15_70_THEN_1_ETC___d173);
}

void MOD_mkTB2::RL_idle_l86c18()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTB2::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTB2::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTB2::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTB2::__me_check_10()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l87c13 && (((((((((((DEF_WILL_FIRE_RL_action_l88c13 || DEF_WILL_FIRE_RL_action_l95c16) || DEF_WILL_FIRE_RL_action_l96c13) || DEF_WILL_FIRE_RL_action_r_init_l102c13) || DEF_WILL_FIRE_RL_action_l102c25) || DEF_WILL_FIRE_RL_action_f_init_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l110c17) || DEF_WILL_FIRE_RL_action_l110c29) || DEF_WILL_FIRE_RL_action_f_update_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l121c13) || DEF_WILL_FIRE_RL_action_l121c25) || DEF_WILL_FIRE_RL_action_l129c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
}

void MOD_mkTB2::__me_check_11()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l88c13 && ((((((((((DEF_WILL_FIRE_RL_action_l95c16 || DEF_WILL_FIRE_RL_action_l96c13) || DEF_WILL_FIRE_RL_action_r_init_l102c13) || DEF_WILL_FIRE_RL_action_l102c25) || DEF_WILL_FIRE_RL_action_f_init_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l110c17) || DEF_WILL_FIRE_RL_action_l110c29) || DEF_WILL_FIRE_RL_action_f_update_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l121c13) || DEF_WILL_FIRE_RL_action_l121c25) || DEF_WILL_FIRE_RL_action_l129c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
}

void MOD_mkTB2::__me_check_12()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l95c16 && (((((((((DEF_WILL_FIRE_RL_action_l96c13 || DEF_WILL_FIRE_RL_action_r_init_l102c13) || DEF_WILL_FIRE_RL_action_l102c25) || DEF_WILL_FIRE_RL_action_f_init_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l110c17) || DEF_WILL_FIRE_RL_action_l110c29) || DEF_WILL_FIRE_RL_action_f_update_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l121c13) || DEF_WILL_FIRE_RL_action_l121c25) || DEF_WILL_FIRE_RL_action_l129c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
}

void MOD_mkTB2::__me_check_13()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l96c13 && ((((((((DEF_WILL_FIRE_RL_action_r_init_l102c13 || DEF_WILL_FIRE_RL_action_l102c25) || DEF_WILL_FIRE_RL_action_f_init_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l110c17) || DEF_WILL_FIRE_RL_action_l110c29) || DEF_WILL_FIRE_RL_action_f_update_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l121c13) || DEF_WILL_FIRE_RL_action_l121c25) || DEF_WILL_FIRE_RL_action_l129c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_12);
}

void MOD_mkTB2::__me_check_14()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_r_init_l102c13 && (((((((DEF_WILL_FIRE_RL_action_l102c25 || DEF_WILL_FIRE_RL_action_f_init_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l110c17) || DEF_WILL_FIRE_RL_action_l110c29) || DEF_WILL_FIRE_RL_action_f_update_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l121c13) || DEF_WILL_FIRE_RL_action_l121c25) || DEF_WILL_FIRE_RL_action_l129c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_13);
}

void MOD_mkTB2::__me_check_15()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l102c25 && ((((((DEF_WILL_FIRE_RL_action_f_init_l109c13 || DEF_WILL_FIRE_RL_action_r_init_l110c17) || DEF_WILL_FIRE_RL_action_l110c29) || DEF_WILL_FIRE_RL_action_f_update_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l121c13) || DEF_WILL_FIRE_RL_action_l121c25) || DEF_WILL_FIRE_RL_action_l129c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_14);
}

void MOD_mkTB2::__me_check_16()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_init_l109c13 && (((((DEF_WILL_FIRE_RL_action_r_init_l110c17 || DEF_WILL_FIRE_RL_action_l110c29) || DEF_WILL_FIRE_RL_action_f_update_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l121c13) || DEF_WILL_FIRE_RL_action_l121c25) || DEF_WILL_FIRE_RL_action_l129c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_15);
}

void MOD_mkTB2::__me_check_17()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_r_init_l110c17 && ((((DEF_WILL_FIRE_RL_action_l110c29 || DEF_WILL_FIRE_RL_action_f_update_l109c13) || DEF_WILL_FIRE_RL_action_r_init_l121c13) || DEF_WILL_FIRE_RL_action_l121c25) || DEF_WILL_FIRE_RL_action_l129c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_16);
}

void MOD_mkTB2::__me_check_18()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l110c29 && (((DEF_WILL_FIRE_RL_action_f_update_l109c13 || DEF_WILL_FIRE_RL_action_r_init_l121c13) || DEF_WILL_FIRE_RL_action_l121c25) || DEF_WILL_FIRE_RL_action_l129c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_17);
}

void MOD_mkTB2::__me_check_19()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_update_l109c13 && ((DEF_WILL_FIRE_RL_action_r_init_l121c13 || DEF_WILL_FIRE_RL_action_l121c25) || DEF_WILL_FIRE_RL_action_l129c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_18);
}

void MOD_mkTB2::__me_check_20()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_r_init_l121c13 && (DEF_WILL_FIRE_RL_action_l121c25 || DEF_WILL_FIRE_RL_action_l129c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_19);
}

void MOD_mkTB2::__me_check_21()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l121c25 && DEF_WILL_FIRE_RL_action_l129c13)
      dollar_error(sim_hdl, this, "s", &__str_literal_20);
}


/* Methods */


/* Reset routines */

void MOD_mkTB2::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_mistakes.reset_RST(ARG_rst_in);
  INST_jj_repeat_count.reset_RST(ARG_rst_in);
  INST_jj_2_repeat_count.reset_RST(ARG_rst_in);
  INST_jj_1_repeat_count.reset_RST(ARG_rst_in);
  INST_dut_state.reset_RST(ARG_rst_in);
  INST_dut_fifo.reset_RST(ARG_rst_in);
  INST_dut_count.reset_RST(ARG_rst_in);
  INST_dut_c.reset_RST(ARG_rst_in);
  INST_dut_bbit.reset_RST(ARG_rst_in);
  INST_counter.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTB2::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTB2::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_counter.dump_state(indent + 2u);
  INST_dut_bbit.dump_state(indent + 2u);
  INST_dut_c.dump_state(indent + 2u);
  INST_dut_count.dump_state(indent + 2u);
  INST_dut_datafifo.dump_state(indent + 2u);
  INST_dut_fifo.dump_state(indent + 2u);
  INST_dut_state.dump_state(indent + 2u);
  INST_jj_1_repeat_count.dump_state(indent + 2u);
  INST_jj_2_repeat_count.dump_state(indent + 2u);
  INST_jj_repeat_count.dump_state(indent + 2u);
  INST_mistakes.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTB2::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 49u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_dut_bbit_5___d66", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_init_l109c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_update_l109c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l102c25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l110c29", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l121c25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l129c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l87c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l88c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l95c16", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l96c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l102c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l110c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l121c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h322", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h72727", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_bbit__h77840", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_1_repeat_count_read____d98", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_2_repeat_count_read____d134", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_repeat_count_read____d76", 15u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mistakes_7_PLUS_1___d68", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "state_can_overlap__h7145", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h75582", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h75683", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h75742", 32u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_counter.dump_VCD_defs(num);
  num = INST_dut_bbit.dump_VCD_defs(num);
  num = INST_dut_c.dump_VCD_defs(num);
  num = INST_dut_count.dump_VCD_defs(num);
  num = INST_dut_datafifo.dump_VCD_defs(num);
  num = INST_dut_fifo.dump_VCD_defs(num);
  num = INST_dut_state.dump_VCD_defs(num);
  num = INST_jj_1_repeat_count.dump_VCD_defs(num);
  num = INST_jj_2_repeat_count.dump_VCD_defs(num);
  num = INST_jj_repeat_count.dump_VCD_defs(num);
  num = INST_mistakes.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTB2::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTB2 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTB2::vcd_defs(tVCDDumpType dt, MOD_mkTB2 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 15u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_NOT_dut_bbit_5___d66) != DEF_NOT_dut_bbit_5___d66)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_dut_bbit_5___d66, 1u);
	backing.DEF_NOT_dut_bbit_5___d66 = DEF_NOT_dut_bbit_5___d66;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_init_l109c13) != DEF_WILL_FIRE_RL_action_f_init_l109c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_init_l109c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_init_l109c13 = DEF_WILL_FIRE_RL_action_f_init_l109c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_update_l109c13) != DEF_WILL_FIRE_RL_action_f_update_l109c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_update_l109c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_update_l109c13 = DEF_WILL_FIRE_RL_action_f_update_l109c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l102c25) != DEF_WILL_FIRE_RL_action_l102c25)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l102c25, 1u);
	backing.DEF_WILL_FIRE_RL_action_l102c25 = DEF_WILL_FIRE_RL_action_l102c25;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l110c29) != DEF_WILL_FIRE_RL_action_l110c29)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l110c29, 1u);
	backing.DEF_WILL_FIRE_RL_action_l110c29 = DEF_WILL_FIRE_RL_action_l110c29;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l121c25) != DEF_WILL_FIRE_RL_action_l121c25)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l121c25, 1u);
	backing.DEF_WILL_FIRE_RL_action_l121c25 = DEF_WILL_FIRE_RL_action_l121c25;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l129c13) != DEF_WILL_FIRE_RL_action_l129c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l129c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l129c13 = DEF_WILL_FIRE_RL_action_l129c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l87c13) != DEF_WILL_FIRE_RL_action_l87c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l87c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l87c13 = DEF_WILL_FIRE_RL_action_l87c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l88c13) != DEF_WILL_FIRE_RL_action_l88c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l88c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l88c13 = DEF_WILL_FIRE_RL_action_l88c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l95c16) != DEF_WILL_FIRE_RL_action_l95c16)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l95c16, 1u);
	backing.DEF_WILL_FIRE_RL_action_l95c16 = DEF_WILL_FIRE_RL_action_l95c16;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l96c13) != DEF_WILL_FIRE_RL_action_l96c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l96c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l96c13 = DEF_WILL_FIRE_RL_action_l96c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l102c13) != DEF_WILL_FIRE_RL_action_r_init_l102c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l102c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l102c13 = DEF_WILL_FIRE_RL_action_r_init_l102c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l110c17) != DEF_WILL_FIRE_RL_action_r_init_l110c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l110c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l110c17 = DEF_WILL_FIRE_RL_action_r_init_l110c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l121c13) != DEF_WILL_FIRE_RL_action_r_init_l121c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l121c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l121c13 = DEF_WILL_FIRE_RL_action_r_init_l121c13;
      }
      ++num;
      if ((backing.DEF_b__h322) != DEF_b__h322)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h322, 32u);
	backing.DEF_b__h322 = DEF_b__h322;
      }
      ++num;
      if ((backing.DEF_b__h72727) != DEF_b__h72727)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h72727, 32u);
	backing.DEF_b__h72727 = DEF_b__h72727;
      }
      ++num;
      if ((backing.DEF_dut_bbit__h77840) != DEF_dut_bbit__h77840)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_bbit__h77840, 1u);
	backing.DEF_dut_bbit__h77840 = DEF_dut_bbit__h77840;
      }
      ++num;
      if ((backing.DEF_jj_1_repeat_count_read____d98) != DEF_jj_1_repeat_count_read____d98)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_1_repeat_count_read____d98, 16u);
	backing.DEF_jj_1_repeat_count_read____d98 = DEF_jj_1_repeat_count_read____d98;
      }
      ++num;
      if ((backing.DEF_jj_2_repeat_count_read____d134) != DEF_jj_2_repeat_count_read____d134)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_2_repeat_count_read____d134, 16u);
	backing.DEF_jj_2_repeat_count_read____d134 = DEF_jj_2_repeat_count_read____d134;
      }
      ++num;
      if ((backing.DEF_jj_repeat_count_read____d76) != DEF_jj_repeat_count_read____d76)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_repeat_count_read____d76, 15u);
	backing.DEF_jj_repeat_count_read____d76 = DEF_jj_repeat_count_read____d76;
      }
      ++num;
      if ((backing.DEF_mistakes_7_PLUS_1___d68) != DEF_mistakes_7_PLUS_1___d68)
      {
	vcd_write_val(sim_hdl, num, DEF_mistakes_7_PLUS_1___d68, 32u);
	backing.DEF_mistakes_7_PLUS_1___d68 = DEF_mistakes_7_PLUS_1___d68;
      }
      ++num;
      if ((backing.DEF_state_can_overlap__h7145) != DEF_state_can_overlap__h7145)
      {
	vcd_write_val(sim_hdl, num, DEF_state_can_overlap__h7145, 1u);
	backing.DEF_state_can_overlap__h7145 = DEF_state_can_overlap__h7145;
      }
      ++num;
      if ((backing.DEF_v__h75582) != DEF_v__h75582)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h75582, 64u);
	backing.DEF_v__h75582 = DEF_v__h75582;
      }
      ++num;
      if ((backing.DEF_v__h75683) != DEF_v__h75683)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h75683, 64u);
	backing.DEF_v__h75683 = DEF_v__h75683;
      }
      ++num;
      if ((backing.DEF_x__h75742) != DEF_x__h75742)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h75742, 32u);
	backing.DEF_x__h75742 = DEF_x__h75742;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_NOT_dut_bbit_5___d66, 1u);
      backing.DEF_NOT_dut_bbit_5___d66 = DEF_NOT_dut_bbit_5___d66;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_init_l109c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_init_l109c13 = DEF_WILL_FIRE_RL_action_f_init_l109c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_update_l109c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_update_l109c13 = DEF_WILL_FIRE_RL_action_f_update_l109c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l102c25, 1u);
      backing.DEF_WILL_FIRE_RL_action_l102c25 = DEF_WILL_FIRE_RL_action_l102c25;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l110c29, 1u);
      backing.DEF_WILL_FIRE_RL_action_l110c29 = DEF_WILL_FIRE_RL_action_l110c29;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l121c25, 1u);
      backing.DEF_WILL_FIRE_RL_action_l121c25 = DEF_WILL_FIRE_RL_action_l121c25;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l129c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l129c13 = DEF_WILL_FIRE_RL_action_l129c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l87c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l87c13 = DEF_WILL_FIRE_RL_action_l87c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l88c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l88c13 = DEF_WILL_FIRE_RL_action_l88c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l95c16, 1u);
      backing.DEF_WILL_FIRE_RL_action_l95c16 = DEF_WILL_FIRE_RL_action_l95c16;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l96c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l96c13 = DEF_WILL_FIRE_RL_action_l96c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l102c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l102c13 = DEF_WILL_FIRE_RL_action_r_init_l102c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l110c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l110c17 = DEF_WILL_FIRE_RL_action_r_init_l110c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l121c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l121c13 = DEF_WILL_FIRE_RL_action_r_init_l121c13;
      vcd_write_val(sim_hdl, num++, DEF_b__h322, 32u);
      backing.DEF_b__h322 = DEF_b__h322;
      vcd_write_val(sim_hdl, num++, DEF_b__h72727, 32u);
      backing.DEF_b__h72727 = DEF_b__h72727;
      vcd_write_val(sim_hdl, num++, DEF_dut_bbit__h77840, 1u);
      backing.DEF_dut_bbit__h77840 = DEF_dut_bbit__h77840;
      vcd_write_val(sim_hdl, num++, DEF_jj_1_repeat_count_read____d98, 16u);
      backing.DEF_jj_1_repeat_count_read____d98 = DEF_jj_1_repeat_count_read____d98;
      vcd_write_val(sim_hdl, num++, DEF_jj_2_repeat_count_read____d134, 16u);
      backing.DEF_jj_2_repeat_count_read____d134 = DEF_jj_2_repeat_count_read____d134;
      vcd_write_val(sim_hdl, num++, DEF_jj_repeat_count_read____d76, 15u);
      backing.DEF_jj_repeat_count_read____d76 = DEF_jj_repeat_count_read____d76;
      vcd_write_val(sim_hdl, num++, DEF_mistakes_7_PLUS_1___d68, 32u);
      backing.DEF_mistakes_7_PLUS_1___d68 = DEF_mistakes_7_PLUS_1___d68;
      vcd_write_val(sim_hdl, num++, DEF_state_can_overlap__h7145, 1u);
      backing.DEF_state_can_overlap__h7145 = DEF_state_can_overlap__h7145;
      vcd_write_val(sim_hdl, num++, DEF_v__h75582, 64u);
      backing.DEF_v__h75582 = DEF_v__h75582;
      vcd_write_val(sim_hdl, num++, DEF_v__h75683, 64u);
      backing.DEF_v__h75683 = DEF_v__h75683;
      vcd_write_val(sim_hdl, num++, DEF_x__h75742, 32u);
      backing.DEF_x__h75742 = DEF_x__h75742;
    }
}

void MOD_mkTB2::vcd_prims(tVCDDumpType dt, MOD_mkTB2 &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_counter.dump_VCD(dt, backing.INST_counter);
  INST_dut_bbit.dump_VCD(dt, backing.INST_dut_bbit);
  INST_dut_c.dump_VCD(dt, backing.INST_dut_c);
  INST_dut_count.dump_VCD(dt, backing.INST_dut_count);
  INST_dut_datafifo.dump_VCD(dt, backing.INST_dut_datafifo);
  INST_dut_fifo.dump_VCD(dt, backing.INST_dut_fifo);
  INST_dut_state.dump_VCD(dt, backing.INST_dut_state);
  INST_jj_1_repeat_count.dump_VCD(dt, backing.INST_jj_1_repeat_count);
  INST_jj_2_repeat_count.dump_VCD(dt, backing.INST_jj_2_repeat_count);
  INST_jj_repeat_count.dump_VCD(dt, backing.INST_jj_repeat_count);
  INST_mistakes.dump_VCD(dt, backing.INST_mistakes);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}
