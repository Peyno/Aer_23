/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Mon Feb 12 13:23:00 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkAufgabe5TB.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkAufgabe5TB::MODEL_mkAufgabe5TB()
{
  mkAufgabe5TB_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkAufgabe5TB()
{
  MODEL_mkAufgabe5TB *model = new MODEL_mkAufgabe5TB();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkAufgabe5TB &INST_top = *((MOD_mkAufgabe5TB *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_dut_ticks_EQ_0___d2;
	 tUInt8 DEF_INST_top_DEF_dut_fifo_i_notEmpty____d11;
	 tUInt8 DEF_INST_top_DEF_x__h714;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_dut_ticrule;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_dut_ticrule;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_dut_idle;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_dut_idle;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_dut_start;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_dut_start;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_dut_transfer;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_dut_transfer;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_dut_ende;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_dut_ende;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_counter;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_counter;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_stop;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_stop;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_r1;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_r1;
	 INST_top.DEF_b__h308 = INST_top.INST_dut_ticks.METH_read();
	 DEF_INST_top_DEF_x__h714 = INST_top.INST_dut_state.METH_read();
	 DEF_INST_top_DEF_dut_fifo_i_notEmpty____d11 = INST_top.INST_dut_fifo.METH_i_notEmpty();
	 DEF_INST_top_DEF_dut_ticks_EQ_0___d2 = (INST_top.DEF_b__h308) == 0u;
	 DEF_INST_top_DEF_CAN_FIRE_RL_dut_ende = DEF_INST_top_DEF_dut_fifo_i_notEmpty____d11 && (DEF_INST_top_DEF_x__h714 == (tUInt8)3u && DEF_INST_top_DEF_dut_ticks_EQ_0___d2);
	 DEF_INST_top_DEF_WILL_FIRE_RL_dut_ende = DEF_INST_top_DEF_CAN_FIRE_RL_dut_ende;
	 DEF_INST_top_DEF_CAN_FIRE_RL_dut_idle = DEF_INST_top_DEF_x__h714 == (tUInt8)0u && DEF_INST_top_DEF_dut_ticks_EQ_0___d2;
	 DEF_INST_top_DEF_WILL_FIRE_RL_dut_idle = DEF_INST_top_DEF_CAN_FIRE_RL_dut_idle;
	 DEF_INST_top_DEF_CAN_FIRE_RL_dut_start = DEF_INST_top_DEF_x__h714 == (tUInt8)1u && DEF_INST_top_DEF_dut_ticks_EQ_0___d2;
	 DEF_INST_top_DEF_WILL_FIRE_RL_dut_start = DEF_INST_top_DEF_CAN_FIRE_RL_dut_start;
	 DEF_INST_top_DEF_CAN_FIRE_RL_dut_ticrule = !DEF_INST_top_DEF_dut_ticks_EQ_0___d2;
	 DEF_INST_top_DEF_WILL_FIRE_RL_dut_ticrule = DEF_INST_top_DEF_CAN_FIRE_RL_dut_ticrule;
	 INST_top.DEF_b__h1047 = INST_top.INST_cinter.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_r1 = (INST_top.DEF_b__h1047) == 16u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_r1 = DEF_INST_top_DEF_CAN_FIRE_RL_r1;
	 DEF_INST_top_DEF_CAN_FIRE_RL_counter = INST_top.INST_dut_fifo.METH_i_notFull();
	 DEF_INST_top_DEF_WILL_FIRE_RL_counter = DEF_INST_top_DEF_CAN_FIRE_RL_counter && !DEF_INST_top_DEF_WILL_FIRE_RL_r1;
	 DEF_INST_top_DEF_CAN_FIRE_RL_dut_transfer = DEF_INST_top_DEF_dut_fifo_i_notEmpty____d11 && (DEF_INST_top_DEF_x__h714 == (tUInt8)2u && DEF_INST_top_DEF_dut_ticks_EQ_0___d2);
	 DEF_INST_top_DEF_WILL_FIRE_RL_dut_transfer = DEF_INST_top_DEF_CAN_FIRE_RL_dut_transfer;
	 INST_top.DEF_b__h1012 = INST_top.INST_count.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_stop = (INST_top.DEF_b__h1012) == 600u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_stop = DEF_INST_top_DEF_CAN_FIRE_RL_stop;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_dut_ticrule)
	   INST_top.RL_dut_ticrule();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_stop)
	   INST_top.RL_stop();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_r1)
	   INST_top.RL_r1();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_dut_ende)
	   INST_top.RL_dut_ende();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_dut_idle)
	   INST_top.RL_dut_idle();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_counter)
	   INST_top.RL_counter();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_dut_start)
	   INST_top.RL_dut_start();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_dut_transfer)
	   INST_top.RL_dut_transfer();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_dut_ctr.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_dut_fifo.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_dut_state.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_dut_ticks.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_count.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_state.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_cinter.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkAufgabe5TB::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkAufgabe5TB_instance = new MOD_mkAufgabe5TB(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkAufgabe5TB_instance->INST_dut_fifo.set_clk_0)("CLK");
  (mkAufgabe5TB_instance->set_clk_0)("CLK");
}
void MODEL_mkAufgabe5TB::destroy_model()
{
  delete mkAufgabe5TB_instance;
  mkAufgabe5TB_instance = NULL;
}
void MODEL_mkAufgabe5TB::reset_model(bool asserted)
{
  (mkAufgabe5TB_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkAufgabe5TB::get_instance()
{
  return mkAufgabe5TB_instance;
}

/* Fill in version numbers */
void MODEL_mkAufgabe5TB::get_version(char const **name, char const **build)
{
  *name = "2023.07";
  *build = "0eb551dc";
}

/* Get the model creation time */
time_t MODEL_mkAufgabe5TB::get_creation_time()
{
  
  /* Mon Feb 12 12:23:00 UTC 2024 */
  return 1707740580llu;
}

/* State dumping function */
void MODEL_mkAufgabe5TB::dump_state()
{
  (mkAufgabe5TB_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkAufgabe5TB & mkAufgabe5TB_backing(tSimStateHdl simHdl)
{
  static MOD_mkAufgabe5TB *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkAufgabe5TB(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkAufgabe5TB::dump_VCD_defs()
{
  (mkAufgabe5TB_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkAufgabe5TB::dump_VCD(tVCDDumpType dt)
{
  (mkAufgabe5TB_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkAufgabe5TB_backing(sim_hdl));
}
