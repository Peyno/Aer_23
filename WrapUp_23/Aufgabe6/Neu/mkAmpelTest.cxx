/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Sat Feb 24 17:31:03 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkAmpelTest.h"


/* String declarations */
static std::string const __str_literal_8("Error: \"Tb.bsv\", line 127, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l127c18] and\n  [RL_action_l129c26] ) fired in the same clock cycle.\n",
					 170u);
static std::string const __str_literal_2("Error: \"Tb.bsv\", line 26, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_fsm_action_l26c9] and\n  [RL_ampel_fsm_action_l30c9, RL_ampel_fsm_action_l35c33,\n  RL_ampel_fsm_action_l64c9, RL_ampel_fsm_action_l70c9,\n  RL_ampel_fsm_action_l75c9, RL_ampel_fsm_action_l79c32] ) fired in the same\n  clock cycle.\n",
					 327u);
static std::string const __str_literal_3("Error: \"Tb.bsv\", line 30, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_fsm_action_l30c9] and\n  [RL_ampel_fsm_action_l35c33, RL_ampel_fsm_action_l64c9,\n  RL_ampel_fsm_action_l70c9, RL_ampel_fsm_action_l75c9,\n  RL_ampel_fsm_action_l79c32] ) fired in the same clock cycle.\n",
					 298u);
static std::string const __str_literal_4("Error: \"Tb.bsv\", line 35, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_fsm_action_l35c33] and\n  [RL_ampel_fsm_action_l64c9, RL_ampel_fsm_action_l70c9,\n  RL_ampel_fsm_action_l75c9, RL_ampel_fsm_action_l79c32] ) fired in the same\n  clock cycle.\n",
					 272u);
static std::string const __str_literal_5("Error: \"Tb.bsv\", line 64, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_fsm_action_l64c9] and\n  [RL_ampel_fsm_action_l70c9, RL_ampel_fsm_action_l75c9,\n  RL_ampel_fsm_action_l79c32] ) fired in the same clock cycle.\n",
					 241u);
static std::string const __str_literal_6("Error: \"Tb.bsv\", line 70, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_fsm_action_l70c9] and\n  [RL_ampel_fsm_action_l75c9, RL_ampel_fsm_action_l79c32] ) fired in the same\n  clock cycle.\n",
					 214u);
static std::string const __str_literal_7("Error: \"Tb.bsv\", line 75, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ampel_fsm_action_l75c9] and\n  [RL_ampel_fsm_action_l79c32] ) fired in the same clock cycle.\n",
					 185u);
static std::string const __str_literal_1("time: %d ampel: %d, pedestrian: %d", 34u);


/* Constructor */
MOD_mkAmpelTest::MOD_mkAmpelTest(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_ampel_fsm_abort(simHdl, "ampel_fsm_abort", this, 1u, (tUInt8)0u),
    INST_ampel_fsm_start_reg(simHdl, "ampel_fsm_start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ampel_fsm_start_reg_1(simHdl, "ampel_fsm_start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ampel_fsm_start_reg_2(simHdl, "ampel_fsm_start_reg_2", this, 1u, (tUInt8)0u),
    INST_ampel_fsm_start_wire(simHdl, "ampel_fsm_start_wire", this, 1u, (tUInt8)0u),
    INST_ampel_fsm_state_can_overlap(simHdl,
				     "ampel_fsm_state_can_overlap",
				     this,
				     1u,
				     (tUInt8)1u,
				     (tUInt8)0u),
    INST_ampel_fsm_state_fired(simHdl, "ampel_fsm_state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ampel_fsm_state_fired_1(simHdl, "ampel_fsm_state_fired_1", this, 1u, (tUInt8)0u),
    INST_ampel_fsm_state_mkFSMstate(simHdl,
				    "ampel_fsm_state_mkFSMstate",
				    this,
				    4u,
				    (tUInt8)0u,
				    (tUInt8)0u),
    INST_ampel_fsm_state_overlap_pw(simHdl, "ampel_fsm_state_overlap_pw", this, 0u),
    INST_ampel_fsm_state_set_pw(simHdl, "ampel_fsm_state_set_pw", this, 0u),
    INST_ampel_idle_counter(simHdl, "ampel_idle_counter", this, 8u),
    INST_ampel_pedestrian_request(simHdl, "ampel_pedestrian_request", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ampel_pedestrian_state(simHdl, "ampel_pedestrian_state", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ampel_state(simHdl, "ampel_state", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_counter(simHdl, "counter", this, 32u, 0u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h33538(12297829382473034410llu)
{
  symbol_count = 71u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkAmpelTest::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_10", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_21", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[7u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[8u], "ampel_fsm_abort", SYM_MODULE, &INST_ampel_fsm_abort);
  init_symbol(&symbols[9u], "ampel_fsm_start_reg", SYM_MODULE, &INST_ampel_fsm_start_reg);
  init_symbol(&symbols[10u], "ampel_fsm_start_reg_1", SYM_MODULE, &INST_ampel_fsm_start_reg_1);
  init_symbol(&symbols[11u], "ampel_fsm_start_reg_2", SYM_MODULE, &INST_ampel_fsm_start_reg_2);
  init_symbol(&symbols[12u], "ampel_fsm_start_wire", SYM_MODULE, &INST_ampel_fsm_start_wire);
  init_symbol(&symbols[13u],
	      "ampel_fsm_state_can_overlap",
	      SYM_MODULE,
	      &INST_ampel_fsm_state_can_overlap);
  init_symbol(&symbols[14u], "ampel_fsm_state_fired", SYM_MODULE, &INST_ampel_fsm_state_fired);
  init_symbol(&symbols[15u], "ampel_fsm_state_fired_1", SYM_MODULE, &INST_ampel_fsm_state_fired_1);
  init_symbol(&symbols[16u],
	      "ampel_fsm_state_mkFSMstate",
	      SYM_MODULE,
	      &INST_ampel_fsm_state_mkFSMstate);
  init_symbol(&symbols[17u],
	      "ampel_fsm_state_overlap_pw",
	      SYM_MODULE,
	      &INST_ampel_fsm_state_overlap_pw);
  init_symbol(&symbols[18u], "ampel_fsm_state_set_pw", SYM_MODULE, &INST_ampel_fsm_state_set_pw);
  init_symbol(&symbols[19u], "ampel_idle_counter", SYM_MODULE, &INST_ampel_idle_counter);
  init_symbol(&symbols[20u], "ampel_pedestrian_request", SYM_MODULE, &INST_ampel_pedestrian_request);
  init_symbol(&symbols[21u], "ampel_pedestrian_state", SYM_MODULE, &INST_ampel_pedestrian_state);
  init_symbol(&symbols[22u], "ampel_state", SYM_MODULE, &INST_ampel_state);
  init_symbol(&symbols[23u], "b__h8525", SYM_DEF, &DEF_b__h8525, 8u);
  init_symbol(&symbols[24u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[25u], "RL_action_l127c18", SYM_RULE);
  init_symbol(&symbols[26u], "RL_action_l129c26", SYM_RULE);
  init_symbol(&symbols[27u], "RL_ampel_fsm_action_l26c9", SYM_RULE);
  init_symbol(&symbols[28u], "RL_ampel_fsm_action_l30c9", SYM_RULE);
  init_symbol(&symbols[29u], "RL_ampel_fsm_action_l35c33", SYM_RULE);
  init_symbol(&symbols[30u], "RL_ampel_fsm_action_l64c9", SYM_RULE);
  init_symbol(&symbols[31u], "RL_ampel_fsm_action_l70c9", SYM_RULE);
  init_symbol(&symbols[32u], "RL_ampel_fsm_action_l75c9", SYM_RULE);
  init_symbol(&symbols[33u], "RL_ampel_fsm_action_l79c32", SYM_RULE);
  init_symbol(&symbols[34u], "RL_ampel_fsm_fsm_start", SYM_RULE);
  init_symbol(&symbols[35u], "RL_ampel_fsm_idle_l24c14", SYM_RULE);
  init_symbol(&symbols[36u], "RL_ampel_fsm_idle_l24c14_1", SYM_RULE);
  init_symbol(&symbols[37u], "RL_ampel_fsm_restart", SYM_RULE);
  init_symbol(&symbols[38u], "RL_ampel_fsm_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[39u], "RL_ampel_fsm_state_every", SYM_RULE);
  init_symbol(&symbols[40u], "RL_ampel_fsm_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[41u], "RL_ampel_fsm_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[42u], "RL_ampel_start", SYM_RULE);
  init_symbol(&symbols[43u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[44u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[45u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[46u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[47u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[48u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[49u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[50u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[51u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[52u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[53u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[54u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[55u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[56u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[57u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[58u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[59u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[60u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[61u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[62u],
	      "WILL_FIRE_RL_action_l127c18",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l127c18,
	      1u);
  init_symbol(&symbols[63u],
	      "WILL_FIRE_RL_action_l129c26",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l129c26,
	      1u);
  init_symbol(&symbols[64u],
	      "WILL_FIRE_RL_ampel_fsm_action_l26c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_fsm_action_l26c9,
	      1u);
  init_symbol(&symbols[65u],
	      "WILL_FIRE_RL_ampel_fsm_action_l30c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_fsm_action_l30c9,
	      1u);
  init_symbol(&symbols[66u],
	      "WILL_FIRE_RL_ampel_fsm_action_l35c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_fsm_action_l35c33,
	      1u);
  init_symbol(&symbols[67u],
	      "WILL_FIRE_RL_ampel_fsm_action_l64c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9,
	      1u);
  init_symbol(&symbols[68u],
	      "WILL_FIRE_RL_ampel_fsm_action_l70c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9,
	      1u);
  init_symbol(&symbols[69u],
	      "WILL_FIRE_RL_ampel_fsm_action_l75c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9,
	      1u);
  init_symbol(&symbols[70u],
	      "WILL_FIRE_RL_ampel_fsm_action_l79c32",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32,
	      1u);
}


/* Rule actions */

void MOD_mkAmpelTest::RL_ampel_fsm_start_reg__dreg_update()
{
  tUInt8 DEF_ampel_fsm_start_reg_2_whas_AND_ampel_fsm_start_ETC___d3;
  DEF_ampel_fsm_start_reg_2_whas_AND_ampel_fsm_start_ETC___d3 = INST_ampel_fsm_start_reg_2.METH_whas() && INST_ampel_fsm_start_reg_2.METH_wget();
  INST_ampel_fsm_start_reg_1.METH_write(DEF_ampel_fsm_start_reg_2_whas_AND_ampel_fsm_start_ETC___d3);
}

void MOD_mkAmpelTest::RL_ampel_fsm_state_handle_abort()
{
  INST_ampel_fsm_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkAmpelTest::RL_ampel_fsm_state_fired__dreg_update()
{
  tUInt8 DEF_ampel_fsm_state_fired_1_whas__3_AND_ampel_fsm__ETC___d15;
  DEF_ampel_fsm_state_fired_1_whas__3_AND_ampel_fsm__ETC___d15 = INST_ampel_fsm_state_fired_1.METH_whas() && INST_ampel_fsm_state_fired_1.METH_wget();
  INST_ampel_fsm_state_fired.METH_write(DEF_ampel_fsm_state_fired_1_whas__3_AND_ampel_fsm__ETC___d15);
}

void MOD_mkAmpelTest::RL_ampel_fsm_state_every()
{
  tUInt8 DEF_ampel_fsm_state_set_pw_whas__6_OR_NOT_ampel_fs_ETC___d21;
  tUInt8 DEF_ampel_fsm_state_can_overlap__h3443;
  DEF_ampel_fsm_state_can_overlap__h3443 = INST_ampel_fsm_state_can_overlap.METH_read();
  DEF_ampel_fsm_state_set_pw_whas__6_OR_NOT_ampel_fs_ETC___d21 = INST_ampel_fsm_state_set_pw.METH_whas() || (!INST_ampel_fsm_state_overlap_pw.METH_whas() && DEF_ampel_fsm_state_can_overlap__h3443);
  INST_ampel_fsm_state_can_overlap.METH_write(DEF_ampel_fsm_state_set_pw_whas__6_OR_NOT_ampel_fs_ETC___d21);
}

void MOD_mkAmpelTest::RL_ampel_fsm_restart()
{
  INST_ampel_fsm_start_wire.METH_wset((tUInt8)1u);
  INST_ampel_fsm_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkAmpelTest::RL_ampel_fsm_action_l26c9()
{
  INST_ampel_fsm_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_ampel_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_fsm_state_set_pw.METH_wset();
  INST_ampel_state.METH_port0__write((tUInt8)1u);
}

void MOD_mkAmpelTest::RL_ampel_fsm_action_l30c9()
{
  INST_ampel_fsm_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_ampel_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_fsm_state_set_pw.METH_wset();
  INST_ampel_state.METH_port0__write((tUInt8)3u);
  INST_ampel_idle_counter.METH_write((tUInt8)15u);
}

void MOD_mkAmpelTest::RL_ampel_fsm_action_l35c33()
{
  tUInt8 DEF_IF_ampel_pedestrian_request_port1__read__6_AND_ETC___d61;
  DEF_b__h8525 = INST_ampel_idle_counter.METH_read();
  DEF_IF_ampel_pedestrian_request_port1__read__6_AND_ETC___d61 = INST_ampel_pedestrian_request.METH_port1__read() && !(DEF_b__h8525 <= (tUInt8)5u) ? (tUInt8)5u : (tUInt8)255u & (DEF_b__h8525 - (tUInt8)1u);
  INST_ampel_fsm_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_ampel_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_fsm_state_set_pw.METH_wset();
  INST_ampel_state.METH_port0__write((tUInt8)3u);
  INST_ampel_pedestrian_state.METH_port0__write((tUInt8)0u);
  INST_ampel_idle_counter.METH_write(DEF_IF_ampel_pedestrian_request_port1__read__6_AND_ETC___d61);
}

void MOD_mkAmpelTest::RL_ampel_fsm_action_l64c9()
{
  INST_ampel_fsm_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_ampel_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_fsm_state_set_pw.METH_wset();
  INST_ampel_state.METH_port0__write((tUInt8)2u);
  INST_ampel_pedestrian_state.METH_port0__write((tUInt8)0u);
}

void MOD_mkAmpelTest::RL_ampel_fsm_action_l70c9()
{
  INST_ampel_fsm_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_ampel_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_fsm_state_set_pw.METH_wset();
  INST_ampel_state.METH_port0__write((tUInt8)0u);
}

void MOD_mkAmpelTest::RL_ampel_fsm_action_l75c9()
{
  INST_ampel_fsm_state_mkFSMstate.METH_write((tUInt8)6u);
  INST_ampel_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_fsm_state_set_pw.METH_wset();
  INST_ampel_pedestrian_state.METH_port0__write((tUInt8)1u);
  INST_ampel_idle_counter.METH_write((tUInt8)10u);
}

void MOD_mkAmpelTest::RL_ampel_fsm_action_l79c32()
{
  INST_ampel_fsm_state_mkFSMstate.METH_write((tUInt8)7u);
  INST_ampel_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_fsm_state_set_pw.METH_wset();
  INST_ampel_state.METH_port0__write((tUInt8)0u);
  INST_ampel_pedestrian_state.METH_port0__write((tUInt8)1u);
}

void MOD_mkAmpelTest::RL_ampel_fsm_idle_l24c14()
{
  INST_ampel_fsm_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_ampel_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_fsm_state_set_pw.METH_wset();
}

void MOD_mkAmpelTest::RL_ampel_fsm_idle_l24c14_1()
{
  INST_ampel_fsm_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_ampel_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_ampel_fsm_state_set_pw.METH_wset();
}

void MOD_mkAmpelTest::RL_ampel_fsm_fsm_start()
{
  INST_ampel_fsm_start_wire.METH_wset((tUInt8)1u);
  INST_ampel_fsm_start_reg_2.METH_wset((tUInt8)1u);
  INST_ampel_fsm_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkAmpelTest::RL_ampel_start()
{
  INST_ampel_fsm_start_reg.METH_write((tUInt8)1u);
}

void MOD_mkAmpelTest::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas__4_AND_start_reg_2_wget__5___d86;
  DEF_start_reg_2_whas__4_AND_start_reg_2_wget__5___d86 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas__4_AND_start_reg_2_wget__5___d86);
}

void MOD_mkAmpelTest::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkAmpelTest::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__6_AND_state_fired_1_wget__7___d98;
  DEF_state_fired_1_whas__6_AND_state_fired_1_wget__7___d98 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__6_AND_state_fired_1_wget__7___d98);
}

void MOD_mkAmpelTest::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__9_OR_NOT_state_overlap_pw_w_ETC___d104;
  tUInt8 DEF_state_can_overlap__h25928;
  DEF_state_can_overlap__h25928 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__9_OR_NOT_state_overlap_pw_w_ETC___d104 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h25928);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__9_OR_NOT_state_overlap_pw_w_ETC___d104);
}

void MOD_mkAmpelTest::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkAmpelTest::RL_action_l127c18()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_ampel_pedestrian_request.METH_port0__write((tUInt8)1u);
}

void MOD_mkAmpelTest::RL_action_l129c26()
{
  tUInt32 DEF_counter_25_PLUS_1___d126;
  tUInt8 DEF_NOT_counter_25_SLE_50_27___d128;
  tUInt8 DEF_ampel_pedestrian_state_port1__read____d124;
  tUInt8 DEF_ampel_state_port1__read____d123;
  tUInt32 DEF_b__h33626;
  DEF_b__h33626 = INST_counter.METH_read();
  DEF_ampel_state_port1__read____d123 = INST_ampel_state.METH_port1__read();
  DEF_ampel_pedestrian_state_port1__read____d124 = INST_ampel_pedestrian_state.METH_port1__read();
  DEF_NOT_counter_25_SLE_50_27___d128 = !primSLE8(1u, 32u, (tUInt32)(DEF_b__h33626), 32u, 50u);
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  DEF_counter_25_PLUS_1___d126 = DEF_b__h33626 + 1u;
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h33538 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,64,2,1",
		   &__str_literal_1,
		   DEF_v__h33538,
		   DEF_ampel_state_port1__read____d123,
		   DEF_ampel_pedestrian_state_port1__read____d124);
  INST_counter.METH_write(DEF_counter_25_PLUS_1___d126);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_counter_25_SLE_50_27___d128)
      dollar_finish(sim_hdl, "32", 1u);
}

void MOD_mkAmpelTest::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkAmpelTest::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkAmpelTest::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkAmpelTest::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_fsm_action_l26c9 && (((((DEF_WILL_FIRE_RL_ampel_fsm_action_l30c9 || DEF_WILL_FIRE_RL_ampel_fsm_action_l35c33) || DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9) || DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9) || DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9) || DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32))
      dollar_error(sim_hdl, this, "s", &__str_literal_2);
}

void MOD_mkAmpelTest::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_fsm_action_l30c9 && ((((DEF_WILL_FIRE_RL_ampel_fsm_action_l35c33 || DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9) || DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9) || DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9) || DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32))
      dollar_error(sim_hdl, this, "s", &__str_literal_3);
}

void MOD_mkAmpelTest::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_fsm_action_l35c33 && (((DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9 || DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9) || DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9) || DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32))
      dollar_error(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkAmpelTest::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9 && ((DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9 || DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9) || DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32))
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
}

void MOD_mkAmpelTest::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9 && (DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9 || DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32))
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
}

void MOD_mkAmpelTest::__me_check_10()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9 && DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32)
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
}

void MOD_mkAmpelTest::__me_check_21()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l127c18 && DEF_WILL_FIRE_RL_action_l129c26)
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
}


/* Methods */


/* Reset routines */

void MOD_mkAmpelTest::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_counter.reset_RST(ARG_rst_in);
  INST_ampel_state.reset_RST(ARG_rst_in);
  INST_ampel_pedestrian_state.reset_RST(ARG_rst_in);
  INST_ampel_pedestrian_request.reset_RST(ARG_rst_in);
  INST_ampel_fsm_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_ampel_fsm_state_fired.reset_RST(ARG_rst_in);
  INST_ampel_fsm_state_can_overlap.reset_RST(ARG_rst_in);
  INST_ampel_fsm_start_reg_1.reset_RST(ARG_rst_in);
  INST_ampel_fsm_start_reg.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkAmpelTest::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkAmpelTest::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_ampel_fsm_abort.dump_state(indent + 2u);
  INST_ampel_fsm_start_reg.dump_state(indent + 2u);
  INST_ampel_fsm_start_reg_1.dump_state(indent + 2u);
  INST_ampel_fsm_start_reg_2.dump_state(indent + 2u);
  INST_ampel_fsm_start_wire.dump_state(indent + 2u);
  INST_ampel_fsm_state_can_overlap.dump_state(indent + 2u);
  INST_ampel_fsm_state_fired.dump_state(indent + 2u);
  INST_ampel_fsm_state_fired_1.dump_state(indent + 2u);
  INST_ampel_fsm_state_mkFSMstate.dump_state(indent + 2u);
  INST_ampel_fsm_state_overlap_pw.dump_state(indent + 2u);
  INST_ampel_fsm_state_set_pw.dump_state(indent + 2u);
  INST_ampel_idle_counter.dump_state(indent + 2u);
  INST_ampel_pedestrian_request.dump_state(indent + 2u);
  INST_ampel_pedestrian_state.dump_state(indent + 2u);
  INST_ampel_state.dump_state(indent + 2u);
  INST_counter.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkAmpelTest::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 40u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l127c18", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l129c26", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_fsm_action_l26c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_fsm_action_l30c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_fsm_action_l35c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_fsm_action_l64c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_fsm_action_l70c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_fsm_action_l75c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_ampel_fsm_action_l79c32", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h8525", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h33538", 64u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_ampel_fsm_abort.dump_VCD_defs(num);
  num = INST_ampel_fsm_start_reg.dump_VCD_defs(num);
  num = INST_ampel_fsm_start_reg_1.dump_VCD_defs(num);
  num = INST_ampel_fsm_start_reg_2.dump_VCD_defs(num);
  num = INST_ampel_fsm_start_wire.dump_VCD_defs(num);
  num = INST_ampel_fsm_state_can_overlap.dump_VCD_defs(num);
  num = INST_ampel_fsm_state_fired.dump_VCD_defs(num);
  num = INST_ampel_fsm_state_fired_1.dump_VCD_defs(num);
  num = INST_ampel_fsm_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_ampel_fsm_state_overlap_pw.dump_VCD_defs(num);
  num = INST_ampel_fsm_state_set_pw.dump_VCD_defs(num);
  num = INST_ampel_idle_counter.dump_VCD_defs(num);
  num = INST_ampel_pedestrian_request.dump_VCD_defs(num);
  num = INST_ampel_pedestrian_state.dump_VCD_defs(num);
  num = INST_ampel_state.dump_VCD_defs(num);
  num = INST_counter.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkAmpelTest::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAmpelTest &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkAmpelTest::vcd_defs(tVCDDumpType dt, MOD_mkAmpelTest &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 64u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l127c18) != DEF_WILL_FIRE_RL_action_l127c18)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l127c18, 1u);
	backing.DEF_WILL_FIRE_RL_action_l127c18 = DEF_WILL_FIRE_RL_action_l127c18;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l129c26) != DEF_WILL_FIRE_RL_action_l129c26)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l129c26, 1u);
	backing.DEF_WILL_FIRE_RL_action_l129c26 = DEF_WILL_FIRE_RL_action_l129c26;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l26c9) != DEF_WILL_FIRE_RL_ampel_fsm_action_l26c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_fsm_action_l26c9, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l26c9 = DEF_WILL_FIRE_RL_ampel_fsm_action_l26c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l30c9) != DEF_WILL_FIRE_RL_ampel_fsm_action_l30c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_fsm_action_l30c9, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l30c9 = DEF_WILL_FIRE_RL_ampel_fsm_action_l30c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l35c33) != DEF_WILL_FIRE_RL_ampel_fsm_action_l35c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_fsm_action_l35c33, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l35c33 = DEF_WILL_FIRE_RL_ampel_fsm_action_l35c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9) != DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9 = DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9) != DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9 = DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9) != DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9 = DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32) != DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32, 1u);
	backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32 = DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32;
      }
      ++num;
      if ((backing.DEF_b__h8525) != DEF_b__h8525)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h8525, 8u);
	backing.DEF_b__h8525 = DEF_b__h8525;
      }
      ++num;
      if ((backing.DEF_v__h33538) != DEF_v__h33538)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h33538, 64u);
	backing.DEF_v__h33538 = DEF_v__h33538;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l127c18, 1u);
      backing.DEF_WILL_FIRE_RL_action_l127c18 = DEF_WILL_FIRE_RL_action_l127c18;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l129c26, 1u);
      backing.DEF_WILL_FIRE_RL_action_l129c26 = DEF_WILL_FIRE_RL_action_l129c26;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_fsm_action_l26c9, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l26c9 = DEF_WILL_FIRE_RL_ampel_fsm_action_l26c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_fsm_action_l30c9, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l30c9 = DEF_WILL_FIRE_RL_ampel_fsm_action_l30c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_fsm_action_l35c33, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l35c33 = DEF_WILL_FIRE_RL_ampel_fsm_action_l35c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9 = DEF_WILL_FIRE_RL_ampel_fsm_action_l64c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9 = DEF_WILL_FIRE_RL_ampel_fsm_action_l70c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9 = DEF_WILL_FIRE_RL_ampel_fsm_action_l75c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32, 1u);
      backing.DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32 = DEF_WILL_FIRE_RL_ampel_fsm_action_l79c32;
      vcd_write_val(sim_hdl, num++, DEF_b__h8525, 8u);
      backing.DEF_b__h8525 = DEF_b__h8525;
      vcd_write_val(sim_hdl, num++, DEF_v__h33538, 64u);
      backing.DEF_v__h33538 = DEF_v__h33538;
    }
}

void MOD_mkAmpelTest::vcd_prims(tVCDDumpType dt, MOD_mkAmpelTest &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_ampel_fsm_abort.dump_VCD(dt, backing.INST_ampel_fsm_abort);
  INST_ampel_fsm_start_reg.dump_VCD(dt, backing.INST_ampel_fsm_start_reg);
  INST_ampel_fsm_start_reg_1.dump_VCD(dt, backing.INST_ampel_fsm_start_reg_1);
  INST_ampel_fsm_start_reg_2.dump_VCD(dt, backing.INST_ampel_fsm_start_reg_2);
  INST_ampel_fsm_start_wire.dump_VCD(dt, backing.INST_ampel_fsm_start_wire);
  INST_ampel_fsm_state_can_overlap.dump_VCD(dt, backing.INST_ampel_fsm_state_can_overlap);
  INST_ampel_fsm_state_fired.dump_VCD(dt, backing.INST_ampel_fsm_state_fired);
  INST_ampel_fsm_state_fired_1.dump_VCD(dt, backing.INST_ampel_fsm_state_fired_1);
  INST_ampel_fsm_state_mkFSMstate.dump_VCD(dt, backing.INST_ampel_fsm_state_mkFSMstate);
  INST_ampel_fsm_state_overlap_pw.dump_VCD(dt, backing.INST_ampel_fsm_state_overlap_pw);
  INST_ampel_fsm_state_set_pw.dump_VCD(dt, backing.INST_ampel_fsm_state_set_pw);
  INST_ampel_idle_counter.dump_VCD(dt, backing.INST_ampel_idle_counter);
  INST_ampel_pedestrian_request.dump_VCD(dt, backing.INST_ampel_pedestrian_request);
  INST_ampel_pedestrian_state.dump_VCD(dt, backing.INST_ampel_pedestrian_state);
  INST_ampel_state.dump_VCD(dt, backing.INST_ampel_state);
  INST_counter.dump_VCD(dt, backing.INST_counter);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}
