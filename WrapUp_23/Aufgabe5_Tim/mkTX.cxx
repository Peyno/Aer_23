/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Feb 13 17:44:53 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTX.h"


/* Constructor */
MOD_mkTX::MOD_mkTX(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_fTX(simHdl, "fTX", this, 8u, 2u, (tUInt8)1u, 0u),
    INST_pwTick(simHdl, "pwTick", this, 0u),
    INST_rBitIndex(simHdl, "rBitIndex", this, 3u),
    INST_rCounter(simHdl, "rCounter", this, 32u, 0u, (tUInt8)0u),
    INST_rIdle(simHdl, "rIdle", this, 1u),
    INST_rOutputPin(simHdl, "rOutputPin", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_rStopped(simHdl, "rStopped", this, 1u, (tUInt8)1u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 10u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTX::init_symbols_0()
{
  init_symbol(&symbols[0u], "fTX", SYM_MODULE, &INST_fTX);
  init_symbol(&symbols[1u], "pwTick", SYM_MODULE, &INST_pwTick);
  init_symbol(&symbols[2u], "RL_send_bit", SYM_RULE);
  init_symbol(&symbols[3u], "RL_stop_bits", SYM_RULE);
  init_symbol(&symbols[4u], "RL_tick_gen", SYM_RULE);
  init_symbol(&symbols[5u], "rBitIndex", SYM_MODULE, &INST_rBitIndex);
  init_symbol(&symbols[6u], "rCounter", SYM_MODULE, &INST_rCounter);
  init_symbol(&symbols[7u], "rIdle", SYM_MODULE, &INST_rIdle);
  init_symbol(&symbols[8u], "rOutputPin", SYM_MODULE, &INST_rOutputPin);
  init_symbol(&symbols[9u], "rStopped", SYM_MODULE, &INST_rStopped);
}


/* Rule actions */

void MOD_mkTX::RL_tick_gen()
{
  tUInt8 DEF_NOT_rCounter_PLUS_1_ULT_16___d5;
  tUInt32 DEF_rCounter_PLUS_1___d2;
  tUInt8 DEF_rCounter_PLUS_1_ULT_16___d3;
  tUInt32 DEF_IF_rCounter_PLUS_1_ULT_16_THEN_rCounter_PLUS_1_ETC___d4;
  tUInt32 DEF_b__h343;
  DEF_b__h343 = INST_rCounter.METH_read();
  DEF_rCounter_PLUS_1___d2 = DEF_b__h343 + 1u;
  DEF_rCounter_PLUS_1_ULT_16___d3 = DEF_rCounter_PLUS_1___d2 < 16u;
  DEF_IF_rCounter_PLUS_1_ULT_16_THEN_rCounter_PLUS_1_ETC___d4 = DEF_rCounter_PLUS_1_ULT_16___d3 ? DEF_rCounter_PLUS_1___d2 : 0u;
  DEF_NOT_rCounter_PLUS_1_ULT_16___d5 = !DEF_rCounter_PLUS_1_ULT_16___d3;
  INST_rCounter.METH_write(DEF_IF_rCounter_PLUS_1_ULT_16_THEN_rCounter_PLUS_1_ETC___d4);
  if (DEF_NOT_rCounter_PLUS_1_ULT_16___d5)
    INST_pwTick.METH_wset();
}

void MOD_mkTX::RL_stop_bits()
{
  INST_rOutputPin.METH_write((tUInt8)1u);
  INST_rStopped.METH_write((tUInt8)0u);
  INST_rIdle.METH_write((tUInt8)1u);
  INST_rBitIndex.METH_write((tUInt8)0u);
}

void MOD_mkTX::RL_send_bit()
{
  tUInt8 DEF_rBitIndex_3_PLUS_1___d26;
  tUInt8 DEF_rBitIndex_3_EQ_0_4_AND_rIdle_6___d22;
  tUInt8 DEF_NOT_rBitIndex_3_EQ_0_4_5_OR_NOT_rIdle_6_7_8_AN_ETC___d25;
  tUInt8 DEF_NOT_rBitIndex_3_EQ_0_4_5_OR_NOT_rIdle_6_7_8_AN_ETC___d21;
  tUInt8 DEF_rBitIndex_3_EQ_0___d14;
  tUInt8 DEF_rBitIndex_3_EQ_7___d23;
  tUInt8 DEF_pkt__h508;
  tUInt8 DEF_NOT_rBitIndex_3_EQ_0_4_5_OR_NOT_rIdle_6_7___d18;
  tUInt8 DEF_rIdle__h520;
  tUInt8 DEF_x__h642;
  tUInt8 DEF_current_bit__h509;
  DEF_x__h642 = INST_rBitIndex.METH_read();
  DEF_rIdle__h520 = INST_rIdle.METH_read();
  DEF_pkt__h508 = INST_fTX.METH_first();
  DEF_current_bit__h509 = primExtract8(1u,
				       8u,
				       (tUInt8)(DEF_pkt__h508),
				       3u,
				       (tUInt8)(DEF_x__h642),
				       3u,
				       (tUInt8)(DEF_x__h642));
  DEF_rBitIndex_3_EQ_7___d23 = DEF_x__h642 == (tUInt8)7u;
  DEF_rBitIndex_3_EQ_0___d14 = DEF_x__h642 == (tUInt8)0u;
  DEF_NOT_rBitIndex_3_EQ_0_4_5_OR_NOT_rIdle_6_7___d18 = !DEF_rBitIndex_3_EQ_0___d14 || !DEF_rIdle__h520;
  DEF_NOT_rBitIndex_3_EQ_0_4_5_OR_NOT_rIdle_6_7_8_AN_ETC___d21 = DEF_NOT_rBitIndex_3_EQ_0_4_5_OR_NOT_rIdle_6_7___d18 && DEF_current_bit__h509;
  DEF_NOT_rBitIndex_3_EQ_0_4_5_OR_NOT_rIdle_6_7_8_AN_ETC___d25 = DEF_NOT_rBitIndex_3_EQ_0_4_5_OR_NOT_rIdle_6_7___d18 && !DEF_rBitIndex_3_EQ_7___d23;
  DEF_rBitIndex_3_EQ_0_4_AND_rIdle_6___d22 = DEF_rBitIndex_3_EQ_0___d14 && DEF_rIdle__h520;
  DEF_rBitIndex_3_PLUS_1___d26 = (tUInt8)7u & (DEF_x__h642 + (tUInt8)1u);
  INST_rOutputPin.METH_write(DEF_NOT_rBitIndex_3_EQ_0_4_5_OR_NOT_rIdle_6_7_8_AN_ETC___d21);
  if (DEF_rBitIndex_3_EQ_0_4_AND_rIdle_6___d22)
    INST_rIdle.METH_write((tUInt8)0u);
  if (DEF_rBitIndex_3_EQ_7___d23)
    INST_fTX.METH_deq();
  if (DEF_rBitIndex_3_EQ_7___d23)
    INST_rStopped.METH_write((tUInt8)1u);
  if (DEF_NOT_rBitIndex_3_EQ_0_4_5_OR_NOT_rIdle_6_7_8_AN_ETC___d25)
    INST_rBitIndex.METH_write(DEF_rBitIndex_3_PLUS_1___d26);
}


/* Methods */

tUInt8 MOD_mkTX::METH_pin()
{
  tUInt8 PORT_pin;
  PORT_pin = INST_rOutputPin.METH_read();
  return PORT_pin;
}

tUInt8 MOD_mkTX::METH_RDY_pin()
{
  tUInt8 DEF_CAN_FIRE_pin;
  tUInt8 PORT_RDY_pin;
  DEF_CAN_FIRE_pin = (tUInt8)1u;
  PORT_RDY_pin = DEF_CAN_FIRE_pin;
  return PORT_RDY_pin;
}

void MOD_mkTX::METH_data_put(tUInt8 ARG_data_put)
{
  INST_fTX.METH_enq(ARG_data_put);
}

tUInt8 MOD_mkTX::METH_RDY_data_put()
{
  tUInt8 DEF_CAN_FIRE_data_put;
  tUInt8 PORT_RDY_data_put;
  DEF_CAN_FIRE_data_put = INST_fTX.METH_i_notFull();
  PORT_RDY_data_put = DEF_CAN_FIRE_data_put;
  return PORT_RDY_data_put;
}


/* Reset routines */

void MOD_mkTX::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_rStopped.reset_RST(ARG_rst_in);
  INST_rOutputPin.reset_RST(ARG_rst_in);
  INST_rCounter.reset_RST(ARG_rst_in);
  INST_fTX.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTX::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTX::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_fTX.dump_state(indent + 2u);
  INST_pwTick.dump_state(indent + 2u);
  INST_rBitIndex.dump_state(indent + 2u);
  INST_rCounter.dump_state(indent + 2u);
  INST_rIdle.dump_state(indent + 2u);
  INST_rOutputPin.dump_state(indent + 2u);
  INST_rStopped.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTX::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 8u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_fTX.dump_VCD_defs(num);
  num = INST_pwTick.dump_VCD_defs(num);
  num = INST_rBitIndex.dump_VCD_defs(num);
  num = INST_rCounter.dump_VCD_defs(num);
  num = INST_rIdle.dump_VCD_defs(num);
  num = INST_rOutputPin.dump_VCD_defs(num);
  num = INST_rStopped.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTX::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTX &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTX::vcd_defs(tVCDDumpType dt, MOD_mkTX &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkTX::vcd_prims(tVCDDumpType dt, MOD_mkTX &backing)
{
  INST_fTX.dump_VCD(dt, backing.INST_fTX);
  INST_pwTick.dump_VCD(dt, backing.INST_pwTick);
  INST_rBitIndex.dump_VCD(dt, backing.INST_rBitIndex);
  INST_rCounter.dump_VCD(dt, backing.INST_rCounter);
  INST_rIdle.dump_VCD(dt, backing.INST_rIdle);
  INST_rOutputPin.dump_VCD(dt, backing.INST_rOutputPin);
  INST_rStopped.dump_VCD(dt, backing.INST_rStopped);
}
