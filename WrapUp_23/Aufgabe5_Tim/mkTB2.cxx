/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Feb 13 17:46:46 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTB2.h"


/* String declarations */
static std::string const __str_literal_6("%d Wrong Data expected: %d got: %d  Time: %d", 44u);
static std::string const __str_literal_8("Code executed with %d Mistakes!", 31u);
static std::string const __str_literal_5("Data: %d ... Fetching Data from Tackt: %d", 41u);
static std::string const __str_literal_9("Error: \"Tb.bsv\", line 60, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l60c13] and\n  [RL_action_l61c13, RL_action_l68c16, RL_action_l69c13,\n  RL_action_r_init_l75c13, RL_action_l75c25, RL_action_f_init_l82c13,\n  RL_action_r_init_l83c17, RL_action_l83c29, RL_action_f_update_l82c13,\n  RL_action_r_init_l94c13, RL_action_l94c25, RL_action_l102c13] ) fired in the\n  same clock cycle.\n",
					 411u);
static std::string const __str_literal_10("Error: \"Tb.bsv\", line 61, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l61c13] and\n  [RL_action_l68c16, RL_action_l69c13, RL_action_r_init_l75c13,\n  RL_action_l75c25, RL_action_f_init_l82c13, RL_action_r_init_l83c17,\n  RL_action_l83c29, RL_action_f_update_l82c13, RL_action_r_init_l94c13,\n  RL_action_l94c25, RL_action_l102c13] ) fired in the same clock cycle.\n",
					  391u);
static std::string const __str_literal_11("Error: \"Tb.bsv\", line 68, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l68c16] and\n  [RL_action_l69c13, RL_action_r_init_l75c13, RL_action_l75c25,\n  RL_action_f_init_l82c13, RL_action_r_init_l83c17, RL_action_l83c29,\n  RL_action_f_update_l82c13, RL_action_r_init_l94c13, RL_action_l94c25,\n  RL_action_l102c13] ) fired in the same clock cycle.\n",
					  373u);
static std::string const __str_literal_12("Error: \"Tb.bsv\", line 69, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l69c13] and\n  [RL_action_r_init_l75c13, RL_action_l75c25, RL_action_f_init_l82c13,\n  RL_action_r_init_l83c17, RL_action_l83c29, RL_action_f_update_l82c13,\n  RL_action_r_init_l94c13, RL_action_l94c25, RL_action_l102c13] ) fired in the\n  same clock cycle.\n",
					  355u);
static std::string const __str_literal_13("Error: \"Tb.bsv\", line 75, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l75c13] and\n  [RL_action_l75c25, RL_action_f_init_l82c13, RL_action_r_init_l83c17,\n  RL_action_l83c29, RL_action_f_update_l82c13, RL_action_r_init_l94c13,\n  RL_action_l94c25, RL_action_l102c13] ) fired in the same clock cycle.\n",
					  335u);
static std::string const __str_literal_14("Error: \"Tb.bsv\", line 75, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l75c25] and\n  [RL_action_f_init_l82c13, RL_action_r_init_l83c17, RL_action_l83c29,\n  RL_action_f_update_l82c13, RL_action_r_init_l94c13, RL_action_l94c25,\n  RL_action_l102c13] ) fired in the same clock cycle.\n",
					  310u);
static std::string const __str_literal_15("Error: \"Tb.bsv\", line 82, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l82c13] and\n  [RL_action_r_init_l83c17, RL_action_l83c29, RL_action_f_update_l82c13,\n  RL_action_r_init_l94c13, RL_action_l94c25, RL_action_l102c13] ) fired in the\n  same clock cycle.\n",
					  292u);
static std::string const __str_literal_18("Error: \"Tb.bsv\", line 82, column 52: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_update_l82c13] and\n  [RL_action_r_init_l94c13, RL_action_l94c25, RL_action_l102c13] ) fired in\n  the same clock cycle.\n",
					  222u);
static std::string const __str_literal_16("Error: \"Tb.bsv\", line 83, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l83c17] and\n  [RL_action_l83c29, RL_action_f_update_l82c13, RL_action_r_init_l94c13,\n  RL_action_l94c25, RL_action_l102c13] ) fired in the same clock cycle.\n",
					  265u);
static std::string const __str_literal_17("Error: \"Tb.bsv\", line 83, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l83c29] and\n  [RL_action_f_update_l82c13, RL_action_r_init_l94c13, RL_action_l94c25,\n  RL_action_l102c13] ) fired in the same clock cycle.\n",
					  240u);
static std::string const __str_literal_19("Error: \"Tb.bsv\", line 94, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l94c13] and\n  [RL_action_l94c25, RL_action_l102c13] ) fired in the same clock cycle.\n",
					  193u);
static std::string const __str_literal_20("Error: \"Tb.bsv\", line 94, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l94c25] and\n  [RL_action_l102c13] ) fired in the same clock cycle.\n",
					  168u);
static std::string const __str_literal_1("StartTB ...", 11u);
static std::string const __str_literal_3("Waiting for Data to be sent ...", 31u);
static std::string const __str_literal_4("Wrong Data Notification!", 24u);
static std::string const __str_literal_7("Wrong END Bit: 1 got: ", 22u);
static std::string const __str_literal_2("Wrong Idle Output!", 18u);


/* Constructor */
MOD_mkTB2::MOD_mkTB2(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_counter(simHdl, "counter", this, 32u, 0u, (tUInt8)0u),
    INST_dut(simHdl, "dut", this),
    INST_jj_1_repeat_count(simHdl, "jj_1_repeat_count", this, 16u, 1u, (tUInt8)0u),
    INST_jj_2_repeat_count(simHdl, "jj_2_repeat_count", this, 16u, 1u, (tUInt8)0u),
    INST_jj_repeat_count(simHdl, "jj_repeat_count", this, 15u, 1u, (tUInt8)0u),
    INST_mistakes(simHdl, "mistakes", this, 32u, 0u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 5u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h74836(12297829382473034410llu),
    DEF_v__h74735(12297829382473034410llu)
{
  symbol_count = 70u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTB2::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_10", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_11", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_12", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_13", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_14", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_15", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_16", SYM_RULE);
  init_symbol(&symbols[7u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[8u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[9u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[10u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[11u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[12u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[13u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[14u], "dut", SYM_MODULE, &INST_dut);
  init_symbol(&symbols[15u], "jj_1_repeat_count", SYM_MODULE, &INST_jj_1_repeat_count);
  init_symbol(&symbols[16u], "jj_2_repeat_count", SYM_MODULE, &INST_jj_2_repeat_count);
  init_symbol(&symbols[17u], "jj_repeat_count", SYM_MODULE, &INST_jj_repeat_count);
  init_symbol(&symbols[18u], "mistakes", SYM_MODULE, &INST_mistakes);
  init_symbol(&symbols[19u], "RL_action_f_init_l82c13", SYM_RULE);
  init_symbol(&symbols[20u], "RL_action_f_update_l82c13", SYM_RULE);
  init_symbol(&symbols[21u], "RL_action_l102c13", SYM_RULE);
  init_symbol(&symbols[22u], "RL_action_l60c13", SYM_RULE);
  init_symbol(&symbols[23u], "RL_action_l61c13", SYM_RULE);
  init_symbol(&symbols[24u], "RL_action_l68c16", SYM_RULE);
  init_symbol(&symbols[25u], "RL_action_l69c13", SYM_RULE);
  init_symbol(&symbols[26u], "RL_action_l75c25", SYM_RULE);
  init_symbol(&symbols[27u], "RL_action_l83c29", SYM_RULE);
  init_symbol(&symbols[28u], "RL_action_l94c25", SYM_RULE);
  init_symbol(&symbols[29u], "RL_action_ovlp_r_update_l75c13", SYM_RULE);
  init_symbol(&symbols[30u], "RL_action_ovlp_r_update_l83c17", SYM_RULE);
  init_symbol(&symbols[31u], "RL_action_ovlp_r_update_l94c13", SYM_RULE);
  init_symbol(&symbols[32u], "RL_action_r_init_l75c13", SYM_RULE);
  init_symbol(&symbols[33u], "RL_action_r_init_l83c17", SYM_RULE);
  init_symbol(&symbols[34u], "RL_action_r_init_l94c13", SYM_RULE);
  init_symbol(&symbols[35u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[36u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[37u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[38u], "RL_idle_l59c18", SYM_RULE);
  init_symbol(&symbols[39u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[40u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[41u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[42u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[43u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[44u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[45u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[46u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[47u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[48u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[49u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[50u], "state_can_overlap__h6285", SYM_DEF, &DEF_state_can_overlap__h6285, 1u);
  init_symbol(&symbols[51u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[52u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[53u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[54u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[55u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[56u],
	      "WILL_FIRE_RL_action_f_init_l82c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_init_l82c13,
	      1u);
  init_symbol(&symbols[57u],
	      "WILL_FIRE_RL_action_f_update_l82c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_update_l82c13,
	      1u);
  init_symbol(&symbols[58u],
	      "WILL_FIRE_RL_action_l102c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l102c13,
	      1u);
  init_symbol(&symbols[59u],
	      "WILL_FIRE_RL_action_l60c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l60c13,
	      1u);
  init_symbol(&symbols[60u],
	      "WILL_FIRE_RL_action_l61c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l61c13,
	      1u);
  init_symbol(&symbols[61u],
	      "WILL_FIRE_RL_action_l68c16",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l68c16,
	      1u);
  init_symbol(&symbols[62u],
	      "WILL_FIRE_RL_action_l69c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l69c13,
	      1u);
  init_symbol(&symbols[63u],
	      "WILL_FIRE_RL_action_l75c25",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l75c25,
	      1u);
  init_symbol(&symbols[64u],
	      "WILL_FIRE_RL_action_l83c29",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l83c29,
	      1u);
  init_symbol(&symbols[65u],
	      "WILL_FIRE_RL_action_l94c25",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l94c25,
	      1u);
  init_symbol(&symbols[66u],
	      "WILL_FIRE_RL_action_r_init_l75c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l75c13,
	      1u);
  init_symbol(&symbols[67u],
	      "WILL_FIRE_RL_action_r_init_l83c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l83c17,
	      1u);
  init_symbol(&symbols[68u],
	      "WILL_FIRE_RL_action_r_init_l94c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l94c13,
	      1u);
  init_symbol(&symbols[69u], "x__h74895", SYM_DEF, &DEF_x__h74895, 32u);
}


/* Rule actions */

void MOD_mkTB2::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas_AND_start_reg_2_wget___d3;
  DEF_start_reg_2_whas_AND_start_reg_2_wget___d3 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas_AND_start_reg_2_wget___d3);
}

void MOD_mkTB2::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTB2::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15;
  DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15);
}

void MOD_mkTB2::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21;
  DEF_state_can_overlap__h6285 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h6285);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21);
}

void MOD_mkTB2::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTB2::RL_action_l60c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
}

void MOD_mkTB2::RL_action_l61c13()
{
  DEF_b__h71876 = INST_mistakes.METH_read();
  DEF_dut_pin____d39 = INST_dut.METH_pin();
  DEF_NOT_dut_pin__9___d40 = !DEF_dut_pin____d39;
  DEF_mistakes_1_PLUS_1___d42 = DEF_b__h71876 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_pin__9___d40)
      dollar_display(sim_hdl, this, "s", &__str_literal_2);
  if (DEF_NOT_dut_pin__9___d40)
    INST_mistakes.METH_write(DEF_mistakes_1_PLUS_1___d42);
}

void MOD_mkTB2::RL_action_l68c16()
{
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_dut.METH_data_put((tUInt8)170u);
}

void MOD_mkTB2::RL_action_l69c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_3);
}

void MOD_mkTB2::RL_action_r_init_l75c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_repeat_count.METH_write(1u);
}

void MOD_mkTB2::RL_action_l75c25()
{
  DEF_b__h71876 = INST_mistakes.METH_read();
  DEF_dut_pin____d39 = INST_dut.METH_pin();
  DEF_mistakes_1_PLUS_1___d42 = DEF_b__h71876 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)7u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_dut_pin____d39)
      dollar_display(sim_hdl, this, "s", &__str_literal_4);
  if (DEF_dut_pin____d39)
    INST_mistakes.METH_write(DEF_mistakes_1_PLUS_1___d42);
}

void MOD_mkTB2::RL_action_f_init_l82c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)9u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_counter.METH_write(0u);
}

void MOD_mkTB2::RL_action_r_init_l83c17()
{
  INST_state_mkFSMstate.METH_write((tUInt8)10u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_1_repeat_count.METH_write(1u);
}

void MOD_mkTB2::RL_action_l83c29()
{
  tUInt8 DEF_NOT_dut_pin__9_EQ_0b10101010_BIT_counter_0_BIT_ETC___d103;
  tUInt8 DEF__0b10101010_BIT_counter_0_BITS_2_TO_0_00___d101;
  tUInt8 DEF_counter_0_BITS_2_TO_0___d100;
  tUInt32 DEF_signed_counter_0___d98;
  DEF_b__h71876 = INST_mistakes.METH_read();
  DEF_x__h74895 = INST_counter.METH_read();
  DEF_signed_counter_0___d98 = DEF_x__h74895;
  DEF_dut_pin____d39 = INST_dut.METH_pin();
  DEF_counter_0_BITS_2_TO_0___d100 = (tUInt8)((tUInt8)7u & DEF_x__h74895);
  DEF__0b10101010_BIT_counter_0_BITS_2_TO_0_00___d101 = primExtract8(1u,
								     8u,
								     (tUInt8)170u,
								     3u,
								     (tUInt8)(DEF_counter_0_BITS_2_TO_0___d100),
								     3u,
								     (tUInt8)(DEF_counter_0_BITS_2_TO_0___d100));
  DEF_NOT_dut_pin__9_EQ_0b10101010_BIT_counter_0_BIT_ETC___d103 = !(DEF_dut_pin____d39 == DEF__0b10101010_BIT_counter_0_BITS_2_TO_0_00___d101);
  DEF_mistakes_1_PLUS_1___d42 = DEF_b__h71876 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)12u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h74735 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl,
		   this,
		   "s,-32,64",
		   &__str_literal_5,
		   DEF_signed_counter_0___d98,
		   DEF_v__h74735);
    if (DEF_NOT_dut_pin__9_EQ_0b10101010_BIT_counter_0_BIT_ETC___d103)
      DEF_v__h74836 = dollar_time(sim_hdl);
    else
      DEF_v__h74836 = 12297829382473034410llu;
  }
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_pin__9_EQ_0b10101010_BIT_counter_0_BIT_ETC___d103)
      dollar_display(sim_hdl,
		     this,
		     "s,-32,1,1,64",
		     &__str_literal_6,
		     DEF_signed_counter_0___d98,
		     DEF__0b10101010_BIT_counter_0_BITS_2_TO_0_00___d101,
		     DEF_dut_pin____d39,
		     DEF_v__h74836);
  if (DEF_NOT_dut_pin__9_EQ_0b10101010_BIT_counter_0_BIT_ETC___d103)
    INST_mistakes.METH_write(DEF_mistakes_1_PLUS_1___d42);
}

void MOD_mkTB2::RL_action_f_update_l82c13()
{
  tUInt32 DEF_counter_0_PLUS_1___d106;
  DEF_x__h74895 = INST_counter.METH_read();
  DEF_counter_0_PLUS_1___d106 = DEF_x__h74895 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)14u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_counter.METH_write(DEF_counter_0_PLUS_1___d106);
}

void MOD_mkTB2::RL_action_r_init_l94c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)15u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_2_repeat_count.METH_write(1u);
}

void MOD_mkTB2::RL_action_l94c25()
{
  DEF_b__h71876 = INST_mistakes.METH_read();
  DEF_dut_pin____d39 = INST_dut.METH_pin();
  DEF_NOT_dut_pin__9___d40 = !DEF_dut_pin____d39;
  DEF_mistakes_1_PLUS_1___d42 = DEF_b__h71876 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)17u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_dut_pin__9___d40)
      dollar_display(sim_hdl, this, "s,1", &__str_literal_7, DEF_dut_pin____d39);
  if (DEF_NOT_dut_pin__9___d40)
    INST_mistakes.METH_write(DEF_mistakes_1_PLUS_1___d42);
}

void MOD_mkTB2::RL_action_l102c13()
{
  tUInt32 DEF_signed_mistakes_1___d126;
  DEF_b__h71876 = INST_mistakes.METH_read();
  DEF_signed_mistakes_1___d126 = DEF_b__h71876;
  INST_state_mkFSMstate.METH_write((tUInt8)19u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_8, DEF_signed_mistakes_1___d126);
}

void MOD_mkTB2::RL_action_ovlp_r_update_l75c13()
{
  tUInt32 DEF_x__h77814;
  tUInt32 DEF_IF_jj_repeat_count_read__0_BIT_14_29_THEN_1_EL_ETC___d132;
  DEF_jj_repeat_count_read____d50 = INST_jj_repeat_count.METH_read();
  DEF_x__h77814 = 32767u & ((((tUInt32)(16383u & DEF_jj_repeat_count_read____d50)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_jj_repeat_count_read__0_BIT_14_29_THEN_1_EL_ETC___d132 = (tUInt8)(DEF_jj_repeat_count_read____d50 >> 14u) ? 1u : DEF_x__h77814;
  INST_state_overlap_pw.METH_wset();
  INST_jj_repeat_count.METH_write(DEF_IF_jj_repeat_count_read__0_BIT_14_29_THEN_1_EL_ETC___d132);
}

void MOD_mkTB2::RL_action_ovlp_r_update_l83c17()
{
  tUInt32 DEF_x__h78028;
  tUInt32 DEF_IF_jj_1_repeat_count_read__2_BIT_15_36_THEN_1__ETC___d139;
  DEF_jj_1_repeat_count_read____d72 = INST_jj_1_repeat_count.METH_read();
  DEF_x__h78028 = 65535u & ((((tUInt32)(32767u & DEF_jj_1_repeat_count_read____d72)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_jj_1_repeat_count_read__2_BIT_15_36_THEN_1__ETC___d139 = (tUInt8)(DEF_jj_1_repeat_count_read____d72 >> 15u) ? 1u : DEF_x__h78028;
  INST_state_overlap_pw.METH_wset();
  INST_jj_1_repeat_count.METH_write(DEF_IF_jj_1_repeat_count_read__2_BIT_15_36_THEN_1__ETC___d139);
}

void MOD_mkTB2::RL_action_ovlp_r_update_l94c13()
{
  tUInt32 DEF_x__h78241;
  tUInt32 DEF_IF_jj_2_repeat_count_read__08_BIT_15_44_THEN_1_ETC___d147;
  DEF_jj_2_repeat_count_read____d108 = INST_jj_2_repeat_count.METH_read();
  DEF_x__h78241 = 65535u & ((((tUInt32)(32767u & DEF_jj_2_repeat_count_read____d108)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_jj_2_repeat_count_read__08_BIT_15_44_THEN_1_ETC___d147 = (tUInt8)(DEF_jj_2_repeat_count_read____d108 >> 15u) ? 1u : DEF_x__h78241;
  INST_state_overlap_pw.METH_wset();
  INST_jj_2_repeat_count.METH_write(DEF_IF_jj_2_repeat_count_read__08_BIT_15_44_THEN_1_ETC___d147);
}

void MOD_mkTB2::RL_idle_l59c18()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTB2::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTB2::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTB2::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTB2::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l60c13 && (((((((((((DEF_WILL_FIRE_RL_action_l61c13 || DEF_WILL_FIRE_RL_action_l68c16) || DEF_WILL_FIRE_RL_action_l69c13) || DEF_WILL_FIRE_RL_action_r_init_l75c13) || DEF_WILL_FIRE_RL_action_l75c25) || DEF_WILL_FIRE_RL_action_f_init_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l83c17) || DEF_WILL_FIRE_RL_action_l83c29) || DEF_WILL_FIRE_RL_action_f_update_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l94c13) || DEF_WILL_FIRE_RL_action_l94c25) || DEF_WILL_FIRE_RL_action_l102c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
}

void MOD_mkTB2::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l61c13 && ((((((((((DEF_WILL_FIRE_RL_action_l68c16 || DEF_WILL_FIRE_RL_action_l69c13) || DEF_WILL_FIRE_RL_action_r_init_l75c13) || DEF_WILL_FIRE_RL_action_l75c25) || DEF_WILL_FIRE_RL_action_f_init_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l83c17) || DEF_WILL_FIRE_RL_action_l83c29) || DEF_WILL_FIRE_RL_action_f_update_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l94c13) || DEF_WILL_FIRE_RL_action_l94c25) || DEF_WILL_FIRE_RL_action_l102c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
}

void MOD_mkTB2::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l68c16 && (((((((((DEF_WILL_FIRE_RL_action_l69c13 || DEF_WILL_FIRE_RL_action_r_init_l75c13) || DEF_WILL_FIRE_RL_action_l75c25) || DEF_WILL_FIRE_RL_action_f_init_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l83c17) || DEF_WILL_FIRE_RL_action_l83c29) || DEF_WILL_FIRE_RL_action_f_update_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l94c13) || DEF_WILL_FIRE_RL_action_l94c25) || DEF_WILL_FIRE_RL_action_l102c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
}

void MOD_mkTB2::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l69c13 && ((((((((DEF_WILL_FIRE_RL_action_r_init_l75c13 || DEF_WILL_FIRE_RL_action_l75c25) || DEF_WILL_FIRE_RL_action_f_init_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l83c17) || DEF_WILL_FIRE_RL_action_l83c29) || DEF_WILL_FIRE_RL_action_f_update_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l94c13) || DEF_WILL_FIRE_RL_action_l94c25) || DEF_WILL_FIRE_RL_action_l102c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_12);
}

void MOD_mkTB2::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_r_init_l75c13 && (((((((DEF_WILL_FIRE_RL_action_l75c25 || DEF_WILL_FIRE_RL_action_f_init_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l83c17) || DEF_WILL_FIRE_RL_action_l83c29) || DEF_WILL_FIRE_RL_action_f_update_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l94c13) || DEF_WILL_FIRE_RL_action_l94c25) || DEF_WILL_FIRE_RL_action_l102c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_13);
}

void MOD_mkTB2::__me_check_10()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l75c25 && ((((((DEF_WILL_FIRE_RL_action_f_init_l82c13 || DEF_WILL_FIRE_RL_action_r_init_l83c17) || DEF_WILL_FIRE_RL_action_l83c29) || DEF_WILL_FIRE_RL_action_f_update_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l94c13) || DEF_WILL_FIRE_RL_action_l94c25) || DEF_WILL_FIRE_RL_action_l102c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_14);
}

void MOD_mkTB2::__me_check_11()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_init_l82c13 && (((((DEF_WILL_FIRE_RL_action_r_init_l83c17 || DEF_WILL_FIRE_RL_action_l83c29) || DEF_WILL_FIRE_RL_action_f_update_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l94c13) || DEF_WILL_FIRE_RL_action_l94c25) || DEF_WILL_FIRE_RL_action_l102c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_15);
}

void MOD_mkTB2::__me_check_12()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_r_init_l83c17 && ((((DEF_WILL_FIRE_RL_action_l83c29 || DEF_WILL_FIRE_RL_action_f_update_l82c13) || DEF_WILL_FIRE_RL_action_r_init_l94c13) || DEF_WILL_FIRE_RL_action_l94c25) || DEF_WILL_FIRE_RL_action_l102c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_16);
}

void MOD_mkTB2::__me_check_13()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l83c29 && (((DEF_WILL_FIRE_RL_action_f_update_l82c13 || DEF_WILL_FIRE_RL_action_r_init_l94c13) || DEF_WILL_FIRE_RL_action_l94c25) || DEF_WILL_FIRE_RL_action_l102c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_17);
}

void MOD_mkTB2::__me_check_14()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_update_l82c13 && ((DEF_WILL_FIRE_RL_action_r_init_l94c13 || DEF_WILL_FIRE_RL_action_l94c25) || DEF_WILL_FIRE_RL_action_l102c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_18);
}

void MOD_mkTB2::__me_check_15()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_r_init_l94c13 && (DEF_WILL_FIRE_RL_action_l94c25 || DEF_WILL_FIRE_RL_action_l102c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_19);
}

void MOD_mkTB2::__me_check_16()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l94c25 && DEF_WILL_FIRE_RL_action_l102c13)
      dollar_error(sim_hdl, this, "s", &__str_literal_20);
}


/* Methods */


/* Reset routines */

void MOD_mkTB2::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_mistakes.reset_RST(ARG_rst_in);
  INST_jj_repeat_count.reset_RST(ARG_rst_in);
  INST_jj_2_repeat_count.reset_RST(ARG_rst_in);
  INST_jj_1_repeat_count.reset_RST(ARG_rst_in);
  INST_dut.reset_RST_N(ARG_rst_in);
  INST_counter.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTB2::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTB2::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_counter.dump_state(indent + 2u);
  INST_dut.dump_state(indent + 2u);
  INST_jj_1_repeat_count.dump_state(indent + 2u);
  INST_jj_2_repeat_count.dump_state(indent + 2u);
  INST_jj_repeat_count.dump_state(indent + 2u);
  INST_mistakes.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTB2::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 42u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_dut_pin__9___d40", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_init_l82c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_update_l82c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l102c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l60c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l61c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l68c16", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l69c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l75c25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l83c29", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l94c25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l75c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l83c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l94c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h71876", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_pin____d39", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_1_repeat_count_read____d72", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_2_repeat_count_read____d108", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_repeat_count_read____d50", 15u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mistakes_1_PLUS_1___d42", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "state_can_overlap__h6285", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h74735", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h74836", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h74895", 32u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_counter.dump_VCD_defs(num);
  num = INST_jj_1_repeat_count.dump_VCD_defs(num);
  num = INST_jj_2_repeat_count.dump_VCD_defs(num);
  num = INST_jj_repeat_count.dump_VCD_defs(num);
  num = INST_mistakes.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_dut.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTB2::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTB2 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTB2::vcd_defs(tVCDDumpType dt, MOD_mkTB2 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 15u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_NOT_dut_pin__9___d40) != DEF_NOT_dut_pin__9___d40)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_dut_pin__9___d40, 1u);
	backing.DEF_NOT_dut_pin__9___d40 = DEF_NOT_dut_pin__9___d40;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_init_l82c13) != DEF_WILL_FIRE_RL_action_f_init_l82c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_init_l82c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_init_l82c13 = DEF_WILL_FIRE_RL_action_f_init_l82c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_update_l82c13) != DEF_WILL_FIRE_RL_action_f_update_l82c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_update_l82c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_update_l82c13 = DEF_WILL_FIRE_RL_action_f_update_l82c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l102c13) != DEF_WILL_FIRE_RL_action_l102c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l102c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l102c13 = DEF_WILL_FIRE_RL_action_l102c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l60c13) != DEF_WILL_FIRE_RL_action_l60c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l60c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l60c13 = DEF_WILL_FIRE_RL_action_l60c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l61c13) != DEF_WILL_FIRE_RL_action_l61c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l61c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l61c13 = DEF_WILL_FIRE_RL_action_l61c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l68c16) != DEF_WILL_FIRE_RL_action_l68c16)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l68c16, 1u);
	backing.DEF_WILL_FIRE_RL_action_l68c16 = DEF_WILL_FIRE_RL_action_l68c16;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l69c13) != DEF_WILL_FIRE_RL_action_l69c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l69c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l69c13 = DEF_WILL_FIRE_RL_action_l69c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l75c25) != DEF_WILL_FIRE_RL_action_l75c25)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l75c25, 1u);
	backing.DEF_WILL_FIRE_RL_action_l75c25 = DEF_WILL_FIRE_RL_action_l75c25;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l83c29) != DEF_WILL_FIRE_RL_action_l83c29)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l83c29, 1u);
	backing.DEF_WILL_FIRE_RL_action_l83c29 = DEF_WILL_FIRE_RL_action_l83c29;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l94c25) != DEF_WILL_FIRE_RL_action_l94c25)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l94c25, 1u);
	backing.DEF_WILL_FIRE_RL_action_l94c25 = DEF_WILL_FIRE_RL_action_l94c25;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l75c13) != DEF_WILL_FIRE_RL_action_r_init_l75c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l75c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l75c13 = DEF_WILL_FIRE_RL_action_r_init_l75c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l83c17) != DEF_WILL_FIRE_RL_action_r_init_l83c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l83c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l83c17 = DEF_WILL_FIRE_RL_action_r_init_l83c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l94c13) != DEF_WILL_FIRE_RL_action_r_init_l94c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l94c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l94c13 = DEF_WILL_FIRE_RL_action_r_init_l94c13;
      }
      ++num;
      if ((backing.DEF_b__h71876) != DEF_b__h71876)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h71876, 32u);
	backing.DEF_b__h71876 = DEF_b__h71876;
      }
      ++num;
      if ((backing.DEF_dut_pin____d39) != DEF_dut_pin____d39)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_pin____d39, 1u);
	backing.DEF_dut_pin____d39 = DEF_dut_pin____d39;
      }
      ++num;
      if ((backing.DEF_jj_1_repeat_count_read____d72) != DEF_jj_1_repeat_count_read____d72)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_1_repeat_count_read____d72, 16u);
	backing.DEF_jj_1_repeat_count_read____d72 = DEF_jj_1_repeat_count_read____d72;
      }
      ++num;
      if ((backing.DEF_jj_2_repeat_count_read____d108) != DEF_jj_2_repeat_count_read____d108)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_2_repeat_count_read____d108, 16u);
	backing.DEF_jj_2_repeat_count_read____d108 = DEF_jj_2_repeat_count_read____d108;
      }
      ++num;
      if ((backing.DEF_jj_repeat_count_read____d50) != DEF_jj_repeat_count_read____d50)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_repeat_count_read____d50, 15u);
	backing.DEF_jj_repeat_count_read____d50 = DEF_jj_repeat_count_read____d50;
      }
      ++num;
      if ((backing.DEF_mistakes_1_PLUS_1___d42) != DEF_mistakes_1_PLUS_1___d42)
      {
	vcd_write_val(sim_hdl, num, DEF_mistakes_1_PLUS_1___d42, 32u);
	backing.DEF_mistakes_1_PLUS_1___d42 = DEF_mistakes_1_PLUS_1___d42;
      }
      ++num;
      if ((backing.DEF_state_can_overlap__h6285) != DEF_state_can_overlap__h6285)
      {
	vcd_write_val(sim_hdl, num, DEF_state_can_overlap__h6285, 1u);
	backing.DEF_state_can_overlap__h6285 = DEF_state_can_overlap__h6285;
      }
      ++num;
      if ((backing.DEF_v__h74735) != DEF_v__h74735)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h74735, 64u);
	backing.DEF_v__h74735 = DEF_v__h74735;
      }
      ++num;
      if ((backing.DEF_v__h74836) != DEF_v__h74836)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h74836, 64u);
	backing.DEF_v__h74836 = DEF_v__h74836;
      }
      ++num;
      if ((backing.DEF_x__h74895) != DEF_x__h74895)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h74895, 32u);
	backing.DEF_x__h74895 = DEF_x__h74895;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_NOT_dut_pin__9___d40, 1u);
      backing.DEF_NOT_dut_pin__9___d40 = DEF_NOT_dut_pin__9___d40;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_init_l82c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_init_l82c13 = DEF_WILL_FIRE_RL_action_f_init_l82c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_update_l82c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_update_l82c13 = DEF_WILL_FIRE_RL_action_f_update_l82c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l102c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l102c13 = DEF_WILL_FIRE_RL_action_l102c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l60c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l60c13 = DEF_WILL_FIRE_RL_action_l60c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l61c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l61c13 = DEF_WILL_FIRE_RL_action_l61c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l68c16, 1u);
      backing.DEF_WILL_FIRE_RL_action_l68c16 = DEF_WILL_FIRE_RL_action_l68c16;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l69c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l69c13 = DEF_WILL_FIRE_RL_action_l69c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l75c25, 1u);
      backing.DEF_WILL_FIRE_RL_action_l75c25 = DEF_WILL_FIRE_RL_action_l75c25;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l83c29, 1u);
      backing.DEF_WILL_FIRE_RL_action_l83c29 = DEF_WILL_FIRE_RL_action_l83c29;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l94c25, 1u);
      backing.DEF_WILL_FIRE_RL_action_l94c25 = DEF_WILL_FIRE_RL_action_l94c25;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l75c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l75c13 = DEF_WILL_FIRE_RL_action_r_init_l75c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l83c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l83c17 = DEF_WILL_FIRE_RL_action_r_init_l83c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l94c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l94c13 = DEF_WILL_FIRE_RL_action_r_init_l94c13;
      vcd_write_val(sim_hdl, num++, DEF_b__h71876, 32u);
      backing.DEF_b__h71876 = DEF_b__h71876;
      vcd_write_val(sim_hdl, num++, DEF_dut_pin____d39, 1u);
      backing.DEF_dut_pin____d39 = DEF_dut_pin____d39;
      vcd_write_val(sim_hdl, num++, DEF_jj_1_repeat_count_read____d72, 16u);
      backing.DEF_jj_1_repeat_count_read____d72 = DEF_jj_1_repeat_count_read____d72;
      vcd_write_val(sim_hdl, num++, DEF_jj_2_repeat_count_read____d108, 16u);
      backing.DEF_jj_2_repeat_count_read____d108 = DEF_jj_2_repeat_count_read____d108;
      vcd_write_val(sim_hdl, num++, DEF_jj_repeat_count_read____d50, 15u);
      backing.DEF_jj_repeat_count_read____d50 = DEF_jj_repeat_count_read____d50;
      vcd_write_val(sim_hdl, num++, DEF_mistakes_1_PLUS_1___d42, 32u);
      backing.DEF_mistakes_1_PLUS_1___d42 = DEF_mistakes_1_PLUS_1___d42;
      vcd_write_val(sim_hdl, num++, DEF_state_can_overlap__h6285, 1u);
      backing.DEF_state_can_overlap__h6285 = DEF_state_can_overlap__h6285;
      vcd_write_val(sim_hdl, num++, DEF_v__h74735, 64u);
      backing.DEF_v__h74735 = DEF_v__h74735;
      vcd_write_val(sim_hdl, num++, DEF_v__h74836, 64u);
      backing.DEF_v__h74836 = DEF_v__h74836;
      vcd_write_val(sim_hdl, num++, DEF_x__h74895, 32u);
      backing.DEF_x__h74895 = DEF_x__h74895;
    }
}

void MOD_mkTB2::vcd_prims(tVCDDumpType dt, MOD_mkTB2 &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_counter.dump_VCD(dt, backing.INST_counter);
  INST_jj_1_repeat_count.dump_VCD(dt, backing.INST_jj_1_repeat_count);
  INST_jj_2_repeat_count.dump_VCD(dt, backing.INST_jj_2_repeat_count);
  INST_jj_repeat_count.dump_VCD(dt, backing.INST_jj_repeat_count);
  INST_mistakes.dump_VCD(dt, backing.INST_mistakes);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}

void MOD_mkTB2::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTB2 &backing)
{
  INST_dut.dump_VCD(dt, levels, backing.INST_dut);
}
