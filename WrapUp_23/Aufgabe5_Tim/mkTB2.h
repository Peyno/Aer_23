/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Feb 13 17:46:46 CET 2024
 * 
 */

/* Generation options: */
#ifndef __mkTB2_h__
#define __mkTB2_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkTXSR.h"


/* Class declaration for the mkTB2 module */
class MOD_mkTB2 : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_abort;
  MOD_Reg<tUInt32> INST_counter;
  MOD_mkTXSR INST_dut;
  MOD_ConfigReg<tUInt32> INST_jj_1_repeat_count;
  MOD_ConfigReg<tUInt32> INST_jj_2_repeat_count;
  MOD_ConfigReg<tUInt32> INST_jj_repeat_count;
  MOD_Reg<tUInt32> INST_mistakes;
  MOD_Reg<tUInt8> INST_running;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
 
 /* Constructor */
 public:
  MOD_mkTB2(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_action_l102c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l94c25;
  tUInt8 DEF_WILL_FIRE_RL_action_r_init_l94c13;
  tUInt8 DEF_WILL_FIRE_RL_action_f_update_l82c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l83c29;
  tUInt8 DEF_WILL_FIRE_RL_action_r_init_l83c17;
  tUInt8 DEF_WILL_FIRE_RL_action_f_init_l82c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l75c25;
  tUInt8 DEF_WILL_FIRE_RL_action_r_init_l75c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l69c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l68c16;
  tUInt8 DEF_WILL_FIRE_RL_action_l61c13;
  tUInt8 DEF_WILL_FIRE_RL_action_l60c13;
  tUInt32 DEF_x__h74895;
  tUInt32 DEF_jj_2_repeat_count_read____d108;
  tUInt32 DEF_jj_1_repeat_count_read____d72;
  tUInt32 DEF_jj_repeat_count_read____d50;
  tUInt8 DEF_state_can_overlap__h6285;
  tUInt8 DEF_dut_pin____d39;
  tUInt8 DEF_NOT_dut_pin__9___d40;
 
 /* Local definitions */
 private:
  tUInt64 DEF_v__h74836;
  tUInt64 DEF_v__h74735;
  tUInt32 DEF_b__h71876;
  tUInt32 DEF_mistakes_1_PLUS_1___d42;
 
 /* Rules */
 public:
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_restart();
  void RL_action_l60c13();
  void RL_action_l61c13();
  void RL_action_l68c16();
  void RL_action_l69c13();
  void RL_action_r_init_l75c13();
  void RL_action_l75c25();
  void RL_action_f_init_l82c13();
  void RL_action_r_init_l83c17();
  void RL_action_l83c29();
  void RL_action_f_update_l82c13();
  void RL_action_r_init_l94c13();
  void RL_action_l94c25();
  void RL_action_l102c13();
  void RL_action_ovlp_r_update_l75c13();
  void RL_action_ovlp_r_update_l83c17();
  void RL_action_ovlp_r_update_l94c13();
  void RL_idle_l59c18();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void __me_check_5();
  void __me_check_6();
  void __me_check_7();
  void __me_check_8();
  void __me_check_9();
  void __me_check_10();
  void __me_check_11();
  void __me_check_12();
  void __me_check_13();
  void __me_check_14();
  void __me_check_15();
  void __me_check_16();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTB2 &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTB2 &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTB2 &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTB2 &backing);
};

#endif /* ifndef __mkTB2_h__ */
