/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Sat Feb 24 19:05:14 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTB.h"


/* Literal declarations */
static unsigned int const UWide_literal_128_h2000000040000000600000002_arr[] = { 2u, 6u, 4u, 2u };
static tUWide const UWide_literal_128_h2000000040000000600000002(128u,
								 UWide_literal_128_h2000000040000000600000002_arr);


/* String declarations */
static std::string const __str_literal_10(" Wetl", 5u);
static std::string const __str_literal_1("1", 1u);
static std::string const __str_literal_2("2", 1u);
static std::string const __str_literal_3("3", 1u);
static std::string const __str_literal_4("4", 1u);
static std::string const __str_literal_5("5", 1u);
static std::string const __str_literal_6("6", 1u);
static std::string const __str_literal_7("7", 1u);
static std::string const __str_literal_8("8", 1u);
static std::string const __str_literal_11("Ergebnis der Berechnung = %d", 28u);
static std::string const __str_literal_12("Error: \"Tb.bsv\", line 108, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dut_fsm_action_l108c9] and\n  [RL_dut_fsm_action_l117c9, RL_dut_fsm_action_l123c9,\n  RL_dut_fsm_action_l130c9, RL_dut_fsm_action_l137c9,\n  RL_dut_fsm_action_l144c9, RL_dut_fsm_action_l151c9,\n  RL_dut_fsm_action_l157c13, RL_dut_fsm_action_l159c13,\n  RL_dut_fsm_action_l160c13] ) fired in the same clock cycle.\n",
					  402u);
static std::string const __str_literal_13("Error: \"Tb.bsv\", line 117, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dut_fsm_action_l117c9] and\n  [RL_dut_fsm_action_l123c9, RL_dut_fsm_action_l130c9,\n  RL_dut_fsm_action_l137c9, RL_dut_fsm_action_l144c9,\n  RL_dut_fsm_action_l151c9, RL_dut_fsm_action_l157c13,\n  RL_dut_fsm_action_l159c13, RL_dut_fsm_action_l160c13] ) fired in the same\n  clock cycle.\n",
					  376u);
static std::string const __str_literal_14("Error: \"Tb.bsv\", line 123, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dut_fsm_action_l123c9] and\n  [RL_dut_fsm_action_l130c9, RL_dut_fsm_action_l137c9,\n  RL_dut_fsm_action_l144c9, RL_dut_fsm_action_l151c9,\n  RL_dut_fsm_action_l157c13, RL_dut_fsm_action_l159c13,\n  RL_dut_fsm_action_l160c13] ) fired in the same clock cycle.\n",
					  348u);
static std::string const __str_literal_15("Error: \"Tb.bsv\", line 130, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dut_fsm_action_l130c9] and\n  [RL_dut_fsm_action_l137c9, RL_dut_fsm_action_l144c9,\n  RL_dut_fsm_action_l151c9, RL_dut_fsm_action_l157c13,\n  RL_dut_fsm_action_l159c13, RL_dut_fsm_action_l160c13] ) fired in the same\n  clock cycle.\n",
					  322u);
static std::string const __str_literal_16("Error: \"Tb.bsv\", line 137, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dut_fsm_action_l137c9] and\n  [RL_dut_fsm_action_l144c9, RL_dut_fsm_action_l151c9,\n  RL_dut_fsm_action_l157c13, RL_dut_fsm_action_l159c13,\n  RL_dut_fsm_action_l160c13] ) fired in the same clock cycle.\n",
					  294u);
static std::string const __str_literal_17("Error: \"Tb.bsv\", line 144, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dut_fsm_action_l144c9] and\n  [RL_dut_fsm_action_l151c9, RL_dut_fsm_action_l157c13,\n  RL_dut_fsm_action_l159c13, RL_dut_fsm_action_l160c13] ) fired in the same\n  clock cycle.\n",
					  268u);
static std::string const __str_literal_18("Error: \"Tb.bsv\", line 151, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dut_fsm_action_l151c9] and\n  [RL_dut_fsm_action_l157c13, RL_dut_fsm_action_l159c13,\n  RL_dut_fsm_action_l160c13] ) fired in the same clock cycle.\n",
					  240u);
static std::string const __str_literal_19("Error: \"Tb.bsv\", line 157, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dut_fsm_action_l157c13] and\n  [RL_dut_fsm_action_l159c13, RL_dut_fsm_action_l160c13] ) fired in the same\n  clock cycle.\n",
					  215u);
static std::string const __str_literal_20("Error: \"Tb.bsv\", line 159, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_dut_fsm_action_l159c13] and\n  [RL_dut_fsm_action_l160c13] ) fired in the same clock cycle.\n",
					  186u);
static std::string const __str_literal_21("Error: \"Tb.bsv\", line 246, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l246c12] and\n  [RL_action_l247c1, RL_action_l248c9] ) fired in the same clock cycle.\n",
					  187u);
static std::string const __str_literal_22("Error: \"Tb.bsv\", line 247, column 1: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l247c1] and\n  [RL_action_l248c9] ) fired in the same clock cycle.\n",
					  167u);
static std::string const __str_literal_9("Hallo", 5u);


/* Constructor */
MOD_mkTB::MOD_mkTB(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_dut_adder_in(simHdl, "dut_adder_in", this, 64u, 2u, (tUInt8)1u, 0u),
    INST_dut_adder_out(simHdl, "dut_adder_out", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_fsm_abort(simHdl, "dut_fsm_abort", this, 1u, (tUInt8)0u),
    INST_dut_fsm_start_reg(simHdl, "dut_fsm_start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_fsm_start_reg_1(simHdl, "dut_fsm_start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_fsm_start_reg_2(simHdl, "dut_fsm_start_reg_2", this, 1u, (tUInt8)0u),
    INST_dut_fsm_start_wire(simHdl, "dut_fsm_start_wire", this, 1u, (tUInt8)0u),
    INST_dut_fsm_state_can_overlap(simHdl,
				   "dut_fsm_state_can_overlap",
				   this,
				   1u,
				   (tUInt8)1u,
				   (tUInt8)0u),
    INST_dut_fsm_state_fired(simHdl, "dut_fsm_state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_fsm_state_fired_1(simHdl, "dut_fsm_state_fired_1", this, 1u, (tUInt8)0u),
    INST_dut_fsm_state_mkFSMstate(simHdl, "dut_fsm_state_mkFSMstate", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_fsm_state_overlap_pw(simHdl, "dut_fsm_state_overlap_pw", this, 0u),
    INST_dut_fsm_state_set_pw(simHdl, "dut_fsm_state_set_pw", this, 0u),
    INST_dut_incoming(simHdl, "dut_incoming", this, 128u, 2u, (tUInt8)1u, 0u),
    INST_dut_mul_in(simHdl, "dut_mul_in", this, 64u, 2u, (tUInt8)1u, 0u),
    INST_dut_mul_out(simHdl, "dut_mul_out", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_rega(simHdl, "dut_rega", this, 32u),
    INST_dut_regb(simHdl, "dut_regb", this, 32u),
    INST_dut_regc(simHdl, "dut_regc", this, 32u),
    INST_dut_regd(simHdl, "dut_regd", this, 32u),
    INST_dut_resultab(simHdl, "dut_resultab", this, 32u),
    INST_dut_resultcd(simHdl, "dut_resultcd", this, 32u),
    INST_dut_resultmul(simHdl, "dut_resultmul", this, 32u),
    INST_dut_sqrt_in(simHdl, "dut_sqrt_in", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_sqrt_out(simHdl, "dut_sqrt_out", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_dut_incoming_first____d58(128u)
{
  symbol_count = 94u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTB::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_10", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_11", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_12", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_13", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_14", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_15", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_16", SYM_RULE);
  init_symbol(&symbols[7u], "__me_check_26", SYM_RULE);
  init_symbol(&symbols[8u], "__me_check_27", SYM_RULE);
  init_symbol(&symbols[9u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[10u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[11u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[12u], "dut_adder_in", SYM_MODULE, &INST_dut_adder_in);
  init_symbol(&symbols[13u], "dut_adder_out", SYM_MODULE, &INST_dut_adder_out);
  init_symbol(&symbols[14u], "dut_fsm_abort", SYM_MODULE, &INST_dut_fsm_abort);
  init_symbol(&symbols[15u], "dut_fsm_start_reg", SYM_MODULE, &INST_dut_fsm_start_reg);
  init_symbol(&symbols[16u], "dut_fsm_start_reg_1", SYM_MODULE, &INST_dut_fsm_start_reg_1);
  init_symbol(&symbols[17u], "dut_fsm_start_reg_2", SYM_MODULE, &INST_dut_fsm_start_reg_2);
  init_symbol(&symbols[18u], "dut_fsm_start_wire", SYM_MODULE, &INST_dut_fsm_start_wire);
  init_symbol(&symbols[19u],
	      "dut_fsm_state_can_overlap",
	      SYM_MODULE,
	      &INST_dut_fsm_state_can_overlap);
  init_symbol(&symbols[20u], "dut_fsm_state_fired", SYM_MODULE, &INST_dut_fsm_state_fired);
  init_symbol(&symbols[21u], "dut_fsm_state_fired_1", SYM_MODULE, &INST_dut_fsm_state_fired_1);
  init_symbol(&symbols[22u], "dut_fsm_state_mkFSMstate", SYM_MODULE, &INST_dut_fsm_state_mkFSMstate);
  init_symbol(&symbols[23u], "dut_fsm_state_overlap_pw", SYM_MODULE, &INST_dut_fsm_state_overlap_pw);
  init_symbol(&symbols[24u], "dut_fsm_state_set_pw", SYM_MODULE, &INST_dut_fsm_state_set_pw);
  init_symbol(&symbols[25u], "dut_incoming", SYM_MODULE, &INST_dut_incoming);
  init_symbol(&symbols[26u], "dut_mul_in", SYM_MODULE, &INST_dut_mul_in);
  init_symbol(&symbols[27u], "dut_mul_out", SYM_MODULE, &INST_dut_mul_out);
  init_symbol(&symbols[28u], "dut_rega", SYM_MODULE, &INST_dut_rega);
  init_symbol(&symbols[29u], "dut_regb", SYM_MODULE, &INST_dut_regb);
  init_symbol(&symbols[30u], "dut_regc", SYM_MODULE, &INST_dut_regc);
  init_symbol(&symbols[31u], "dut_regd", SYM_MODULE, &INST_dut_regd);
  init_symbol(&symbols[32u], "dut_resultab", SYM_MODULE, &INST_dut_resultab);
  init_symbol(&symbols[33u], "dut_resultcd", SYM_MODULE, &INST_dut_resultcd);
  init_symbol(&symbols[34u], "dut_resultmul", SYM_MODULE, &INST_dut_resultmul);
  init_symbol(&symbols[35u], "dut_sqrt_in", SYM_MODULE, &INST_dut_sqrt_in);
  init_symbol(&symbols[36u], "dut_sqrt_out", SYM_MODULE, &INST_dut_sqrt_out);
  init_symbol(&symbols[37u], "RL_action_l246c12", SYM_RULE);
  init_symbol(&symbols[38u], "RL_action_l247c1", SYM_RULE);
  init_symbol(&symbols[39u], "RL_action_l248c9", SYM_RULE);
  init_symbol(&symbols[40u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[41u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[42u], "RL_dut_adder_r1", SYM_RULE);
  init_symbol(&symbols[43u], "RL_dut_fsm_action_l108c9", SYM_RULE);
  init_symbol(&symbols[44u], "RL_dut_fsm_action_l117c9", SYM_RULE);
  init_symbol(&symbols[45u], "RL_dut_fsm_action_l123c9", SYM_RULE);
  init_symbol(&symbols[46u], "RL_dut_fsm_action_l130c9", SYM_RULE);
  init_symbol(&symbols[47u], "RL_dut_fsm_action_l137c9", SYM_RULE);
  init_symbol(&symbols[48u], "RL_dut_fsm_action_l144c9", SYM_RULE);
  init_symbol(&symbols[49u], "RL_dut_fsm_action_l151c9", SYM_RULE);
  init_symbol(&symbols[50u], "RL_dut_fsm_action_l157c13", SYM_RULE);
  init_symbol(&symbols[51u], "RL_dut_fsm_action_l159c13", SYM_RULE);
  init_symbol(&symbols[52u], "RL_dut_fsm_action_l160c13", SYM_RULE);
  init_symbol(&symbols[53u], "RL_dut_fsm_fsm_start", SYM_RULE);
  init_symbol(&symbols[54u], "RL_dut_fsm_idle_l107c14", SYM_RULE);
  init_symbol(&symbols[55u], "RL_dut_fsm_restart", SYM_RULE);
  init_symbol(&symbols[56u], "RL_dut_fsm_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[57u], "RL_dut_fsm_state_every", SYM_RULE);
  init_symbol(&symbols[58u], "RL_dut_fsm_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[59u], "RL_dut_fsm_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[60u], "RL_dut_mul_r1", SYM_RULE);
  init_symbol(&symbols[61u], "RL_dut_rstart", SYM_RULE);
  init_symbol(&symbols[62u], "RL_dut_sqrt_r1", SYM_RULE);
  init_symbol(&symbols[63u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[64u], "RL_idle_l244c17", SYM_RULE);
  init_symbol(&symbols[65u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[66u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[67u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[68u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[69u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[70u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[71u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[72u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[73u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[74u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[75u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[76u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[77u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[78u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[79u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[80u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[81u],
	      "WILL_FIRE_RL_action_l246c12",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l246c12,
	      1u);
  init_symbol(&symbols[82u],
	      "WILL_FIRE_RL_action_l247c1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l247c1,
	      1u);
  init_symbol(&symbols[83u],
	      "WILL_FIRE_RL_action_l248c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l248c9,
	      1u);
  init_symbol(&symbols[84u],
	      "WILL_FIRE_RL_dut_fsm_action_l108c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_dut_fsm_action_l108c9,
	      1u);
  init_symbol(&symbols[85u],
	      "WILL_FIRE_RL_dut_fsm_action_l117c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_dut_fsm_action_l117c9,
	      1u);
  init_symbol(&symbols[86u],
	      "WILL_FIRE_RL_dut_fsm_action_l123c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_dut_fsm_action_l123c9,
	      1u);
  init_symbol(&symbols[87u],
	      "WILL_FIRE_RL_dut_fsm_action_l130c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_dut_fsm_action_l130c9,
	      1u);
  init_symbol(&symbols[88u],
	      "WILL_FIRE_RL_dut_fsm_action_l137c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_dut_fsm_action_l137c9,
	      1u);
  init_symbol(&symbols[89u],
	      "WILL_FIRE_RL_dut_fsm_action_l144c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_dut_fsm_action_l144c9,
	      1u);
  init_symbol(&symbols[90u],
	      "WILL_FIRE_RL_dut_fsm_action_l151c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_dut_fsm_action_l151c9,
	      1u);
  init_symbol(&symbols[91u],
	      "WILL_FIRE_RL_dut_fsm_action_l157c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_dut_fsm_action_l157c13,
	      1u);
  init_symbol(&symbols[92u],
	      "WILL_FIRE_RL_dut_fsm_action_l159c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_dut_fsm_action_l159c13,
	      1u);
  init_symbol(&symbols[93u],
	      "WILL_FIRE_RL_dut_fsm_action_l160c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_dut_fsm_action_l160c13,
	      1u);
}


/* Rule actions */

void MOD_mkTB::RL_dut_adder_r1()
{
  tUInt32 DEF_dut_adder_in_first_BITS_63_TO_32_PLUS_dut_adde_ETC___d7;
  tUInt64 DEF_dut_adder_in_first____d4;
  DEF_dut_adder_in_first____d4 = INST_dut_adder_in.METH_first();
  DEF_dut_adder_in_first_BITS_63_TO_32_PLUS_dut_adde_ETC___d7 = ((tUInt32)(DEF_dut_adder_in_first____d4 >> 32u)) + ((tUInt32)(DEF_dut_adder_in_first____d4));
  INST_dut_adder_in.METH_deq();
  INST_dut_adder_out.METH_enq(DEF_dut_adder_in_first_BITS_63_TO_32_PLUS_dut_adde_ETC___d7);
}

void MOD_mkTB::RL_dut_mul_r1()
{
  tUInt32 DEF_dut_mul_in_first__1_BITS_63_TO_32_2_PLUS_dut_m_ETC___d14;
  tUInt64 DEF_dut_mul_in_first____d11;
  DEF_dut_mul_in_first____d11 = INST_dut_mul_in.METH_first();
  DEF_dut_mul_in_first__1_BITS_63_TO_32_2_PLUS_dut_m_ETC___d14 = ((tUInt32)(DEF_dut_mul_in_first____d11 >> 32u)) + ((tUInt32)(DEF_dut_mul_in_first____d11));
  INST_dut_mul_in.METH_deq();
  INST_dut_mul_out.METH_enq(DEF_dut_mul_in_first__1_BITS_63_TO_32_2_PLUS_dut_m_ETC___d14);
}

void MOD_mkTB::RL_dut_sqrt_r1()
{
  tUInt32 DEF_dut_sqrt_in_first__8_PLUS_2___d19;
  DEF_dut_sqrt_in_first__8_PLUS_2___d19 = INST_dut_sqrt_in.METH_first() + 2u;
  INST_dut_sqrt_in.METH_deq();
  INST_dut_sqrt_out.METH_enq(DEF_dut_sqrt_in_first__8_PLUS_2___d19);
}

void MOD_mkTB::RL_dut_fsm_start_reg__dreg_update()
{
  tUInt8 DEF_dut_fsm_start_reg_2_whas__0_AND_dut_fsm_start__ETC___d22;
  DEF_dut_fsm_start_reg_2_whas__0_AND_dut_fsm_start__ETC___d22 = INST_dut_fsm_start_reg_2.METH_whas() && INST_dut_fsm_start_reg_2.METH_wget();
  INST_dut_fsm_start_reg_1.METH_write(DEF_dut_fsm_start_reg_2_whas__0_AND_dut_fsm_start__ETC___d22);
}

void MOD_mkTB::RL_dut_fsm_state_handle_abort()
{
  INST_dut_fsm_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTB::RL_dut_fsm_state_fired__dreg_update()
{
  tUInt8 DEF_dut_fsm_state_fired_1_whas__2_AND_dut_fsm_stat_ETC___d34;
  DEF_dut_fsm_state_fired_1_whas__2_AND_dut_fsm_stat_ETC___d34 = INST_dut_fsm_state_fired_1.METH_whas() && INST_dut_fsm_state_fired_1.METH_wget();
  INST_dut_fsm_state_fired.METH_write(DEF_dut_fsm_state_fired_1_whas__2_AND_dut_fsm_stat_ETC___d34);
}

void MOD_mkTB::RL_dut_fsm_state_every()
{
  tUInt8 DEF_dut_fsm_state_set_pw_whas__5_OR_NOT_dut_fsm_st_ETC___d40;
  tUInt8 DEF_dut_fsm_state_can_overlap__h3720;
  DEF_dut_fsm_state_can_overlap__h3720 = INST_dut_fsm_state_can_overlap.METH_read();
  DEF_dut_fsm_state_set_pw_whas__5_OR_NOT_dut_fsm_st_ETC___d40 = INST_dut_fsm_state_set_pw.METH_whas() || (!INST_dut_fsm_state_overlap_pw.METH_whas() && DEF_dut_fsm_state_can_overlap__h3720);
  INST_dut_fsm_state_can_overlap.METH_write(DEF_dut_fsm_state_set_pw_whas__5_OR_NOT_dut_fsm_st_ETC___d40);
}

void MOD_mkTB::RL_dut_fsm_restart()
{
  INST_dut_fsm_start_wire.METH_wset((tUInt8)1u);
  INST_dut_fsm_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTB::RL_dut_fsm_action_l108c9()
{
  tUInt32 DEF_dut_incoming_first__8_BITS_31_TO_0___d62;
  tUInt32 DEF_dut_incoming_first__8_BITS_63_TO_32___d61;
  tUInt32 DEF_dut_incoming_first__8_BITS_95_TO_64___d60;
  tUInt32 DEF_dut_incoming_first__8_BITS_127_TO_96___d59;
  DEF_dut_incoming_first____d58 = INST_dut_incoming.METH_first();
  DEF_dut_incoming_first__8_BITS_127_TO_96___d59 = DEF_dut_incoming_first____d58.get_whole_word(3u);
  DEF_dut_incoming_first__8_BITS_95_TO_64___d60 = DEF_dut_incoming_first____d58.get_whole_word(2u);
  DEF_dut_incoming_first__8_BITS_63_TO_32___d61 = DEF_dut_incoming_first____d58.get_whole_word(1u);
  DEF_dut_incoming_first__8_BITS_31_TO_0___d62 = DEF_dut_incoming_first____d58.get_whole_word(0u);
  INST_dut_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_dut_fsm_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_dut_fsm_state_set_pw.METH_wset();
  INST_dut_incoming.METH_deq();
  INST_dut_rega.METH_write(DEF_dut_incoming_first__8_BITS_127_TO_96___d59);
  INST_dut_regb.METH_write(DEF_dut_incoming_first__8_BITS_95_TO_64___d60);
  INST_dut_regc.METH_write(DEF_dut_incoming_first__8_BITS_63_TO_32___d61);
  INST_dut_regd.METH_write(DEF_dut_incoming_first__8_BITS_31_TO_0___d62);
}

void MOD_mkTB::RL_dut_fsm_action_l117c9()
{
  tUInt64 DEF_dut_rega_7_CONCAT_dut_regb_8___d69;
  tUInt32 DEF_b__h17627;
  tUInt32 DEF_b__h17629;
  DEF_b__h17629 = INST_dut_regb.METH_read();
  DEF_b__h17627 = INST_dut_rega.METH_read();
  DEF_dut_rega_7_CONCAT_dut_regb_8___d69 = (((tUInt64)(DEF_b__h17627)) << 32u) | (tUInt64)(DEF_b__h17629);
  INST_dut_fsm_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_dut_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_dut_fsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
  INST_dut_adder_in.METH_enq(DEF_dut_rega_7_CONCAT_dut_regb_8___d69);
}

void MOD_mkTB::RL_dut_fsm_action_l123c9()
{
  DEF_dut_adder_out_first____d74 = INST_dut_adder_out.METH_first();
  INST_dut_fsm_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_dut_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_dut_fsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
  INST_dut_resultab.METH_write(DEF_dut_adder_out_first____d74);
  INST_dut_adder_out.METH_deq();
}

void MOD_mkTB::RL_dut_fsm_action_l130c9()
{
  tUInt64 DEF_dut_regc_8_CONCAT_NEG_dut_regd_9_0___d81;
  tUInt32 DEF_b__h18130;
  tUInt32 DEF_b__h18133;
  DEF_b__h18133 = INST_dut_regd.METH_read();
  DEF_b__h18130 = INST_dut_regc.METH_read();
  DEF_dut_regc_8_CONCAT_NEG_dut_regd_9_0___d81 = (((tUInt64)(DEF_b__h18130)) << 32u) | (tUInt64)(-DEF_b__h18133);
  INST_dut_fsm_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_dut_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_dut_fsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_3);
  INST_dut_adder_in.METH_enq(DEF_dut_regc_8_CONCAT_NEG_dut_regd_9_0___d81);
}

void MOD_mkTB::RL_dut_fsm_action_l137c9()
{
  DEF_dut_adder_out_first____d74 = INST_dut_adder_out.METH_first();
  INST_dut_fsm_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_dut_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_dut_fsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_4);
  INST_dut_resultcd.METH_write(DEF_dut_adder_out_first____d74);
  INST_dut_adder_out.METH_deq();
}

void MOD_mkTB::RL_dut_fsm_action_l144c9()
{
  tUInt64 DEF_dut_resultab_9_CONCAT_dut_resultcd_0___d91;
  tUInt32 DEF_b__h18658;
  tUInt32 DEF_b__h18660;
  DEF_b__h18660 = INST_dut_resultcd.METH_read();
  DEF_b__h18658 = INST_dut_resultab.METH_read();
  DEF_dut_resultab_9_CONCAT_dut_resultcd_0___d91 = (((tUInt64)(DEF_b__h18658)) << 32u) | (tUInt64)(DEF_b__h18660);
  INST_dut_fsm_state_mkFSMstate.METH_write((tUInt8)6u);
  INST_dut_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_dut_fsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_5);
  INST_dut_mul_in.METH_enq(DEF_dut_resultab_9_CONCAT_dut_resultcd_0___d91);
}

void MOD_mkTB::RL_dut_fsm_action_l151c9()
{
  tUInt32 DEF_dut_mul_out_first____d96;
  DEF_dut_mul_out_first____d96 = INST_dut_mul_out.METH_first();
  INST_dut_fsm_state_mkFSMstate.METH_write((tUInt8)7u);
  INST_dut_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_dut_fsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_6);
  INST_dut_resultmul.METH_write(DEF_dut_mul_out_first____d96);
  INST_dut_mul_out.METH_deq();
}

void MOD_mkTB::RL_dut_fsm_action_l157c13()
{
  INST_dut_fsm_state_mkFSMstate.METH_write((tUInt8)8u);
  INST_dut_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_dut_fsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_7);
}

void MOD_mkTB::RL_dut_fsm_action_l159c13()
{
  tUInt32 DEF_dut_resultmul_03_PLUS_16___d104;
  tUInt32 DEF_b__h19437;
  DEF_b__h19437 = INST_dut_resultmul.METH_read();
  DEF_dut_resultmul_03_PLUS_16___d104 = DEF_b__h19437 + 16u;
  INST_dut_fsm_state_mkFSMstate.METH_write((tUInt8)9u);
  INST_dut_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_dut_fsm_state_set_pw.METH_wset();
  INST_dut_sqrt_in.METH_enq(DEF_dut_resultmul_03_PLUS_16___d104);
}

void MOD_mkTB::RL_dut_fsm_action_l160c13()
{
  INST_dut_fsm_state_mkFSMstate.METH_write((tUInt8)10u);
  INST_dut_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_dut_fsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_8);
}

void MOD_mkTB::RL_dut_fsm_idle_l107c14()
{
  INST_dut_fsm_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_dut_fsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_dut_fsm_state_set_pw.METH_wset();
}

void MOD_mkTB::RL_dut_fsm_fsm_start()
{
  INST_dut_fsm_start_wire.METH_wset((tUInt8)1u);
  INST_dut_fsm_start_reg_2.METH_wset((tUInt8)1u);
  INST_dut_fsm_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTB::RL_dut_rstart()
{
  INST_dut_fsm_start_reg.METH_write((tUInt8)1u);
}

void MOD_mkTB::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas__16_AND_start_reg_2_wget__17___d118;
  DEF_start_reg_2_whas__16_AND_start_reg_2_wget__17___d118 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas__16_AND_start_reg_2_wget__17___d118);
}

void MOD_mkTB::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTB::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__28_AND_state_fired_1_wget__29___d130;
  DEF_state_fired_1_whas__28_AND_state_fired_1_wget__29___d130 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__28_AND_state_fired_1_wget__29___d130);
}

void MOD_mkTB::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__31_OR_NOT_state_overlap_pw__ETC___d136;
  tUInt8 DEF_state_can_overlap__h21435;
  DEF_state_can_overlap__h21435 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__31_OR_NOT_state_overlap_pw__ETC___d136 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h21435);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__31_OR_NOT_state_overlap_pw__ETC___d136);
}

void MOD_mkTB::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTB::RL_action_l246c12()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_dut_incoming.METH_enq(UWide_literal_128_h2000000040000000600000002);
}

void MOD_mkTB::RL_action_l247c1()
{
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_9);
}

void MOD_mkTB::RL_action_l248c9()
{
  tUInt32 DEF_signed_dut_sqrt_out_first__60___d161;
  DEF_signed_dut_sqrt_out_first__60___d161 = INST_dut_sqrt_out.METH_first();
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_10);
  INST_dut_sqrt_out.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_11, DEF_signed_dut_sqrt_out_first__60___d161);
}

void MOD_mkTB::RL_idle_l244c17()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTB::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTB::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTB::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTB::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_dut_fsm_action_l108c9 && ((((((((DEF_WILL_FIRE_RL_dut_fsm_action_l117c9 || DEF_WILL_FIRE_RL_dut_fsm_action_l123c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l130c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l137c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l144c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l151c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l157c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l159c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l160c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_12);
}

void MOD_mkTB::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_dut_fsm_action_l117c9 && (((((((DEF_WILL_FIRE_RL_dut_fsm_action_l123c9 || DEF_WILL_FIRE_RL_dut_fsm_action_l130c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l137c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l144c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l151c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l157c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l159c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l160c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_13);
}

void MOD_mkTB::__me_check_10()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_dut_fsm_action_l123c9 && ((((((DEF_WILL_FIRE_RL_dut_fsm_action_l130c9 || DEF_WILL_FIRE_RL_dut_fsm_action_l137c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l144c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l151c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l157c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l159c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l160c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_14);
}

void MOD_mkTB::__me_check_11()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_dut_fsm_action_l130c9 && (((((DEF_WILL_FIRE_RL_dut_fsm_action_l137c9 || DEF_WILL_FIRE_RL_dut_fsm_action_l144c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l151c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l157c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l159c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l160c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_15);
}

void MOD_mkTB::__me_check_12()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_dut_fsm_action_l137c9 && ((((DEF_WILL_FIRE_RL_dut_fsm_action_l144c9 || DEF_WILL_FIRE_RL_dut_fsm_action_l151c9) || DEF_WILL_FIRE_RL_dut_fsm_action_l157c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l159c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l160c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_16);
}

void MOD_mkTB::__me_check_13()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_dut_fsm_action_l144c9 && (((DEF_WILL_FIRE_RL_dut_fsm_action_l151c9 || DEF_WILL_FIRE_RL_dut_fsm_action_l157c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l159c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l160c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_17);
}

void MOD_mkTB::__me_check_14()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_dut_fsm_action_l151c9 && ((DEF_WILL_FIRE_RL_dut_fsm_action_l157c13 || DEF_WILL_FIRE_RL_dut_fsm_action_l159c13) || DEF_WILL_FIRE_RL_dut_fsm_action_l160c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_18);
}

void MOD_mkTB::__me_check_15()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_dut_fsm_action_l157c13 && (DEF_WILL_FIRE_RL_dut_fsm_action_l159c13 || DEF_WILL_FIRE_RL_dut_fsm_action_l160c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_19);
}

void MOD_mkTB::__me_check_16()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_dut_fsm_action_l159c13 && DEF_WILL_FIRE_RL_dut_fsm_action_l160c13)
      dollar_error(sim_hdl, this, "s", &__str_literal_20);
}

void MOD_mkTB::__me_check_26()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l246c12 && (DEF_WILL_FIRE_RL_action_l247c1 || DEF_WILL_FIRE_RL_action_l248c9))
      dollar_error(sim_hdl, this, "s", &__str_literal_21);
}

void MOD_mkTB::__me_check_27()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l247c1 && DEF_WILL_FIRE_RL_action_l248c9)
      dollar_error(sim_hdl, this, "s", &__str_literal_22);
}


/* Methods */


/* Reset routines */

void MOD_mkTB::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_dut_sqrt_out.reset_RST(ARG_rst_in);
  INST_dut_sqrt_in.reset_RST(ARG_rst_in);
  INST_dut_mul_out.reset_RST(ARG_rst_in);
  INST_dut_mul_in.reset_RST(ARG_rst_in);
  INST_dut_incoming.reset_RST(ARG_rst_in);
  INST_dut_fsm_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_dut_fsm_state_fired.reset_RST(ARG_rst_in);
  INST_dut_fsm_state_can_overlap.reset_RST(ARG_rst_in);
  INST_dut_fsm_start_reg_1.reset_RST(ARG_rst_in);
  INST_dut_fsm_start_reg.reset_RST(ARG_rst_in);
  INST_dut_adder_out.reset_RST(ARG_rst_in);
  INST_dut_adder_in.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTB::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTB::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_dut_adder_in.dump_state(indent + 2u);
  INST_dut_adder_out.dump_state(indent + 2u);
  INST_dut_fsm_abort.dump_state(indent + 2u);
  INST_dut_fsm_start_reg.dump_state(indent + 2u);
  INST_dut_fsm_start_reg_1.dump_state(indent + 2u);
  INST_dut_fsm_start_reg_2.dump_state(indent + 2u);
  INST_dut_fsm_start_wire.dump_state(indent + 2u);
  INST_dut_fsm_state_can_overlap.dump_state(indent + 2u);
  INST_dut_fsm_state_fired.dump_state(indent + 2u);
  INST_dut_fsm_state_fired_1.dump_state(indent + 2u);
  INST_dut_fsm_state_mkFSMstate.dump_state(indent + 2u);
  INST_dut_fsm_state_overlap_pw.dump_state(indent + 2u);
  INST_dut_fsm_state_set_pw.dump_state(indent + 2u);
  INST_dut_incoming.dump_state(indent + 2u);
  INST_dut_mul_in.dump_state(indent + 2u);
  INST_dut_mul_out.dump_state(indent + 2u);
  INST_dut_rega.dump_state(indent + 2u);
  INST_dut_regb.dump_state(indent + 2u);
  INST_dut_regc.dump_state(indent + 2u);
  INST_dut_regd.dump_state(indent + 2u);
  INST_dut_resultab.dump_state(indent + 2u);
  INST_dut_resultcd.dump_state(indent + 2u);
  INST_dut_resultmul.dump_state(indent + 2u);
  INST_dut_sqrt_in.dump_state(indent + 2u);
  INST_dut_sqrt_out.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTB::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 53u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l246c12", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l247c1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l248c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_dut_fsm_action_l108c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_dut_fsm_action_l117c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_dut_fsm_action_l123c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_dut_fsm_action_l130c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_dut_fsm_action_l137c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_dut_fsm_action_l144c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_dut_fsm_action_l151c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_dut_fsm_action_l157c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_dut_fsm_action_l159c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_dut_fsm_action_l160c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_adder_out_first____d74", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_incoming_first____d58", 128u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_dut_adder_in.dump_VCD_defs(num);
  num = INST_dut_adder_out.dump_VCD_defs(num);
  num = INST_dut_fsm_abort.dump_VCD_defs(num);
  num = INST_dut_fsm_start_reg.dump_VCD_defs(num);
  num = INST_dut_fsm_start_reg_1.dump_VCD_defs(num);
  num = INST_dut_fsm_start_reg_2.dump_VCD_defs(num);
  num = INST_dut_fsm_start_wire.dump_VCD_defs(num);
  num = INST_dut_fsm_state_can_overlap.dump_VCD_defs(num);
  num = INST_dut_fsm_state_fired.dump_VCD_defs(num);
  num = INST_dut_fsm_state_fired_1.dump_VCD_defs(num);
  num = INST_dut_fsm_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_dut_fsm_state_overlap_pw.dump_VCD_defs(num);
  num = INST_dut_fsm_state_set_pw.dump_VCD_defs(num);
  num = INST_dut_incoming.dump_VCD_defs(num);
  num = INST_dut_mul_in.dump_VCD_defs(num);
  num = INST_dut_mul_out.dump_VCD_defs(num);
  num = INST_dut_rega.dump_VCD_defs(num);
  num = INST_dut_regb.dump_VCD_defs(num);
  num = INST_dut_regc.dump_VCD_defs(num);
  num = INST_dut_regd.dump_VCD_defs(num);
  num = INST_dut_resultab.dump_VCD_defs(num);
  num = INST_dut_resultcd.dump_VCD_defs(num);
  num = INST_dut_resultmul.dump_VCD_defs(num);
  num = INST_dut_sqrt_in.dump_VCD_defs(num);
  num = INST_dut_sqrt_out.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTB::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTB &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTB::vcd_defs(tVCDDumpType dt, MOD_mkTB &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 128u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l246c12) != DEF_WILL_FIRE_RL_action_l246c12)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l246c12, 1u);
	backing.DEF_WILL_FIRE_RL_action_l246c12 = DEF_WILL_FIRE_RL_action_l246c12;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l247c1) != DEF_WILL_FIRE_RL_action_l247c1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l247c1, 1u);
	backing.DEF_WILL_FIRE_RL_action_l247c1 = DEF_WILL_FIRE_RL_action_l247c1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l248c9) != DEF_WILL_FIRE_RL_action_l248c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l248c9, 1u);
	backing.DEF_WILL_FIRE_RL_action_l248c9 = DEF_WILL_FIRE_RL_action_l248c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_dut_fsm_action_l108c9) != DEF_WILL_FIRE_RL_dut_fsm_action_l108c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_dut_fsm_action_l108c9, 1u);
	backing.DEF_WILL_FIRE_RL_dut_fsm_action_l108c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l108c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_dut_fsm_action_l117c9) != DEF_WILL_FIRE_RL_dut_fsm_action_l117c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_dut_fsm_action_l117c9, 1u);
	backing.DEF_WILL_FIRE_RL_dut_fsm_action_l117c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l117c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_dut_fsm_action_l123c9) != DEF_WILL_FIRE_RL_dut_fsm_action_l123c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_dut_fsm_action_l123c9, 1u);
	backing.DEF_WILL_FIRE_RL_dut_fsm_action_l123c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l123c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_dut_fsm_action_l130c9) != DEF_WILL_FIRE_RL_dut_fsm_action_l130c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_dut_fsm_action_l130c9, 1u);
	backing.DEF_WILL_FIRE_RL_dut_fsm_action_l130c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l130c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_dut_fsm_action_l137c9) != DEF_WILL_FIRE_RL_dut_fsm_action_l137c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_dut_fsm_action_l137c9, 1u);
	backing.DEF_WILL_FIRE_RL_dut_fsm_action_l137c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l137c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_dut_fsm_action_l144c9) != DEF_WILL_FIRE_RL_dut_fsm_action_l144c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_dut_fsm_action_l144c9, 1u);
	backing.DEF_WILL_FIRE_RL_dut_fsm_action_l144c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l144c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_dut_fsm_action_l151c9) != DEF_WILL_FIRE_RL_dut_fsm_action_l151c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_dut_fsm_action_l151c9, 1u);
	backing.DEF_WILL_FIRE_RL_dut_fsm_action_l151c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l151c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_dut_fsm_action_l157c13) != DEF_WILL_FIRE_RL_dut_fsm_action_l157c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_dut_fsm_action_l157c13, 1u);
	backing.DEF_WILL_FIRE_RL_dut_fsm_action_l157c13 = DEF_WILL_FIRE_RL_dut_fsm_action_l157c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_dut_fsm_action_l159c13) != DEF_WILL_FIRE_RL_dut_fsm_action_l159c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_dut_fsm_action_l159c13, 1u);
	backing.DEF_WILL_FIRE_RL_dut_fsm_action_l159c13 = DEF_WILL_FIRE_RL_dut_fsm_action_l159c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_dut_fsm_action_l160c13) != DEF_WILL_FIRE_RL_dut_fsm_action_l160c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_dut_fsm_action_l160c13, 1u);
	backing.DEF_WILL_FIRE_RL_dut_fsm_action_l160c13 = DEF_WILL_FIRE_RL_dut_fsm_action_l160c13;
      }
      ++num;
      if ((backing.DEF_dut_adder_out_first____d74) != DEF_dut_adder_out_first____d74)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_adder_out_first____d74, 32u);
	backing.DEF_dut_adder_out_first____d74 = DEF_dut_adder_out_first____d74;
      }
      ++num;
      if ((backing.DEF_dut_incoming_first____d58) != DEF_dut_incoming_first____d58)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_incoming_first____d58, 128u);
	backing.DEF_dut_incoming_first____d58 = DEF_dut_incoming_first____d58;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l246c12, 1u);
      backing.DEF_WILL_FIRE_RL_action_l246c12 = DEF_WILL_FIRE_RL_action_l246c12;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l247c1, 1u);
      backing.DEF_WILL_FIRE_RL_action_l247c1 = DEF_WILL_FIRE_RL_action_l247c1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l248c9, 1u);
      backing.DEF_WILL_FIRE_RL_action_l248c9 = DEF_WILL_FIRE_RL_action_l248c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_dut_fsm_action_l108c9, 1u);
      backing.DEF_WILL_FIRE_RL_dut_fsm_action_l108c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l108c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_dut_fsm_action_l117c9, 1u);
      backing.DEF_WILL_FIRE_RL_dut_fsm_action_l117c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l117c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_dut_fsm_action_l123c9, 1u);
      backing.DEF_WILL_FIRE_RL_dut_fsm_action_l123c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l123c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_dut_fsm_action_l130c9, 1u);
      backing.DEF_WILL_FIRE_RL_dut_fsm_action_l130c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l130c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_dut_fsm_action_l137c9, 1u);
      backing.DEF_WILL_FIRE_RL_dut_fsm_action_l137c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l137c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_dut_fsm_action_l144c9, 1u);
      backing.DEF_WILL_FIRE_RL_dut_fsm_action_l144c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l144c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_dut_fsm_action_l151c9, 1u);
      backing.DEF_WILL_FIRE_RL_dut_fsm_action_l151c9 = DEF_WILL_FIRE_RL_dut_fsm_action_l151c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_dut_fsm_action_l157c13, 1u);
      backing.DEF_WILL_FIRE_RL_dut_fsm_action_l157c13 = DEF_WILL_FIRE_RL_dut_fsm_action_l157c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_dut_fsm_action_l159c13, 1u);
      backing.DEF_WILL_FIRE_RL_dut_fsm_action_l159c13 = DEF_WILL_FIRE_RL_dut_fsm_action_l159c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_dut_fsm_action_l160c13, 1u);
      backing.DEF_WILL_FIRE_RL_dut_fsm_action_l160c13 = DEF_WILL_FIRE_RL_dut_fsm_action_l160c13;
      vcd_write_val(sim_hdl, num++, DEF_dut_adder_out_first____d74, 32u);
      backing.DEF_dut_adder_out_first____d74 = DEF_dut_adder_out_first____d74;
      vcd_write_val(sim_hdl, num++, DEF_dut_incoming_first____d58, 128u);
      backing.DEF_dut_incoming_first____d58 = DEF_dut_incoming_first____d58;
    }
}

void MOD_mkTB::vcd_prims(tVCDDumpType dt, MOD_mkTB &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_dut_adder_in.dump_VCD(dt, backing.INST_dut_adder_in);
  INST_dut_adder_out.dump_VCD(dt, backing.INST_dut_adder_out);
  INST_dut_fsm_abort.dump_VCD(dt, backing.INST_dut_fsm_abort);
  INST_dut_fsm_start_reg.dump_VCD(dt, backing.INST_dut_fsm_start_reg);
  INST_dut_fsm_start_reg_1.dump_VCD(dt, backing.INST_dut_fsm_start_reg_1);
  INST_dut_fsm_start_reg_2.dump_VCD(dt, backing.INST_dut_fsm_start_reg_2);
  INST_dut_fsm_start_wire.dump_VCD(dt, backing.INST_dut_fsm_start_wire);
  INST_dut_fsm_state_can_overlap.dump_VCD(dt, backing.INST_dut_fsm_state_can_overlap);
  INST_dut_fsm_state_fired.dump_VCD(dt, backing.INST_dut_fsm_state_fired);
  INST_dut_fsm_state_fired_1.dump_VCD(dt, backing.INST_dut_fsm_state_fired_1);
  INST_dut_fsm_state_mkFSMstate.dump_VCD(dt, backing.INST_dut_fsm_state_mkFSMstate);
  INST_dut_fsm_state_overlap_pw.dump_VCD(dt, backing.INST_dut_fsm_state_overlap_pw);
  INST_dut_fsm_state_set_pw.dump_VCD(dt, backing.INST_dut_fsm_state_set_pw);
  INST_dut_incoming.dump_VCD(dt, backing.INST_dut_incoming);
  INST_dut_mul_in.dump_VCD(dt, backing.INST_dut_mul_in);
  INST_dut_mul_out.dump_VCD(dt, backing.INST_dut_mul_out);
  INST_dut_rega.dump_VCD(dt, backing.INST_dut_rega);
  INST_dut_regb.dump_VCD(dt, backing.INST_dut_regb);
  INST_dut_regc.dump_VCD(dt, backing.INST_dut_regc);
  INST_dut_regd.dump_VCD(dt, backing.INST_dut_regd);
  INST_dut_resultab.dump_VCD(dt, backing.INST_dut_resultab);
  INST_dut_resultcd.dump_VCD(dt, backing.INST_dut_resultcd);
  INST_dut_resultmul.dump_VCD(dt, backing.INST_dut_resultmul);
  INST_dut_sqrt_in.dump_VCD(dt, backing.INST_dut_sqrt_in);
  INST_dut_sqrt_out.dump_VCD(dt, backing.INST_dut_sqrt_out);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}
