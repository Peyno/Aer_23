/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Fri Feb 23 23:16:51 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTB.h"


/* Literal declarations */
static unsigned int const UWide_literal_128_h2000000040000000600000002_arr[] = { 2u, 6u, 4u, 2u };
static tUWide const UWide_literal_128_h2000000040000000600000002(128u,
								 UWide_literal_128_h2000000040000000600000002_arr);


/* String declarations */
static std::string const __str_literal_2(" Wetl", 5u);
static std::string const __str_literal_3("Ergebnis der Berechnung = %d", 28u);
static std::string const __str_literal_4("Error: \"Tb.bsv\", line 152, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l152c12] and\n  [RL_action_l153c1, RL_action_l154c9] ) fired in the same clock cycle.\n",
					 187u);
static std::string const __str_literal_5("Error: \"Tb.bsv\", line 153, column 1: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l153c1] and\n  [RL_action_l154c9] ) fired in the same clock cycle.\n",
					 167u);
static std::string const __str_literal_1("Hallo", 5u);


/* Constructor */
MOD_mkTB::MOD_mkTB(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_dut_adder_in(simHdl, "dut_adder_in", this, 64u, 2u, (tUInt8)1u, 0u),
    INST_dut_adder_out(simHdl, "dut_adder_out", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_incoming(simHdl, "dut_incoming", this, 128u, 2u, (tUInt8)1u, 0u),
    INST_dut_mul_in(simHdl, "dut_mul_in", this, 64u, 2u, (tUInt8)1u, 0u),
    INST_dut_mul_out(simHdl, "dut_mul_out", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_rega(simHdl, "dut_rega", this, 32u),
    INST_dut_regb(simHdl, "dut_regb", this, 32u),
    INST_dut_regc(simHdl, "dut_regc", this, 32u),
    INST_dut_regd(simHdl, "dut_regd", this, 32u),
    INST_dut_resultadd1(simHdl, "dut_resultadd1", this, 32u),
    INST_dut_resultadd2(simHdl, "dut_resultadd2", this, 32u),
    INST_dut_resultmul(simHdl, "dut_resultmul", this, 32u),
    INST_dut_sqrt_in(simHdl, "dut_sqrt_in", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_sqrt_out(simHdl, "dut_sqrt_out", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_dut_state(simHdl, "dut_state", this, 32u, 0u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_dut_incoming_first____d25(128u)
{
  symbol_count = 56u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTB::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_16", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_17", SYM_RULE);
  init_symbol(&symbols[2u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[3u], "b__h1158", SYM_DEF, &DEF_b__h1158, 32u);
  init_symbol(&symbols[4u], "dut_adder_in", SYM_MODULE, &INST_dut_adder_in);
  init_symbol(&symbols[5u], "dut_adder_out", SYM_MODULE, &INST_dut_adder_out);
  init_symbol(&symbols[6u], "dut_incoming", SYM_MODULE, &INST_dut_incoming);
  init_symbol(&symbols[7u], "dut_mul_in", SYM_MODULE, &INST_dut_mul_in);
  init_symbol(&symbols[8u], "dut_mul_out", SYM_MODULE, &INST_dut_mul_out);
  init_symbol(&symbols[9u], "dut_rega", SYM_MODULE, &INST_dut_rega);
  init_symbol(&symbols[10u], "dut_regb", SYM_MODULE, &INST_dut_regb);
  init_symbol(&symbols[11u], "dut_regc", SYM_MODULE, &INST_dut_regc);
  init_symbol(&symbols[12u], "dut_regd", SYM_MODULE, &INST_dut_regd);
  init_symbol(&symbols[13u], "dut_resultadd1", SYM_MODULE, &INST_dut_resultadd1);
  init_symbol(&symbols[14u], "dut_resultadd2", SYM_MODULE, &INST_dut_resultadd2);
  init_symbol(&symbols[15u], "dut_resultmul", SYM_MODULE, &INST_dut_resultmul);
  init_symbol(&symbols[16u], "dut_sqrt_in", SYM_MODULE, &INST_dut_sqrt_in);
  init_symbol(&symbols[17u], "dut_sqrt_out", SYM_MODULE, &INST_dut_sqrt_out);
  init_symbol(&symbols[18u], "dut_state", SYM_MODULE, &INST_dut_state);
  init_symbol(&symbols[19u], "RL_action_l152c12", SYM_RULE);
  init_symbol(&symbols[20u], "RL_action_l153c1", SYM_RULE);
  init_symbol(&symbols[21u], "RL_action_l154c9", SYM_RULE);
  init_symbol(&symbols[22u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[23u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[24u], "RL_dut_adder_r1", SYM_RULE);
  init_symbol(&symbols[25u], "RL_dut_mul_r1", SYM_RULE);
  init_symbol(&symbols[26u], "RL_dut_pull", SYM_RULE);
  init_symbol(&symbols[27u], "RL_dut_requestadd1", SYM_RULE);
  init_symbol(&symbols[28u], "RL_dut_requestadd2", SYM_RULE);
  init_symbol(&symbols[29u], "RL_dut_requestmul", SYM_RULE);
  init_symbol(&symbols[30u], "RL_dut_responseadd1", SYM_RULE);
  init_symbol(&symbols[31u], "RL_dut_responseadd2", SYM_RULE);
  init_symbol(&symbols[32u], "RL_dut_responsemul", SYM_RULE);
  init_symbol(&symbols[33u], "RL_dut_sqrt_r1", SYM_RULE);
  init_symbol(&symbols[34u], "RL_dut_sqrtrequest", SYM_RULE);
  init_symbol(&symbols[35u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[36u], "RL_idle_l150c17", SYM_RULE);
  init_symbol(&symbols[37u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[38u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[39u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[40u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[41u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[42u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[43u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[44u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[45u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[46u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[47u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[48u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[49u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[50u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[51u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[52u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[53u],
	      "WILL_FIRE_RL_action_l152c12",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l152c12,
	      1u);
  init_symbol(&symbols[54u],
	      "WILL_FIRE_RL_action_l153c1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l153c1,
	      1u);
  init_symbol(&symbols[55u],
	      "WILL_FIRE_RL_action_l154c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l154c9,
	      1u);
}


/* Rule actions */

void MOD_mkTB::RL_dut_adder_r1()
{
  tUInt32 DEF_dut_adder_in_first_BITS_63_TO_32_PLUS_dut_adde_ETC___d7;
  tUInt64 DEF_dut_adder_in_first____d4;
  DEF_dut_adder_in_first____d4 = INST_dut_adder_in.METH_first();
  DEF_dut_adder_in_first_BITS_63_TO_32_PLUS_dut_adde_ETC___d7 = ((tUInt32)(DEF_dut_adder_in_first____d4 >> 32u)) + ((tUInt32)(DEF_dut_adder_in_first____d4));
  INST_dut_adder_in.METH_deq();
  INST_dut_adder_out.METH_enq(DEF_dut_adder_in_first_BITS_63_TO_32_PLUS_dut_adde_ETC___d7);
}

void MOD_mkTB::RL_dut_mul_r1()
{
  tUInt32 DEF_dut_mul_in_first__1_BITS_63_TO_32_2_MUL_dut_mu_ETC___d15;
  tUInt64 DEF_dut_mul_in_first____d11;
  DEF_dut_mul_in_first____d11 = INST_dut_mul_in.METH_first();
  DEF_dut_mul_in_first__1_BITS_63_TO_32_2_MUL_dut_mu_ETC___d15 = (tUInt32)(((tUInt64)((tUInt32)(DEF_dut_mul_in_first____d11 >> 32u))) * ((tUInt64)((tUInt32)(DEF_dut_mul_in_first____d11))));
  INST_dut_mul_in.METH_deq();
  INST_dut_mul_out.METH_enq(DEF_dut_mul_in_first__1_BITS_63_TO_32_2_MUL_dut_mu_ETC___d15);
}

void MOD_mkTB::RL_dut_sqrt_r1()
{
  tUInt32 DEF_dut_sqrt_in_first__9_PLUS_2___d20;
  DEF_dut_sqrt_in_first__9_PLUS_2___d20 = INST_dut_sqrt_in.METH_first() + 2u;
  INST_dut_sqrt_in.METH_deq();
  INST_dut_sqrt_out.METH_enq(DEF_dut_sqrt_in_first__9_PLUS_2___d20);
}

void MOD_mkTB::RL_dut_pull()
{
  tUInt32 DEF_dut_incoming_first__5_BITS_31_TO_0___d29;
  tUInt32 DEF_dut_incoming_first__5_BITS_63_TO_32___d28;
  tUInt32 DEF_dut_incoming_first__5_BITS_95_TO_64___d27;
  tUInt32 DEF_dut_incoming_first__5_BITS_127_TO_96___d26;
  DEF_dut_incoming_first____d25 = INST_dut_incoming.METH_first();
  DEF_b__h1158 = INST_dut_state.METH_read();
  DEF_dut_incoming_first__5_BITS_127_TO_96___d26 = DEF_dut_incoming_first____d25.get_whole_word(3u);
  DEF_dut_incoming_first__5_BITS_95_TO_64___d27 = DEF_dut_incoming_first____d25.get_whole_word(2u);
  DEF_dut_incoming_first__5_BITS_63_TO_32___d28 = DEF_dut_incoming_first____d25.get_whole_word(1u);
  DEF_dut_state_2_PLUS_1___d30 = DEF_b__h1158 + 1u;
  DEF_dut_incoming_first__5_BITS_31_TO_0___d29 = DEF_dut_incoming_first____d25.get_whole_word(0u);
  INST_dut_incoming.METH_deq();
  INST_dut_rega.METH_write(DEF_dut_incoming_first__5_BITS_127_TO_96___d26);
  INST_dut_regb.METH_write(DEF_dut_incoming_first__5_BITS_95_TO_64___d27);
  INST_dut_regc.METH_write(DEF_dut_incoming_first__5_BITS_63_TO_32___d28);
  INST_dut_regd.METH_write(DEF_dut_incoming_first__5_BITS_31_TO_0___d29);
  INST_dut_state.METH_write(DEF_dut_state_2_PLUS_1___d30);
}

void MOD_mkTB::RL_dut_requestadd1()
{
  tUInt64 DEF_dut_rega_4_CONCAT_dut_regb_5___d36;
  tUInt32 DEF_b__h1419;
  tUInt32 DEF_b__h1421;
  DEF_b__h1421 = INST_dut_regb.METH_read();
  DEF_b__h1419 = INST_dut_rega.METH_read();
  DEF_b__h1158 = INST_dut_state.METH_read();
  DEF_dut_rega_4_CONCAT_dut_regb_5___d36 = (((tUInt64)(DEF_b__h1419)) << 32u) | (tUInt64)(DEF_b__h1421);
  DEF_dut_state_2_PLUS_1___d30 = DEF_b__h1158 + 1u;
  INST_dut_adder_in.METH_enq(DEF_dut_rega_4_CONCAT_dut_regb_5___d36);
  INST_dut_state.METH_write(DEF_dut_state_2_PLUS_1___d30);
}

void MOD_mkTB::RL_dut_responseadd1()
{
  DEF_b__h1158 = INST_dut_state.METH_read();
  DEF_dut_adder_out_first____d40 = INST_dut_adder_out.METH_first();
  DEF_dut_state_2_PLUS_1___d30 = DEF_b__h1158 + 1u;
  INST_dut_adder_out.METH_deq();
  INST_dut_resultadd1.METH_write(DEF_dut_adder_out_first____d40);
  INST_dut_state.METH_write(DEF_dut_state_2_PLUS_1___d30);
}

void MOD_mkTB::RL_dut_requestadd2()
{
  tUInt64 DEF_dut_regc_3_CONCAT_NEG_dut_regd_4_5___d46;
  tUInt32 DEF_b__h1548;
  tUInt32 DEF_b__h1551;
  DEF_b__h1551 = INST_dut_regd.METH_read();
  DEF_b__h1548 = INST_dut_regc.METH_read();
  DEF_b__h1158 = INST_dut_state.METH_read();
  DEF_dut_regc_3_CONCAT_NEG_dut_regd_4_5___d46 = (((tUInt64)(DEF_b__h1548)) << 32u) | (tUInt64)(-DEF_b__h1551);
  DEF_dut_state_2_PLUS_1___d30 = DEF_b__h1158 + 1u;
  INST_dut_adder_in.METH_enq(DEF_dut_regc_3_CONCAT_NEG_dut_regd_4_5___d46);
  INST_dut_state.METH_write(DEF_dut_state_2_PLUS_1___d30);
}

void MOD_mkTB::RL_dut_responseadd2()
{
  DEF_b__h1158 = INST_dut_state.METH_read();
  DEF_dut_adder_out_first____d40 = INST_dut_adder_out.METH_first();
  DEF_dut_state_2_PLUS_1___d30 = DEF_b__h1158 + 1u;
  INST_dut_adder_out.METH_deq();
  INST_dut_resultadd2.METH_write(DEF_dut_adder_out_first____d40);
  INST_dut_state.METH_write(DEF_dut_state_2_PLUS_1___d30);
}

void MOD_mkTB::RL_dut_requestmul()
{
  tUInt64 DEF_dut_resultadd1_2_CONCAT_dut_resultadd2_3___d54;
  tUInt32 DEF_b__h1670;
  tUInt32 DEF_b__h1672;
  DEF_b__h1672 = INST_dut_resultadd2.METH_read();
  DEF_b__h1670 = INST_dut_resultadd1.METH_read();
  DEF_b__h1158 = INST_dut_state.METH_read();
  DEF_dut_resultadd1_2_CONCAT_dut_resultadd2_3___d54 = (((tUInt64)(DEF_b__h1670)) << 32u) | (tUInt64)(DEF_b__h1672);
  DEF_dut_state_2_PLUS_1___d30 = DEF_b__h1158 + 1u;
  INST_dut_mul_in.METH_enq(DEF_dut_resultadd1_2_CONCAT_dut_resultadd2_3___d54);
  INST_dut_state.METH_write(DEF_dut_state_2_PLUS_1___d30);
}

void MOD_mkTB::RL_dut_responsemul()
{
  tUInt32 DEF_dut_mul_out_first____d58;
  DEF_b__h1158 = INST_dut_state.METH_read();
  DEF_dut_mul_out_first____d58 = INST_dut_mul_out.METH_first();
  DEF_dut_state_2_PLUS_1___d30 = DEF_b__h1158 + 1u;
  INST_dut_mul_out.METH_deq();
  INST_dut_resultmul.METH_write(DEF_dut_mul_out_first____d58);
  INST_dut_state.METH_write(DEF_dut_state_2_PLUS_1___d30);
}

void MOD_mkTB::RL_dut_sqrtrequest()
{
  tUInt32 DEF_dut_resultmul_2_PLUS_16___d63;
  tUInt32 DEF_b__h1790;
  DEF_b__h1790 = INST_dut_resultmul.METH_read();
  DEF_dut_resultmul_2_PLUS_16___d63 = DEF_b__h1790 + 16u;
  INST_dut_sqrt_in.METH_enq(DEF_dut_resultmul_2_PLUS_16___d63);
}

void MOD_mkTB::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas__4_AND_start_reg_2_wget__5___d66;
  DEF_start_reg_2_whas__4_AND_start_reg_2_wget__5___d66 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas__4_AND_start_reg_2_wget__5___d66);
}

void MOD_mkTB::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTB::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__6_AND_state_fired_1_wget__7___d78;
  DEF_state_fired_1_whas__6_AND_state_fired_1_wget__7___d78 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__6_AND_state_fired_1_wget__7___d78);
}

void MOD_mkTB::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__9_OR_NOT_state_overlap_pw_w_ETC___d84;
  tUInt8 DEF_state_can_overlap__h3269;
  DEF_state_can_overlap__h3269 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__9_OR_NOT_state_overlap_pw_w_ETC___d84 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h3269);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__9_OR_NOT_state_overlap_pw_w_ETC___d84);
}

void MOD_mkTB::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTB::RL_action_l152c12()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_dut_incoming.METH_enq(UWide_literal_128_h2000000040000000600000002);
}

void MOD_mkTB::RL_action_l153c1()
{
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
}

void MOD_mkTB::RL_action_l154c9()
{
  tUInt32 DEF_signed_dut_sqrt_out_first__08___d109;
  DEF_signed_dut_sqrt_out_first__08___d109 = INST_dut_sqrt_out.METH_first();
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
  INST_dut_sqrt_out.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_3, DEF_signed_dut_sqrt_out_first__08___d109);
}

void MOD_mkTB::RL_idle_l150c17()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTB::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTB::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTB::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTB::__me_check_16()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l152c12 && (DEF_WILL_FIRE_RL_action_l153c1 || DEF_WILL_FIRE_RL_action_l154c9))
      dollar_error(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkTB::__me_check_17()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l153c1 && DEF_WILL_FIRE_RL_action_l154c9)
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
}


/* Methods */


/* Reset routines */

void MOD_mkTB::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_dut_state.reset_RST(ARG_rst_in);
  INST_dut_sqrt_out.reset_RST(ARG_rst_in);
  INST_dut_sqrt_in.reset_RST(ARG_rst_in);
  INST_dut_mul_out.reset_RST(ARG_rst_in);
  INST_dut_mul_in.reset_RST(ARG_rst_in);
  INST_dut_incoming.reset_RST(ARG_rst_in);
  INST_dut_adder_out.reset_RST(ARG_rst_in);
  INST_dut_adder_in.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTB::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTB::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_dut_adder_in.dump_state(indent + 2u);
  INST_dut_adder_out.dump_state(indent + 2u);
  INST_dut_incoming.dump_state(indent + 2u);
  INST_dut_mul_in.dump_state(indent + 2u);
  INST_dut_mul_out.dump_state(indent + 2u);
  INST_dut_rega.dump_state(indent + 2u);
  INST_dut_regb.dump_state(indent + 2u);
  INST_dut_regc.dump_state(indent + 2u);
  INST_dut_regd.dump_state(indent + 2u);
  INST_dut_resultadd1.dump_state(indent + 2u);
  INST_dut_resultadd2.dump_state(indent + 2u);
  INST_dut_resultmul.dump_state(indent + 2u);
  INST_dut_sqrt_in.dump_state(indent + 2u);
  INST_dut_sqrt_out.dump_state(indent + 2u);
  INST_dut_state.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTB::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 35u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l152c12", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l153c1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l154c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h1158", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_adder_out_first____d40", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_incoming_first____d25", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_state_2_PLUS_1___d30", 32u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_dut_adder_in.dump_VCD_defs(num);
  num = INST_dut_adder_out.dump_VCD_defs(num);
  num = INST_dut_incoming.dump_VCD_defs(num);
  num = INST_dut_mul_in.dump_VCD_defs(num);
  num = INST_dut_mul_out.dump_VCD_defs(num);
  num = INST_dut_rega.dump_VCD_defs(num);
  num = INST_dut_regb.dump_VCD_defs(num);
  num = INST_dut_regc.dump_VCD_defs(num);
  num = INST_dut_regd.dump_VCD_defs(num);
  num = INST_dut_resultadd1.dump_VCD_defs(num);
  num = INST_dut_resultadd2.dump_VCD_defs(num);
  num = INST_dut_resultmul.dump_VCD_defs(num);
  num = INST_dut_sqrt_in.dump_VCD_defs(num);
  num = INST_dut_sqrt_out.dump_VCD_defs(num);
  num = INST_dut_state.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTB::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTB &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTB::vcd_defs(tVCDDumpType dt, MOD_mkTB &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l152c12) != DEF_WILL_FIRE_RL_action_l152c12)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l152c12, 1u);
	backing.DEF_WILL_FIRE_RL_action_l152c12 = DEF_WILL_FIRE_RL_action_l152c12;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l153c1) != DEF_WILL_FIRE_RL_action_l153c1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l153c1, 1u);
	backing.DEF_WILL_FIRE_RL_action_l153c1 = DEF_WILL_FIRE_RL_action_l153c1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l154c9) != DEF_WILL_FIRE_RL_action_l154c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l154c9, 1u);
	backing.DEF_WILL_FIRE_RL_action_l154c9 = DEF_WILL_FIRE_RL_action_l154c9;
      }
      ++num;
      if ((backing.DEF_b__h1158) != DEF_b__h1158)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h1158, 32u);
	backing.DEF_b__h1158 = DEF_b__h1158;
      }
      ++num;
      if ((backing.DEF_dut_adder_out_first____d40) != DEF_dut_adder_out_first____d40)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_adder_out_first____d40, 32u);
	backing.DEF_dut_adder_out_first____d40 = DEF_dut_adder_out_first____d40;
      }
      ++num;
      if ((backing.DEF_dut_incoming_first____d25) != DEF_dut_incoming_first____d25)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_incoming_first____d25, 128u);
	backing.DEF_dut_incoming_first____d25 = DEF_dut_incoming_first____d25;
      }
      ++num;
      if ((backing.DEF_dut_state_2_PLUS_1___d30) != DEF_dut_state_2_PLUS_1___d30)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_state_2_PLUS_1___d30, 32u);
	backing.DEF_dut_state_2_PLUS_1___d30 = DEF_dut_state_2_PLUS_1___d30;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l152c12, 1u);
      backing.DEF_WILL_FIRE_RL_action_l152c12 = DEF_WILL_FIRE_RL_action_l152c12;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l153c1, 1u);
      backing.DEF_WILL_FIRE_RL_action_l153c1 = DEF_WILL_FIRE_RL_action_l153c1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l154c9, 1u);
      backing.DEF_WILL_FIRE_RL_action_l154c9 = DEF_WILL_FIRE_RL_action_l154c9;
      vcd_write_val(sim_hdl, num++, DEF_b__h1158, 32u);
      backing.DEF_b__h1158 = DEF_b__h1158;
      vcd_write_val(sim_hdl, num++, DEF_dut_adder_out_first____d40, 32u);
      backing.DEF_dut_adder_out_first____d40 = DEF_dut_adder_out_first____d40;
      vcd_write_val(sim_hdl, num++, DEF_dut_incoming_first____d25, 128u);
      backing.DEF_dut_incoming_first____d25 = DEF_dut_incoming_first____d25;
      vcd_write_val(sim_hdl, num++, DEF_dut_state_2_PLUS_1___d30, 32u);
      backing.DEF_dut_state_2_PLUS_1___d30 = DEF_dut_state_2_PLUS_1___d30;
    }
}

void MOD_mkTB::vcd_prims(tVCDDumpType dt, MOD_mkTB &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_dut_adder_in.dump_VCD(dt, backing.INST_dut_adder_in);
  INST_dut_adder_out.dump_VCD(dt, backing.INST_dut_adder_out);
  INST_dut_incoming.dump_VCD(dt, backing.INST_dut_incoming);
  INST_dut_mul_in.dump_VCD(dt, backing.INST_dut_mul_in);
  INST_dut_mul_out.dump_VCD(dt, backing.INST_dut_mul_out);
  INST_dut_rega.dump_VCD(dt, backing.INST_dut_rega);
  INST_dut_regb.dump_VCD(dt, backing.INST_dut_regb);
  INST_dut_regc.dump_VCD(dt, backing.INST_dut_regc);
  INST_dut_regd.dump_VCD(dt, backing.INST_dut_regd);
  INST_dut_resultadd1.dump_VCD(dt, backing.INST_dut_resultadd1);
  INST_dut_resultadd2.dump_VCD(dt, backing.INST_dut_resultadd2);
  INST_dut_resultmul.dump_VCD(dt, backing.INST_dut_resultmul);
  INST_dut_sqrt_in.dump_VCD(dt, backing.INST_dut_sqrt_in);
  INST_dut_sqrt_out.dump_VCD(dt, backing.INST_dut_sqrt_out);
  INST_dut_state.dump_VCD(dt, backing.INST_dut_state);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}
