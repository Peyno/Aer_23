/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Thu Feb  8 21:48:25 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb2.h"


/* String declarations */
static std::string const __str_literal_2("Error: \"Tb.bsv\", line 58, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l58c9] and\n  [RL_action_l60c14, RL_action_l61c13, RL_action_f_update_l58c9,\n  RL_action_l66c10] ) fired in the same clock cycle.\n",
					 237u);
static std::string const __str_literal_5("Error: \"Tb.bsv\", line 58, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_update_l58c9] and\n  [RL_action_l66c10] ) fired in the same clock cycle.\n",
					 175u);
static std::string const __str_literal_3("Error: \"Tb.bsv\", line 60, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l60c14] and\n  [RL_action_l61c13, RL_action_f_update_l58c9, RL_action_l66c10] ) fired in\n  the same clock cycle.\n",
					 213u);
static std::string const __str_literal_4("Error: \"Tb.bsv\", line 61, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l61c13] and\n  [RL_action_f_update_l58c9, RL_action_l66c10] ) fired in the same clock\n  cycle.\n",
					 195u);
static std::string const __str_literal_1("Wert oben = %d", 14u);


/* Constructor */
MOD_mkTb2::MOD_mkTb2(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_i(simHdl, "i", this, 32u, 0u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_s_index(simHdl, "s_index", this, 32u, 0u, (tUInt8)0u),
    INST_s_stack(simHdl, "s_stack", this, 160u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_s_stack__h15438(160u),
    DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d64(160u),
    DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57(96u)
{
  symbol_count = 40u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb2::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[4u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[5u], "b__h5890", SYM_DEF, &DEF_b__h5890, 32u);
  init_symbol(&symbols[6u], "i", SYM_MODULE, &INST_i);
  init_symbol(&symbols[7u], "RL_action_f_init_l58c9", SYM_RULE);
  init_symbol(&symbols[8u], "RL_action_f_update_l58c9", SYM_RULE);
  init_symbol(&symbols[9u], "RL_action_l60c14", SYM_RULE);
  init_symbol(&symbols[10u], "RL_action_l61c13", SYM_RULE);
  init_symbol(&symbols[11u], "RL_action_l66c10", SYM_RULE);
  init_symbol(&symbols[12u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[13u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[14u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[15u], "RL_idle_l56c14", SYM_RULE);
  init_symbol(&symbols[16u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[17u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[18u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[19u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[20u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[21u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[22u], "s_index", SYM_MODULE, &INST_s_index);
  init_symbol(&symbols[23u], "s_stack", SYM_MODULE, &INST_s_stack);
  init_symbol(&symbols[24u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[25u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[26u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[27u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[28u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[29u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[30u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[31u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[32u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[33u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[34u],
	      "WILL_FIRE_RL_action_f_init_l58c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_init_l58c9,
	      1u);
  init_symbol(&symbols[35u],
	      "WILL_FIRE_RL_action_f_update_l58c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_update_l58c9,
	      1u);
  init_symbol(&symbols[36u],
	      "WILL_FIRE_RL_action_l60c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l60c14,
	      1u);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_action_l61c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l61c13,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_action_l66c10",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l66c10,
	      1u);
  init_symbol(&symbols[39u], "x__h15152", SYM_DEF, &DEF_x__h15152, 32u);
}


/* Rule actions */

void MOD_mkTb2::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas_AND_start_reg_2_wget___d3;
  DEF_start_reg_2_whas_AND_start_reg_2_wget___d3 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas_AND_start_reg_2_wget___d3);
}

void MOD_mkTb2::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTb2::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15;
  DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15);
}

void MOD_mkTb2::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21;
  tUInt8 DEF_state_can_overlap__h2361;
  DEF_state_can_overlap__h2361 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h2361);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21);
}

void MOD_mkTb2::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTb2::RL_action_f_init_l58c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_i.METH_write(0u);
}

void MOD_mkTb2::RL_action_l60c14()
{
  tUInt32 DEF_s_index_7_PLUS_1___d65;
  DEF_x__h15152 = INST_s_index.METH_read();
  DEF_s_stack__h15438 = INST_s_stack.METH_read();
  DEF_b__h5890 = INST_i.METH_read();
  DEF_v__h15083 = DEF_s_stack__h15438.get_whole_word(4u);
  DEF_v__h15078 = DEF_s_stack__h15438.get_whole_word(3u);
  DEF_v__h15073 = DEF_s_stack__h15438.get_whole_word(2u);
  DEF_v__h15068 = DEF_s_stack__h15438.get_whole_word(1u);
  DEF_v__h15063 = DEF_s_stack__h15438.get_whole_word(0u);
  DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57.set_whole_word(DEF_x__h15152 == 4u ? DEF_b__h5890 : DEF_v__h15083,
									      2u).set_whole_word(DEF_x__h15152 == 3u ? DEF_b__h5890 : DEF_v__h15078,
												 1u).set_whole_word(DEF_x__h15152 == 2u ? DEF_b__h5890 : DEF_v__h15073,
														    0u);
  DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d64.set_whole_word(DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57.get_whole_word(2u),
									      4u).set_whole_word(DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57.get_whole_word(1u),
												 3u).build_concat(bs_wide_tmp(96u).set_whole_word(DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57.get_whole_word(0u),
																		  2u).set_whole_word(DEF_x__h15152 == 1u ? DEF_b__h5890 : DEF_v__h15068,
																				     1u).set_whole_word(DEF_x__h15152 == 0u ? DEF_b__h5890 : DEF_v__h15063,
																							0u),
														  0u,
														  96u);
  DEF_s_index_7_PLUS_1___d65 = DEF_x__h15152 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_s_stack.METH_write(DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d64);
  INST_s_index.METH_write(DEF_s_index_7_PLUS_1___d65);
}

void MOD_mkTb2::RL_action_l61c13()
{
  tUInt32 DEF_SEL_ARR_s_stack_8_BITS_31_TO_0_2_s_stack_8_BIT_ETC___d73;
  tUInt32 DEF_signed_SEL_ARR_s_stack_8_BITS_31_TO_0_2_s_sta_ETC___d74;
  tUInt32 DEF_x__h15708;
  DEF_x__h15152 = INST_s_index.METH_read();
  DEF_x__h15708 = DEF_x__h15152 - 1u;
  DEF_s_stack__h15438 = INST_s_stack.METH_read();
  DEF_v__h15083 = DEF_s_stack__h15438.get_whole_word(4u);
  DEF_v__h15078 = DEF_s_stack__h15438.get_whole_word(3u);
  DEF_v__h15073 = DEF_s_stack__h15438.get_whole_word(2u);
  DEF_v__h15068 = DEF_s_stack__h15438.get_whole_word(1u);
  DEF_v__h15063 = DEF_s_stack__h15438.get_whole_word(0u);
  switch (DEF_x__h15708) {
  case 0u:
    DEF_SEL_ARR_s_stack_8_BITS_31_TO_0_2_s_stack_8_BIT_ETC___d73 = DEF_v__h15063;
    break;
  case 1u:
    DEF_SEL_ARR_s_stack_8_BITS_31_TO_0_2_s_stack_8_BIT_ETC___d73 = DEF_v__h15068;
    break;
  case 2u:
    DEF_SEL_ARR_s_stack_8_BITS_31_TO_0_2_s_stack_8_BIT_ETC___d73 = DEF_v__h15073;
    break;
  case 3u:
    DEF_SEL_ARR_s_stack_8_BITS_31_TO_0_2_s_stack_8_BIT_ETC___d73 = DEF_v__h15078;
    break;
  case 4u:
    DEF_SEL_ARR_s_stack_8_BITS_31_TO_0_2_s_stack_8_BIT_ETC___d73 = DEF_v__h15083;
    break;
  default:
    DEF_SEL_ARR_s_stack_8_BITS_31_TO_0_2_s_stack_8_BIT_ETC___d73 = 2863311530u;
  }
  DEF_signed_SEL_ARR_s_stack_8_BITS_31_TO_0_2_s_sta_ETC___d74 = DEF_SEL_ARR_s_stack_8_BITS_31_TO_0_2_s_stack_8_BIT_ETC___d73;
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32",
		   &__str_literal_1,
		   DEF_signed_SEL_ARR_s_stack_8_BITS_31_TO_0_2_s_sta_ETC___d74);
}

void MOD_mkTb2::RL_action_f_update_l58c9()
{
  tUInt32 DEF_i_9_PLUS_1___d77;
  DEF_b__h5890 = INST_i.METH_read();
  DEF_i_9_PLUS_1___d77 = DEF_b__h5890 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_i.METH_write(DEF_i_9_PLUS_1___d77);
}

void MOD_mkTb2::RL_action_l66c10()
{
  INST_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTb2::RL_idle_l56c14()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTb2::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTb2::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTb2::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTb2::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_init_l58c9 && (((DEF_WILL_FIRE_RL_action_l60c14 || DEF_WILL_FIRE_RL_action_l61c13) || DEF_WILL_FIRE_RL_action_f_update_l58c9) || DEF_WILL_FIRE_RL_action_l66c10))
      dollar_error(sim_hdl, this, "s", &__str_literal_2);
}

void MOD_mkTb2::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l60c14 && ((DEF_WILL_FIRE_RL_action_l61c13 || DEF_WILL_FIRE_RL_action_f_update_l58c9) || DEF_WILL_FIRE_RL_action_l66c10))
      dollar_error(sim_hdl, this, "s", &__str_literal_3);
}

void MOD_mkTb2::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l61c13 && (DEF_WILL_FIRE_RL_action_f_update_l58c9 || DEF_WILL_FIRE_RL_action_l66c10))
      dollar_error(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkTb2::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_update_l58c9 && DEF_WILL_FIRE_RL_action_l66c10)
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
}


/* Methods */


/* Reset routines */

void MOD_mkTb2::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_s_index.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_i.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb2::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb2::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_i.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_s_index.dump_state(indent + 2u);
  INST_s_stack.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb2::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 31u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57", 96u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d64", 160u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_init_l58c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_update_l58c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l60c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l61c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l66c10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h5890", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "s_stack__h15438", 160u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h15063", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h15068", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h15073", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h15078", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h15083", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h15152", 32u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_i.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_s_index.dump_VCD_defs(num);
  num = INST_s_stack.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb2::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb2 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb2::vcd_defs(tVCDDumpType dt, MOD_mkTb2 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 96u);
    vcd_write_x(sim_hdl, num++, 160u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 160u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57) != DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57, 96u);
	backing.DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57 = DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57;
      }
      ++num;
      if ((backing.DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d64) != DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d64)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d64, 160u);
	backing.DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d64 = DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d64;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_init_l58c9) != DEF_WILL_FIRE_RL_action_f_init_l58c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_init_l58c9, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_init_l58c9 = DEF_WILL_FIRE_RL_action_f_init_l58c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_update_l58c9) != DEF_WILL_FIRE_RL_action_f_update_l58c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_update_l58c9, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_update_l58c9 = DEF_WILL_FIRE_RL_action_f_update_l58c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l60c14) != DEF_WILL_FIRE_RL_action_l60c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l60c14, 1u);
	backing.DEF_WILL_FIRE_RL_action_l60c14 = DEF_WILL_FIRE_RL_action_l60c14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l61c13) != DEF_WILL_FIRE_RL_action_l61c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l61c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l61c13 = DEF_WILL_FIRE_RL_action_l61c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l66c10) != DEF_WILL_FIRE_RL_action_l66c10)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l66c10, 1u);
	backing.DEF_WILL_FIRE_RL_action_l66c10 = DEF_WILL_FIRE_RL_action_l66c10;
      }
      ++num;
      if ((backing.DEF_b__h5890) != DEF_b__h5890)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h5890, 32u);
	backing.DEF_b__h5890 = DEF_b__h5890;
      }
      ++num;
      if ((backing.DEF_s_stack__h15438) != DEF_s_stack__h15438)
      {
	vcd_write_val(sim_hdl, num, DEF_s_stack__h15438, 160u);
	backing.DEF_s_stack__h15438 = DEF_s_stack__h15438;
      }
      ++num;
      if ((backing.DEF_v__h15063) != DEF_v__h15063)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h15063, 32u);
	backing.DEF_v__h15063 = DEF_v__h15063;
      }
      ++num;
      if ((backing.DEF_v__h15068) != DEF_v__h15068)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h15068, 32u);
	backing.DEF_v__h15068 = DEF_v__h15068;
      }
      ++num;
      if ((backing.DEF_v__h15073) != DEF_v__h15073)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h15073, 32u);
	backing.DEF_v__h15073 = DEF_v__h15073;
      }
      ++num;
      if ((backing.DEF_v__h15078) != DEF_v__h15078)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h15078, 32u);
	backing.DEF_v__h15078 = DEF_v__h15078;
      }
      ++num;
      if ((backing.DEF_v__h15083) != DEF_v__h15083)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h15083, 32u);
	backing.DEF_v__h15083 = DEF_v__h15083;
      }
      ++num;
      if ((backing.DEF_x__h15152) != DEF_x__h15152)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h15152, 32u);
	backing.DEF_x__h15152 = DEF_x__h15152;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57, 96u);
      backing.DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57 = DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d57;
      vcd_write_val(sim_hdl, num++, DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d64, 160u);
      backing.DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d64 = DEF_IF_s_index_7_EQ_4_7_THEN_i_9_ELSE_s_stack_8_BI_ETC___d64;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_init_l58c9, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_init_l58c9 = DEF_WILL_FIRE_RL_action_f_init_l58c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_update_l58c9, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_update_l58c9 = DEF_WILL_FIRE_RL_action_f_update_l58c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l60c14, 1u);
      backing.DEF_WILL_FIRE_RL_action_l60c14 = DEF_WILL_FIRE_RL_action_l60c14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l61c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l61c13 = DEF_WILL_FIRE_RL_action_l61c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l66c10, 1u);
      backing.DEF_WILL_FIRE_RL_action_l66c10 = DEF_WILL_FIRE_RL_action_l66c10;
      vcd_write_val(sim_hdl, num++, DEF_b__h5890, 32u);
      backing.DEF_b__h5890 = DEF_b__h5890;
      vcd_write_val(sim_hdl, num++, DEF_s_stack__h15438, 160u);
      backing.DEF_s_stack__h15438 = DEF_s_stack__h15438;
      vcd_write_val(sim_hdl, num++, DEF_v__h15063, 32u);
      backing.DEF_v__h15063 = DEF_v__h15063;
      vcd_write_val(sim_hdl, num++, DEF_v__h15068, 32u);
      backing.DEF_v__h15068 = DEF_v__h15068;
      vcd_write_val(sim_hdl, num++, DEF_v__h15073, 32u);
      backing.DEF_v__h15073 = DEF_v__h15073;
      vcd_write_val(sim_hdl, num++, DEF_v__h15078, 32u);
      backing.DEF_v__h15078 = DEF_v__h15078;
      vcd_write_val(sim_hdl, num++, DEF_v__h15083, 32u);
      backing.DEF_v__h15083 = DEF_v__h15083;
      vcd_write_val(sim_hdl, num++, DEF_x__h15152, 32u);
      backing.DEF_x__h15152 = DEF_x__h15152;
    }
}

void MOD_mkTb2::vcd_prims(tVCDDumpType dt, MOD_mkTb2 &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_i.dump_VCD(dt, backing.INST_i);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_s_index.dump_VCD(dt, backing.INST_s_index);
  INST_s_stack.dump_VCD(dt, backing.INST_s_stack);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}
