/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Thu Feb  8 22:08:39 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_1("Oberster Wert im Stack = %d", 27u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_s_index(simHdl, "s_index", this, 32u, 0u, (tUInt8)0u),
    INST_s_stack(simHdl, "s_stack", this, 160u),
    INST_wert(simHdl, "wert", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_s_stack__h897(160u),
    DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d22(160u),
    DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15(96u)
{
  symbol_count = 8u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h175", SYM_DEF, &DEF_b__h175, 32u);
  init_symbol(&symbols[1u], "RL_finish", SYM_RULE);
  init_symbol(&symbols[2u], "RL_peek", SYM_RULE);
  init_symbol(&symbols[3u], "RL_push", SYM_RULE);
  init_symbol(&symbols[4u], "s_index", SYM_MODULE, &INST_s_index);
  init_symbol(&symbols[5u], "s_stack", SYM_MODULE, &INST_s_stack);
  init_symbol(&symbols[6u], "wert", SYM_MODULE, &INST_wert);
  init_symbol(&symbols[7u], "x__h611", SYM_DEF, &DEF_x__h611, 32u);
}


/* Rule actions */

void MOD_mkTb::RL_push()
{
  tUInt32 DEF_s_index_PLUS_1___d23;
  tUInt32 DEF_wert_PLUS_1___d4;
  DEF_x__h611 = INST_s_index.METH_read();
  DEF_s_stack__h897 = INST_s_stack.METH_read();
  DEF_b__h175 = INST_wert.METH_read();
  DEF_v__h542 = DEF_s_stack__h897.get_whole_word(4u);
  DEF_v__h537 = DEF_s_stack__h897.get_whole_word(3u);
  DEF_v__h532 = DEF_s_stack__h897.get_whole_word(2u);
  DEF_v__h527 = DEF_s_stack__h897.get_whole_word(1u);
  DEF_v__h522 = DEF_s_stack__h897.get_whole_word(0u);
  DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15.set_whole_word(DEF_x__h611 == 4u ? DEF_b__h175 : DEF_v__h542,
									      2u).set_whole_word(DEF_x__h611 == 3u ? DEF_b__h175 : DEF_v__h537,
												 1u).set_whole_word(DEF_x__h611 == 2u ? DEF_b__h175 : DEF_v__h532,
														    0u);
  DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d22.set_whole_word(DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15.get_whole_word(2u),
									      4u).set_whole_word(DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15.get_whole_word(1u),
												 3u).build_concat(bs_wide_tmp(96u).set_whole_word(DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15.get_whole_word(0u),
																		  2u).set_whole_word(DEF_x__h611 == 1u ? DEF_b__h175 : DEF_v__h527,
																				     1u).set_whole_word(DEF_x__h611 == 0u ? DEF_b__h175 : DEF_v__h522,
																							0u),
														  0u,
														  96u);
  DEF_wert_PLUS_1___d4 = DEF_b__h175 + 1u;
  DEF_s_index_PLUS_1___d23 = DEF_x__h611 + 1u;
  INST_wert.METH_write(DEF_wert_PLUS_1___d4);
  INST_s_stack.METH_write(DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d22);
  INST_s_index.METH_write(DEF_s_index_PLUS_1___d23);
}

void MOD_mkTb::RL_peek()
{
  tUInt32 DEF_SEL_ARR_s_stack_BITS_31_TO_0_0_s_stack_BITS_63_ETC___d28;
  tUInt32 DEF_signed_SEL_ARR_s_stack_BITS_31_TO_0_0_s_stack_ETC___d29;
  tUInt32 DEF_x__h940;
  DEF_x__h611 = INST_s_index.METH_read();
  DEF_x__h940 = DEF_x__h611 - 1u;
  DEF_s_stack__h897 = INST_s_stack.METH_read();
  DEF_v__h542 = DEF_s_stack__h897.get_whole_word(4u);
  DEF_v__h537 = DEF_s_stack__h897.get_whole_word(3u);
  DEF_v__h532 = DEF_s_stack__h897.get_whole_word(2u);
  DEF_v__h522 = DEF_s_stack__h897.get_whole_word(0u);
  DEF_v__h527 = DEF_s_stack__h897.get_whole_word(1u);
  switch (DEF_x__h940) {
  case 0u:
    DEF_SEL_ARR_s_stack_BITS_31_TO_0_0_s_stack_BITS_63_ETC___d28 = DEF_v__h522;
    break;
  case 1u:
    DEF_SEL_ARR_s_stack_BITS_31_TO_0_0_s_stack_BITS_63_ETC___d28 = DEF_v__h527;
    break;
  case 2u:
    DEF_SEL_ARR_s_stack_BITS_31_TO_0_0_s_stack_BITS_63_ETC___d28 = DEF_v__h532;
    break;
  case 3u:
    DEF_SEL_ARR_s_stack_BITS_31_TO_0_0_s_stack_BITS_63_ETC___d28 = DEF_v__h537;
    break;
  case 4u:
    DEF_SEL_ARR_s_stack_BITS_31_TO_0_0_s_stack_BITS_63_ETC___d28 = DEF_v__h542;
    break;
  default:
    DEF_SEL_ARR_s_stack_BITS_31_TO_0_0_s_stack_BITS_63_ETC___d28 = 2863311530u;
  }
  DEF_signed_SEL_ARR_s_stack_BITS_31_TO_0_0_s_stack_ETC___d29 = DEF_SEL_ARR_s_stack_BITS_31_TO_0_0_s_stack_BITS_63_ETC___d28;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32",
		   &__str_literal_1,
		   DEF_signed_SEL_ARR_s_stack_BITS_31_TO_0_0_s_stack_ETC___d29);
}

void MOD_mkTb::RL_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_wert.reset_RST(ARG_rst_in);
  INST_s_index.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_s_index.dump_state(indent + 2u);
  INST_s_stack.dump_state(indent + 2u);
  INST_wert.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 14u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15", 96u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d22", 160u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h175", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "s_stack__h897", 160u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h522", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h527", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h532", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h537", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h542", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h611", 32u);
  num = INST_s_index.dump_VCD_defs(num);
  num = INST_s_stack.dump_VCD_defs(num);
  num = INST_wert.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 96u);
    vcd_write_x(sim_hdl, num++, 160u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 160u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15) != DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15, 96u);
	backing.DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15 = DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15;
      }
      ++num;
      if ((backing.DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d22) != DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d22)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d22, 160u);
	backing.DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d22 = DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d22;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h175) != DEF_b__h175)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h175, 32u);
	backing.DEF_b__h175 = DEF_b__h175;
      }
      ++num;
      if ((backing.DEF_s_stack__h897) != DEF_s_stack__h897)
      {
	vcd_write_val(sim_hdl, num, DEF_s_stack__h897, 160u);
	backing.DEF_s_stack__h897 = DEF_s_stack__h897;
      }
      ++num;
      if ((backing.DEF_v__h522) != DEF_v__h522)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h522, 32u);
	backing.DEF_v__h522 = DEF_v__h522;
      }
      ++num;
      if ((backing.DEF_v__h527) != DEF_v__h527)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h527, 32u);
	backing.DEF_v__h527 = DEF_v__h527;
      }
      ++num;
      if ((backing.DEF_v__h532) != DEF_v__h532)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h532, 32u);
	backing.DEF_v__h532 = DEF_v__h532;
      }
      ++num;
      if ((backing.DEF_v__h537) != DEF_v__h537)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h537, 32u);
	backing.DEF_v__h537 = DEF_v__h537;
      }
      ++num;
      if ((backing.DEF_v__h542) != DEF_v__h542)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h542, 32u);
	backing.DEF_v__h542 = DEF_v__h542;
      }
      ++num;
      if ((backing.DEF_x__h611) != DEF_x__h611)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h611, 32u);
	backing.DEF_x__h611 = DEF_x__h611;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15, 96u);
      backing.DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15 = DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d15;
      vcd_write_val(sim_hdl, num++, DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d22, 160u);
      backing.DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d22 = DEF_IF_s_index_EQ_4_THEN_wert_ELSE_s_stack_BITS_15_ETC___d22;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h175, 32u);
      backing.DEF_b__h175 = DEF_b__h175;
      vcd_write_val(sim_hdl, num++, DEF_s_stack__h897, 160u);
      backing.DEF_s_stack__h897 = DEF_s_stack__h897;
      vcd_write_val(sim_hdl, num++, DEF_v__h522, 32u);
      backing.DEF_v__h522 = DEF_v__h522;
      vcd_write_val(sim_hdl, num++, DEF_v__h527, 32u);
      backing.DEF_v__h527 = DEF_v__h527;
      vcd_write_val(sim_hdl, num++, DEF_v__h532, 32u);
      backing.DEF_v__h532 = DEF_v__h532;
      vcd_write_val(sim_hdl, num++, DEF_v__h537, 32u);
      backing.DEF_v__h537 = DEF_v__h537;
      vcd_write_val(sim_hdl, num++, DEF_v__h542, 32u);
      backing.DEF_v__h542 = DEF_v__h542;
      vcd_write_val(sim_hdl, num++, DEF_x__h611, 32u);
      backing.DEF_x__h611 = DEF_x__h611;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_s_index.dump_VCD(dt, backing.INST_s_index);
  INST_s_stack.dump_VCD(dt, backing.INST_s_stack);
  INST_wert.dump_VCD(dt, backing.INST_wert);
}
