/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Nov 21 15:45:36 CET 2023
 * 
 */

/* Generation options: */
#ifndef __mkPipeline_h__
#define __mkPipeline_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkPipeline module */
class MOD_mkPipeline : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Fifo<tUInt32> INST_fifo_in;
  MOD_Fifo<tUInt32> INST_fifo_out;
  MOD_Reg<tUInt32> INST_params_0;
  MOD_Reg<tUInt32> INST_params_1;
  MOD_Reg<tUInt32> INST_params_2;
  MOD_Reg<tUInt64> INST_regs_0;
  MOD_Reg<tUInt64> INST_regs_1;
  MOD_Reg<tUInt64> INST_regs_2;
  MOD_Reg<tUInt64> INST_regs_3;
 
 /* Constructor */
 public:
  MOD_mkPipeline(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_setParam;
  tUInt8 PORT_EN_calc_result;
  tUInt8 PORT_EN_calc_put;
  tUInt8 PORT_setParam_addr;
  tUInt32 PORT_setParam_val;
  tUInt32 PORT_calc_put_x;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_setParam;
  tUInt8 DEF_WILL_FIRE_calc_result;
  tUInt8 DEF_WILL_FIRE_calc_put;
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
  void RL_alltogether();
 
 /* Methods */
 public:
  void METH_calc_put(tUInt32 ARG_calc_put_x);
  tUInt8 METH_RDY_calc_put();
  tUInt32 METH_calc_result();
  tUInt8 METH_RDY_calc_result();
  void METH_setParam(tUInt8 ARG_setParam_addr, tUInt32 ARG_setParam_val);
  tUInt8 METH_RDY_setParam();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkPipeline &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkPipeline &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkPipeline &backing);
};

#endif /* ifndef __mkPipeline_h__ */
