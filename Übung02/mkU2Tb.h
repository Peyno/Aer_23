/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Nov 21 15:54:13 CET 2023
 * 
 */

/* Generation options: */
#ifndef __mkU2Tb_h__
#define __mkU2Tb_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkPipeline.h"


/* Class declaration for the mkU2Tb module */
class MOD_mkU2Tb : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_abort;
  MOD_Reg<tUInt32> INST_correct_tests;
  MOD_mkPipeline INST_dut;
  MOD_Reg<tUInt32> INST_idx_get;
  MOD_Reg<tUInt32> INST_idx_put;
  MOD_Wire<tUInt8> INST_par_blocks_1_abort;
  MOD_Reg<tUInt8> INST_par_blocks_1_start_reg;
  MOD_Wire<tUInt8> INST_par_blocks_1_start_reg_1;
  MOD_Wire<tUInt8> INST_par_blocks_1_start_wire;
  MOD_Reg<tUInt8> INST_par_blocks_1_state_can_overlap;
  MOD_Reg<tUInt8> INST_par_blocks_1_state_fired;
  MOD_Wire<tUInt8> INST_par_blocks_1_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_par_blocks_1_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_par_blocks_1_state_overlap_pw;
  MOD_Wire<tUInt8> INST_par_blocks_1_state_set_pw;
  MOD_Wire<tUInt8> INST_par_blocks_abort;
  MOD_Reg<tUInt8> INST_par_blocks_start_reg;
  MOD_Wire<tUInt8> INST_par_blocks_start_reg_1;
  MOD_Wire<tUInt8> INST_par_blocks_start_wire;
  MOD_Reg<tUInt8> INST_par_blocks_state_can_overlap;
  MOD_Reg<tUInt8> INST_par_blocks_state_fired;
  MOD_Wire<tUInt8> INST_par_blocks_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_par_blocks_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_par_blocks_state_overlap_pw;
  MOD_Wire<tUInt8> INST_par_blocks_state_set_pw;
  MOD_Wire<tUInt8> INST_par_running;
  MOD_Reg<tUInt8> INST_running;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
 
 /* Constructor */
 public:
  MOD_mkU2Tb(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_action_l67c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l66c14;
  tUInt8 DEF_WILL_FIRE_RL_action_l65c33;
  tUInt8 DEF_WILL_FIRE_RL_action_l64c9;
  tUInt8 DEF_WILL_FIRE_RL_actionpar_start_l40c9;
  tUInt8 DEF_WILL_FIRE_RL_action_f_update_l48c17;
  tUInt8 DEF_WILL_FIRE_RL_action_l48c74;
  tUInt8 DEF_WILL_FIRE_RL_action_f_init_l48c17;
  tUInt8 DEF_WILL_FIRE_RL_action_l47c20;
  tUInt8 DEF_WILL_FIRE_RL_action_l46c20;
  tUInt8 DEF_WILL_FIRE_RL_action_l45c20;
  tUInt8 DEF_WILL_FIRE_RL_action_f_update_l42c17;
  tUInt8 DEF_WILL_FIRE_RL_action_l42c73;
  tUInt8 DEF_WILL_FIRE_RL_action_f_init_l42c17;
  tUInt8 DEF_WILL_FIRE_RL_action_f_update_l54c17;
  tUInt8 DEF_WILL_FIRE_RL_action_l54c73;
  tUInt8 DEF_WILL_FIRE_RL_action_f_init_l54c17;
  tUInt8 DEF_WILL_FIRE_RL_action_l39c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l38c12;
  tUInt8 DEF_WILL_FIRE_RL_action_l37c12;
  tUInt8 DEF_WILL_FIRE_RL_action_l36c17;
  tUInt32 DEF_b__h2970;
  tUInt32 DEF_x__h59893;
  tUInt32 DEF_idx_put___d150;
 
 /* Local definitions */
 private:
  tUInt32 DEF_idx_put_50_PLUS_1___d176;
 
 /* Rules */
 public:
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_par_blocks_start_reg__dreg_update();
  void RL_par_blocks_state_handle_abort();
  void RL_par_blocks_state_fired__dreg_update();
  void RL_par_blocks_state_every();
  void RL_par_blocks_restart();
  void RL_par_blocks_1_start_reg__dreg_update();
  void RL_par_blocks_1_state_handle_abort();
  void RL_par_blocks_1_state_fired__dreg_update();
  void RL_par_blocks_1_state_every();
  void RL_par_blocks_1_restart();
  void RL_restart();
  void RL_action_l36c17();
  void RL_action_l37c12();
  void RL_action_l38c12();
  void RL_action_l39c9();
  void RL_action_f_init_l54c17();
  void RL_action_l54c73();
  void RL_action_f_update_l54c17();
  void RL_action_f_init_l42c17();
  void RL_action_l42c73();
  void RL_action_f_update_l42c17();
  void RL_action_l45c20();
  void RL_action_l46c20();
  void RL_action_l47c20();
  void RL_action_f_init_l48c17();
  void RL_action_l48c74();
  void RL_action_f_update_l48c17();
  void RL_actionpar_start_l40c9();
  void RL_action_l64c9();
  void RL_action_l65c33();
  void RL_action_l66c14();
  void RL_action_l67c9();
  void RL_actionpar_run_l40c9();
  void RL_idle_l34c18();
  void RL_idle_l54c17();
  void RL_idle_l54c17_1();
  void RL_idle_l41c13();
  void RL_idle_l41c13_1();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void __me_check_15();
  void __me_check_16();
  void __me_check_17();
  void __me_check_18();
  void __me_check_19();
  void __me_check_20();
  void __me_check_22();
  void __me_check_23();
  void __me_check_24();
  void __me_check_25();
  void __me_check_26();
  void __me_check_27();
  void __me_check_28();
  void __me_check_29();
  void __me_check_32();
  void __me_check_33();
  void __me_check_34();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkU2Tb &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkU2Tb &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkU2Tb &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkU2Tb &backing);
};

#endif /* ifndef __mkU2Tb_h__ */
