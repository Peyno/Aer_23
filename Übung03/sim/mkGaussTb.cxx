/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Mon Jan  8 20:34:35 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkGaussTb.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("./GaussTbOut", 12u);
static std::string const __str_literal_1("./picture.png", 13u);


/* Constructor */
MOD_mkGaussTb::MOD_mkGaussTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_addressRead(simHdl, "addressRead", this, 64u),
    INST_addressWrite(simHdl, "addressWrite", this, 64u),
    INST_dut_in(simHdl, "dut_in", this, 72u, 2u, (tUInt8)1u, 0u),
    INST_dut_out(simHdl, "dut_out", this, 8u, 2u, (tUInt8)1u, 0u),
    INST_n_pixels(simHdl, "n_pixels", this, 32u),
    INST_read_x(simHdl, "read_x", this, 32u, 1u, (tUInt8)0u),
    INST_read_y(simHdl, "read_y", this, 32u, 1u, (tUInt8)0u),
    INST_started(simHdl, "started", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_writeCounter(simHdl, "writeCounter", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_b__h2477(12297829382473034410llu),
    DEF_b__h2368(12297829382473034410llu),
    DEF_dut_in_first____d4(72u),
    DEF_IF_NOT_read_x_1_PLUS_1_3_BIT_31_6_7_AND_NOT_re_ETC___d130(72u)
{
  symbol_count = 16u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkGaussTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "addressRead", SYM_MODULE, &INST_addressRead);
  init_symbol(&symbols[1u], "addressWrite", SYM_MODULE, &INST_addressWrite);
  init_symbol(&symbols[2u], "b__h5555", SYM_DEF, &DEF_b__h5555, 32u);
  init_symbol(&symbols[3u], "b__h5620", SYM_DEF, &DEF_b__h5620, 32u);
  init_symbol(&symbols[4u], "dut_in", SYM_MODULE, &INST_dut_in);
  init_symbol(&symbols[5u], "dut_out", SYM_MODULE, &INST_dut_out);
  init_symbol(&symbols[6u], "n_pixels", SYM_MODULE, &INST_n_pixels);
  init_symbol(&symbols[7u], "RL_clean_up", SYM_RULE);
  init_symbol(&symbols[8u], "RL_dut_convolve", SYM_RULE);
  init_symbol(&symbols[9u], "RL_init", SYM_RULE);
  init_symbol(&symbols[10u], "RL_pixels_in", SYM_RULE);
  init_symbol(&symbols[11u], "RL_pixels_out", SYM_RULE);
  init_symbol(&symbols[12u], "read_x", SYM_MODULE, &INST_read_x);
  init_symbol(&symbols[13u], "read_y", SYM_MODULE, &INST_read_y);
  init_symbol(&symbols[14u], "started", SYM_MODULE, &INST_started);
  init_symbol(&symbols[15u], "writeCounter", SYM_MODULE, &INST_writeCounter);
}


/* Rule actions */

void MOD_mkGaussTb::RL_dut_convolve()
{
  tUInt8 DEF_x__h270;
  tUInt8 DEF_x__h407;
  tUInt8 DEF_x__h1008;
  tUInt8 DEF_x__h1102;
  tUInt8 DEF_x__h1196;
  tUInt8 DEF_x__h1452;
  tUInt8 DEF_x__h1546;
  tUInt8 DEF_x__h1640;
  tUInt8 DEF_x__h1896;
  tUInt8 DEF_x__h2011;
  DEF_dut_in_first____d4 = INST_dut_in.METH_first();
  DEF_x__h2011 = DEF_dut_in_first____d4.get_bits_in_word8(2u, 0u, 8u);
  DEF_x__h1896 = DEF_dut_in_first____d4.get_bits_in_word8(1u, 24u, 8u);
  DEF_x__h1640 = DEF_dut_in_first____d4.get_bits_in_word8(1u, 16u, 8u);
  DEF_x__h1546 = DEF_dut_in_first____d4.get_bits_in_word8(1u, 8u, 8u);
  DEF_x__h1196 = DEF_dut_in_first____d4.get_bits_in_word8(0u, 24u, 8u);
  DEF_x__h1452 = DEF_dut_in_first____d4.get_bits_in_word8(1u, 0u, 8u);
  DEF_x__h1102 = DEF_dut_in_first____d4.get_bits_in_word8(0u, 16u, 8u);
  DEF_x__h1008 = DEF_dut_in_first____d4.get_bits_in_word8(0u, 8u, 8u);
  DEF_x__h407 = DEF_dut_in_first____d4.get_bits_in_word8(0u, 0u, 8u);
  DEF_x__h270 = (tUInt8)((4095u & ((4095u & ((4095u & ((4095u & ((4095u & ((4095u & ((4095u & ((4095u & ((4095u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h407))) + (4095u & (((((tUInt32)((tUInt8)0u)) << 9u) | (((tUInt32)(DEF_x__h1008)) << 1u)) | (tUInt32)((tUInt8)0u))))) + (4095u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h1102))))) + (4095u & (((((tUInt32)((tUInt8)0u)) << 9u) | (((tUInt32)(DEF_x__h1196)) << 1u)) | (tUInt32)((tUInt8)0u))))) + (4095u & (((((tUInt32)((tUInt8)0u)) << 10u) | (((tUInt32)(DEF_x__h1452)) << 2u)) | (tUInt32)((tUInt8)0u))))) + (4095u & (((((tUInt32)((tUInt8)0u)) << 9u) | (((tUInt32)(DEF_x__h1546)) << 1u)) | (tUInt32)((tUInt8)0u))))) + (4095u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h1640))))) + (4095u & (((((tUInt32)((tUInt8)0u)) << 9u) | (((tUInt32)(DEF_x__h1896)) << 1u)) | (tUInt32)((tUInt8)0u))))) + (4095u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h2011))))) >> 4u);
  INST_dut_in.METH_deq();
  INST_dut_out.METH_enq(DEF_x__h270);
}

void MOD_mkGaussTb::RL_init()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_b__h2368 = readImage_create(const_cast<char*>(copy_arg(__str_literal_1)));
  INST_addressRead.METH_write(DEF_b__h2368);
  INST_n_pixels.METH_write(548028u);
  INST_started.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_b__h2477 = writeImage_create(const_cast<char*>(copy_arg(__str_literal_2)), 0u, 1171u, 468u);
  INST_addressWrite.METH_write(DEF_b__h2477);
  delete_arg_copies();
}

void MOD_mkGaussTb::RL_pixels_in()
{
  tUInt8 DEF_NOT_read_x_1_PLUS_1_3_BIT_31_6___d47;
  tUInt8 DEF_NOT_read_x_1_BIT_31_1___d62;
  tUInt8 DEF_NOT_read_y_7_PLUS_1_5_BIT_31_8___d49;
  tUInt8 DEF_NOT_read_y_7_BIT_31_1___d82;
  tUInt8 DEF_NOT_read_y_7_PLUS_4294967295_05_BIT_31_06___d107;
  tUInt8 DEF_NOT_read_x_1_PLUS_4294967295_0_BIT_31_1___d72;
  tUInt8 DEF_read_x_1_EQ_1171___d42;
  tUInt32 DEF_IF_read_x_1_EQ_1171_2_THEN_1_ELSE_read_x_1_PLU_ETC___d44;
  tUInt32 DEF_b__h5349;
  tUInt32 DEF_b__h4232;
  tUInt32 DEF_b__h5609;
  tUInt32 DEF_b__h5604;
  tUInt32 DEF_read_y_7_PLUS_1_5_MUL_1173_6_BITS_31_TO_0___d57;
  tUInt32 DEF_read_y_7_MUL_1173_7_BITS_31_TO_0___d88;
  tUInt32 DEF_read_y_7_PLUS_4294967295_05_MUL_1173_12_BITS_3_ETC___d113;
  tUInt8 DEF_result___1__h4074;
  tUInt8 DEF_result___1__h3943;
  tUInt8 DEF_result___1__h4204;
  tUInt8 DEF_result___1__h4630;
  tUInt8 DEF_result___1__h4760;
  tUInt8 DEF_result___1__h4890;
  tUInt8 DEF_result___1__h5316;
  tUInt8 DEF_result___1__h5446;
  tUInt8 DEF_result___1__h5576;
  tUInt8 DEF_read_x_BIT_31___h5417;
  tUInt8 DEF_read_x_1_SLT_1173___d64;
  tUInt8 DEF_read_x_1_PLUS_1_3_SLT_1173___d51;
  tUInt8 DEF_read_y_BIT_31___h4872;
  tUInt8 DEF_read_y_7_SLT_470___d85;
  tUInt8 DEF_read_y_7_PLUS_1_5_SLT_470___d53;
  tUInt8 DEF_read_y_7_PLUS_4294967295_05_SLT_470___d110;
  tUInt8 DEF_read_x_1_PLUS_4294967295_0_SLT_1173___d74;
  tUInt32 DEF_b__h5540;
  DEF_b__h5540 = INST_read_x.METH_read();
  DEF_read_x_1_SLT_1173___d64 = primSLT8(1u, 32u, (tUInt32)(DEF_b__h5540), 32u, 1173u);
  DEF_read_x_BIT_31___h5417 = (tUInt8)(DEF_b__h5540 >> 31u);
  DEF_b__h3944 = INST_addressRead.METH_read();
  DEF_b__h5555 = INST_read_y.METH_read();
  DEF_read_y_7_SLT_470___d85 = primSLT8(1u, 32u, (tUInt32)(DEF_b__h5555), 32u, 470u);
  DEF_read_y_BIT_31___h4872 = (tUInt8)(DEF_b__h5555 >> 31u);
  DEF_read_y_7_MUL_1173_7_BITS_31_TO_0___d88 = (tUInt32)(((tUInt64)(DEF_b__h5555)) * ((tUInt64)(1173u)));
  DEF_result___1__h4760 = readImage_getPixelAt(DEF_b__h3944,
					       DEF_read_y_7_MUL_1173_7_BITS_31_TO_0___d88 + DEF_b__h5540);
  DEF_b__h5604 = DEF_b__h5555 + 4294967295u;
  DEF_read_y_7_PLUS_4294967295_05_SLT_470___d110 = primSLT8(1u,
							    32u,
							    (tUInt32)(DEF_b__h5604),
							    32u,
							    470u);
  DEF_read_y_7_PLUS_4294967295_05_MUL_1173_12_BITS_3_ETC___d113 = (tUInt32)(((tUInt64)(DEF_b__h5604)) * ((tUInt64)(1173u)));
  DEF_result___1__h5446 = readImage_getPixelAt(DEF_b__h3944,
					       DEF_read_y_7_PLUS_4294967295_05_MUL_1173_12_BITS_3_ETC___d113 + DEF_b__h5540);
  DEF_b__h5609 = DEF_b__h5540 + 4294967295u;
  DEF_read_x_1_PLUS_4294967295_0_SLT_1173___d74 = primSLT8(1u,
							   32u,
							   (tUInt32)(DEF_b__h5609),
							   32u,
							   1173u);
  DEF_result___1__h5576 = readImage_getPixelAt(DEF_b__h3944,
					       DEF_read_y_7_PLUS_4294967295_05_MUL_1173_12_BITS_3_ETC___d113 + DEF_b__h5609);
  DEF_result___1__h4890 = readImage_getPixelAt(DEF_b__h3944,
					       DEF_read_y_7_MUL_1173_7_BITS_31_TO_0___d88 + DEF_b__h5609);
  DEF_b__h4232 = DEF_b__h5555 + 1u;
  DEF_read_y_7_PLUS_1_5_SLT_470___d53 = primSLT8(1u, 32u, (tUInt32)(DEF_b__h4232), 32u, 470u);
  DEF_read_y_7_PLUS_1_5_MUL_1173_6_BITS_31_TO_0___d57 = (tUInt32)(((tUInt64)(DEF_b__h4232)) * ((tUInt64)(1173u)));
  DEF_result___1__h4204 = readImage_getPixelAt(DEF_b__h3944,
					       DEF_read_y_7_PLUS_1_5_MUL_1173_6_BITS_31_TO_0___d57 + DEF_b__h5609);
  DEF_result___1__h4074 = readImage_getPixelAt(DEF_b__h3944,
					       DEF_read_y_7_PLUS_1_5_MUL_1173_6_BITS_31_TO_0___d57 + DEF_b__h5540);
  DEF_b__h5349 = DEF_b__h5540 + 1u;
  DEF_read_x_1_PLUS_1_3_SLT_1173___d51 = primSLT8(1u, 32u, (tUInt32)(DEF_b__h5349), 32u, 1173u);
  DEF_result___1__h5316 = readImage_getPixelAt(DEF_b__h3944,
					       DEF_read_y_7_PLUS_4294967295_05_MUL_1173_12_BITS_3_ETC___d113 + DEF_b__h5349);
  DEF_result___1__h4630 = readImage_getPixelAt(DEF_b__h3944,
					       DEF_read_y_7_MUL_1173_7_BITS_31_TO_0___d88 + DEF_b__h5349);
  DEF_result___1__h3943 = readImage_getPixelAt(DEF_b__h3944,
					       DEF_read_y_7_PLUS_1_5_MUL_1173_6_BITS_31_TO_0___d57 + DEF_b__h5349);
  DEF_read_x_1_EQ_1171___d42 = DEF_b__h5540 == 1171u;
  DEF_IF_read_x_1_EQ_1171_2_THEN_1_ELSE_read_x_1_PLU_ETC___d44 = DEF_read_x_1_EQ_1171___d42 ? 1u : DEF_b__h5349;
  DEF_NOT_read_x_1_PLUS_4294967295_0_BIT_31_1___d72 = !((tUInt8)(DEF_b__h5609 >> 31u));
  DEF_NOT_read_y_7_BIT_31_1___d82 = !DEF_read_y_BIT_31___h4872;
  DEF_NOT_read_y_7_PLUS_4294967295_05_BIT_31_06___d107 = !((tUInt8)(DEF_b__h5604 >> 31u));
  DEF_NOT_read_y_7_PLUS_1_5_BIT_31_8___d49 = !((tUInt8)(DEF_b__h4232 >> 31u));
  DEF_NOT_read_x_1_BIT_31_1___d62 = !DEF_read_x_BIT_31___h5417;
  DEF_NOT_read_x_1_PLUS_1_3_BIT_31_6___d47 = !((tUInt8)(DEF_b__h5349 >> 31u));
  DEF_IF_NOT_read_x_1_PLUS_1_3_BIT_31_6_7_AND_NOT_re_ETC___d130.set_bits_in_word(((DEF_NOT_read_x_1_PLUS_1_3_BIT_31_6___d47 && DEF_NOT_read_y_7_PLUS_1_5_BIT_31_8___d49) && DEF_read_x_1_PLUS_1_3_SLT_1173___d51) && DEF_read_y_7_PLUS_1_5_SLT_470___d53 ? DEF_result___1__h3943 : (tUInt8)0u,
										 2u,
										 0u,
										 8u).build_concat(((DEF_NOT_read_x_1_BIT_31_1___d62 && DEF_NOT_read_y_7_PLUS_1_5_BIT_31_8___d49) && DEF_read_x_1_SLT_1173___d64) && DEF_read_y_7_PLUS_1_5_SLT_470___d53 ? DEF_result___1__h4074 : (tUInt8)0u,
												  56u,
												  8u).set_bits_in_word(((DEF_NOT_read_x_1_PLUS_4294967295_0_BIT_31_1___d72 && DEF_NOT_read_y_7_PLUS_1_5_BIT_31_8___d49) && DEF_read_x_1_PLUS_4294967295_0_SLT_1173___d74) && DEF_read_y_7_PLUS_1_5_SLT_470___d53 ? DEF_result___1__h4204 : (tUInt8)0u,
														       1u,
														       16u,
														       8u).set_bits_in_word(((DEF_NOT_read_x_1_PLUS_1_3_BIT_31_6___d47 && DEF_NOT_read_y_7_BIT_31_1___d82) && DEF_read_x_1_PLUS_1_3_SLT_1173___d51) && DEF_read_y_7_SLT_470___d85 ? DEF_result___1__h4630 : (tUInt8)0u,
																	    1u,
																	    8u,
																	    8u).set_bits_in_word(((DEF_NOT_read_x_1_BIT_31_1___d62 && DEF_NOT_read_y_7_BIT_31_1___d82) && DEF_read_x_1_SLT_1173___d64) && DEF_read_y_7_SLT_470___d85 ? DEF_result___1__h4760 : (tUInt8)0u,
																				 1u,
																				 0u,
																				 8u).build_concat(((DEF_NOT_read_x_1_PLUS_4294967295_0_BIT_31_1___d72 && DEF_NOT_read_y_7_BIT_31_1___d82) && DEF_read_x_1_PLUS_4294967295_0_SLT_1173___d74) && DEF_read_y_7_SLT_470___d85 ? DEF_result___1__h4890 : (tUInt8)0u,
																						  24u,
																						  8u).set_bits_in_word(((DEF_NOT_read_x_1_PLUS_1_3_BIT_31_6___d47 && DEF_NOT_read_y_7_PLUS_4294967295_05_BIT_31_06___d107) && DEF_read_x_1_PLUS_1_3_SLT_1173___d51) && DEF_read_y_7_PLUS_4294967295_05_SLT_470___d110 ? DEF_result___1__h5316 : (tUInt8)0u,
																								       0u,
																								       16u,
																								       8u).set_bits_in_word(((DEF_NOT_read_x_1_BIT_31_1___d62 && DEF_NOT_read_y_7_PLUS_4294967295_05_BIT_31_06___d107) && DEF_read_x_1_SLT_1173___d64) && DEF_read_y_7_PLUS_4294967295_05_SLT_470___d110 ? DEF_result___1__h5446 : (tUInt8)0u,
																											    0u,
																											    8u,
																											    8u).set_bits_in_word(((DEF_NOT_read_x_1_PLUS_4294967295_0_BIT_31_1___d72 && DEF_NOT_read_y_7_PLUS_4294967295_05_BIT_31_06___d107) && DEF_read_x_1_PLUS_4294967295_0_SLT_1173___d74) && DEF_read_y_7_PLUS_4294967295_05_SLT_470___d110 ? DEF_result___1__h5576 : (tUInt8)0u,
																														 0u,
																														 0u,
																														 8u);
  INST_read_x.METH_write(DEF_IF_read_x_1_EQ_1171_2_THEN_1_ELSE_read_x_1_PLU_ETC___d44);
  if (DEF_read_x_1_EQ_1171___d42)
    INST_read_y.METH_write(DEF_b__h4232);
  INST_dut_in.METH_enq(DEF_IF_NOT_read_x_1_PLUS_1_3_BIT_31_6_7_AND_NOT_re_ETC___d130);
}

void MOD_mkGaussTb::RL_pixels_out()
{
  tUInt32 DEF_writeCounter_32_PLUS_1___d139;
  tUInt8 DEF_v__h5630;
  DEF_b__h5675 = INST_addressWrite.METH_read();
  DEF_b__h5620 = INST_writeCounter.METH_read();
  DEF_v__h5630 = INST_dut_out.METH_first();
  DEF_writeCounter_32_PLUS_1___d139 = DEF_b__h5620 + 1u;
  INST_dut_out.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    writeImage_putPixel(DEF_b__h5675, DEF_v__h5630);
  INST_writeCounter.METH_write(DEF_writeCounter_32_PLUS_1___d139);
}

void MOD_mkGaussTb::RL_clean_up()
{
  DEF_b__h3944 = INST_addressRead.METH_read();
  DEF_b__h5675 = INST_addressWrite.METH_read();
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    readImage_delete(DEF_b__h3944);
    writeImage_delete(DEF_b__h5675);
    dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkGaussTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_writeCounter.reset_RST(ARG_rst_in);
  INST_started.reset_RST(ARG_rst_in);
  INST_read_y.reset_RST(ARG_rst_in);
  INST_read_x.reset_RST(ARG_rst_in);
  INST_dut_out.reset_RST(ARG_rst_in);
  INST_dut_in.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkGaussTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkGaussTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_addressRead.dump_state(indent + 2u);
  INST_addressWrite.dump_state(indent + 2u);
  INST_dut_in.dump_state(indent + 2u);
  INST_dut_out.dump_state(indent + 2u);
  INST_n_pixels.dump_state(indent + 2u);
  INST_read_x.dump_state(indent + 2u);
  INST_read_y.dump_state(indent + 2u);
  INST_started.dump_state(indent + 2u);
  INST_writeCounter.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkGaussTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 18u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_NOT_read_x_1_PLUS_1_3_BIT_31_6_7_AND_NOT_re_ETC___d130", 72u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2368", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2477", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h3944", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h5555", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h5620", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h5675", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_in_first____d4", 72u);
  num = INST_addressRead.dump_VCD_defs(num);
  num = INST_addressWrite.dump_VCD_defs(num);
  num = INST_dut_in.dump_VCD_defs(num);
  num = INST_dut_out.dump_VCD_defs(num);
  num = INST_n_pixels.dump_VCD_defs(num);
  num = INST_read_x.dump_VCD_defs(num);
  num = INST_read_y.dump_VCD_defs(num);
  num = INST_started.dump_VCD_defs(num);
  num = INST_writeCounter.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkGaussTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkGaussTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkGaussTb::vcd_defs(tVCDDumpType dt, MOD_mkGaussTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 72u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_NOT_read_x_1_PLUS_1_3_BIT_31_6_7_AND_NOT_re_ETC___d130) != DEF_IF_NOT_read_x_1_PLUS_1_3_BIT_31_6_7_AND_NOT_re_ETC___d130)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_NOT_read_x_1_PLUS_1_3_BIT_31_6_7_AND_NOT_re_ETC___d130, 72u);
	backing.DEF_IF_NOT_read_x_1_PLUS_1_3_BIT_31_6_7_AND_NOT_re_ETC___d130 = DEF_IF_NOT_read_x_1_PLUS_1_3_BIT_31_6_7_AND_NOT_re_ETC___d130;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h2368) != DEF_b__h2368)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2368, 64u);
	backing.DEF_b__h2368 = DEF_b__h2368;
      }
      ++num;
      if ((backing.DEF_b__h2477) != DEF_b__h2477)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2477, 64u);
	backing.DEF_b__h2477 = DEF_b__h2477;
      }
      ++num;
      if ((backing.DEF_b__h3944) != DEF_b__h3944)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h3944, 64u);
	backing.DEF_b__h3944 = DEF_b__h3944;
      }
      ++num;
      if ((backing.DEF_b__h5555) != DEF_b__h5555)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h5555, 32u);
	backing.DEF_b__h5555 = DEF_b__h5555;
      }
      ++num;
      if ((backing.DEF_b__h5620) != DEF_b__h5620)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h5620, 32u);
	backing.DEF_b__h5620 = DEF_b__h5620;
      }
      ++num;
      if ((backing.DEF_b__h5675) != DEF_b__h5675)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h5675, 64u);
	backing.DEF_b__h5675 = DEF_b__h5675;
      }
      ++num;
      if ((backing.DEF_dut_in_first____d4) != DEF_dut_in_first____d4)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_in_first____d4, 72u);
	backing.DEF_dut_in_first____d4 = DEF_dut_in_first____d4;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_NOT_read_x_1_PLUS_1_3_BIT_31_6_7_AND_NOT_re_ETC___d130, 72u);
      backing.DEF_IF_NOT_read_x_1_PLUS_1_3_BIT_31_6_7_AND_NOT_re_ETC___d130 = DEF_IF_NOT_read_x_1_PLUS_1_3_BIT_31_6_7_AND_NOT_re_ETC___d130;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h2368, 64u);
      backing.DEF_b__h2368 = DEF_b__h2368;
      vcd_write_val(sim_hdl, num++, DEF_b__h2477, 64u);
      backing.DEF_b__h2477 = DEF_b__h2477;
      vcd_write_val(sim_hdl, num++, DEF_b__h3944, 64u);
      backing.DEF_b__h3944 = DEF_b__h3944;
      vcd_write_val(sim_hdl, num++, DEF_b__h5555, 32u);
      backing.DEF_b__h5555 = DEF_b__h5555;
      vcd_write_val(sim_hdl, num++, DEF_b__h5620, 32u);
      backing.DEF_b__h5620 = DEF_b__h5620;
      vcd_write_val(sim_hdl, num++, DEF_b__h5675, 64u);
      backing.DEF_b__h5675 = DEF_b__h5675;
      vcd_write_val(sim_hdl, num++, DEF_dut_in_first____d4, 72u);
      backing.DEF_dut_in_first____d4 = DEF_dut_in_first____d4;
    }
}

void MOD_mkGaussTb::vcd_prims(tVCDDumpType dt, MOD_mkGaussTb &backing)
{
  INST_addressRead.dump_VCD(dt, backing.INST_addressRead);
  INST_addressWrite.dump_VCD(dt, backing.INST_addressWrite);
  INST_dut_in.dump_VCD(dt, backing.INST_dut_in);
  INST_dut_out.dump_VCD(dt, backing.INST_dut_out);
  INST_n_pixels.dump_VCD(dt, backing.INST_n_pixels);
  INST_read_x.dump_VCD(dt, backing.INST_read_x);
  INST_read_y.dump_VCD(dt, backing.INST_read_y);
  INST_started.dump_VCD(dt, backing.INST_started);
  INST_writeCounter.dump_VCD(dt, backing.INST_writeCounter);
}
