/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Wed Dec 27 16:58:23 CET 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_2("(x, y) = (%0d, %0d): r2 fires", 29u);
static std::string const __str_literal_1("(x, y) = (%0d, %0d); r1 fires", 29u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_x(simHdl, "x", this, 32u, 0u, (tUInt8)0u),
    INST_y(simHdl, "y", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h110", SYM_DEF, &DEF_b__h110, 32u);
  init_symbol(&symbols[1u], "b__h111", SYM_DEF, &DEF_b__h111, 32u);
  init_symbol(&symbols[2u], "RL_r1", SYM_RULE);
  init_symbol(&symbols[3u], "RL_r2", SYM_RULE);
  init_symbol(&symbols[4u], "x", SYM_MODULE, &INST_x);
  init_symbol(&symbols[5u], "y", SYM_MODULE, &INST_y);
}


/* Rule actions */

void MOD_mkTb::RL_r1()
{
  tUInt32 DEF_y_PLUS_1___d5;
  tUInt32 DEF_x_PLUS_5___d4;
  tUInt8 DEF_NOT_x_SLE_30___d9;
  DEF_b__h110 = INST_x.METH_read();
  DEF_signed_x___d6 = DEF_b__h110;
  DEF_b__h111 = INST_y.METH_read();
  DEF_signed_y___d7 = DEF_b__h111;
  DEF_x_PLUS_5___d4 = DEF_b__h110 + 5u;
  DEF_NOT_x_SLE_30___d9 = !primSLE8(1u, 32u, (tUInt32)(DEF_b__h110), 32u, 30u);
  DEF_y_PLUS_1___d5 = DEF_b__h111 + 1u;
  INST_x.METH_write(DEF_x_PLUS_5___d4);
  INST_y.METH_write(DEF_y_PLUS_1___d5);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,-32,-32", &__str_literal_1, DEF_signed_x___d6, DEF_signed_y___d7);
    if (DEF_NOT_x_SLE_30___d9)
      dollar_finish(sim_hdl, "32", 0u);
  }
}

void MOD_mkTb::RL_r2()
{
  tUInt32 DEF_y_PLUS_4___d12;
  tUInt32 DEF_x_PLUS_1___d11;
  DEF_b__h110 = INST_x.METH_read();
  DEF_signed_x___d6 = DEF_b__h110;
  DEF_b__h111 = INST_y.METH_read();
  DEF_signed_y___d7 = DEF_b__h111;
  DEF_x_PLUS_1___d11 = DEF_b__h110 + 1u;
  DEF_y_PLUS_4___d12 = DEF_b__h111 + 4u;
  INST_x.METH_write(DEF_x_PLUS_1___d11);
  INST_y.METH_write(DEF_y_PLUS_4___d12);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32,-32", &__str_literal_2, DEF_signed_x___d6, DEF_signed_y___d7);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_y.reset_RST(ARG_rst_in);
  INST_x.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_x.dump_state(indent + 2u);
  INST_y.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 7u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h110", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h111", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_x___d6", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_y___d7", 32u);
  num = INST_x.dump_VCD_defs(num);
  num = INST_y.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h110) != DEF_b__h110)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h110, 32u);
	backing.DEF_b__h110 = DEF_b__h110;
      }
      ++num;
      if ((backing.DEF_b__h111) != DEF_b__h111)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h111, 32u);
	backing.DEF_b__h111 = DEF_b__h111;
      }
      ++num;
      if ((backing.DEF_signed_x___d6) != DEF_signed_x___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_x___d6, 32u);
	backing.DEF_signed_x___d6 = DEF_signed_x___d6;
      }
      ++num;
      if ((backing.DEF_signed_y___d7) != DEF_signed_y___d7)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_y___d7, 32u);
	backing.DEF_signed_y___d7 = DEF_signed_y___d7;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h110, 32u);
      backing.DEF_b__h110 = DEF_b__h110;
      vcd_write_val(sim_hdl, num++, DEF_b__h111, 32u);
      backing.DEF_b__h111 = DEF_b__h111;
      vcd_write_val(sim_hdl, num++, DEF_signed_x___d6, 32u);
      backing.DEF_signed_x___d6 = DEF_signed_x___d6;
      vcd_write_val(sim_hdl, num++, DEF_signed_y___d7, 32u);
      backing.DEF_signed_y___d7 = DEF_signed_y___d7;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_x.dump_VCD(dt, backing.INST_x);
  INST_y.dump_VCD(dt, backing.INST_y);
}
