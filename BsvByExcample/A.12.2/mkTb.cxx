/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Fri Jan 12 15:57:15 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_1("arr1[i] = %x", 12u);
static std::string const __str_literal_2("vec2[i] = %x", 12u);
static std::string const __str_literal_3("vec3[i] = %d", 12u);
static std::string const __str_literal_4("vec[i] = %d", 11u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  symbol_count = 4u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "RL_displayArray", SYM_RULE);
  init_symbol(&symbols[1u], "RL_displayVec2", SYM_RULE);
  init_symbol(&symbols[2u], "RL_displayVec3", SYM_RULE);
  init_symbol(&symbols[3u], "RL_displayVec4", SYM_RULE);
}


/* Rule actions */

void MOD_mkTb::RL_displayArray()
{
  DEF_signed_0___d1 = 0u;
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_1, DEF_signed_0___d1);
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_1, DEF_signed_0___d1);
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_1, DEF_signed_0___d1);
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_1, DEF_signed_0___d1);
}

void MOD_mkTb::RL_displayVec2()
{
  DEF_signed_0___d1 = 0u;
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_2, DEF_signed_0___d1);
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_2, DEF_signed_0___d1);
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_2, DEF_signed_0___d1);
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_2, DEF_signed_0___d1);
}

void MOD_mkTb::RL_displayVec3()
{
  tUInt32 DEF_signed_1___d2;
  tUInt32 DEF_signed_2___d3;
  tUInt32 DEF_signed_3___d4;
  DEF_signed_3___d4 = 3u;
  DEF_signed_2___d3 = 2u;
  DEF_signed_1___d2 = 1u;
  DEF_signed_0___d1 = 0u;
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_3, DEF_signed_0___d1);
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_3, DEF_signed_1___d2);
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_3, DEF_signed_2___d3);
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_3, DEF_signed_3___d4);
}

void MOD_mkTb::RL_displayVec4()
{
  tUInt32 DEF_signed_13___d5;
  tUInt32 DEF_signed_26___d6;
  tUInt32 DEF_signed_39___d7;
  DEF_signed_39___d7 = 39u;
  DEF_signed_26___d6 = 26u;
  DEF_signed_13___d5 = 13u;
  DEF_signed_0___d1 = 0u;
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_4, DEF_signed_0___d1);
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_4, DEF_signed_13___d5);
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_4, DEF_signed_26___d6);
  dollar_display(sim_hdl, this, "s,-16", &__str_literal_4, DEF_signed_39___d7);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 2u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_0___d1", 16u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_signed_0___d1) != DEF_signed_0___d1)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_0___d1, 16u);
	backing.DEF_signed_0___d1 = DEF_signed_0___d1;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_signed_0___d1, 16u);
      backing.DEF_signed_0___d1 = DEF_signed_0___d1;
    }
}
