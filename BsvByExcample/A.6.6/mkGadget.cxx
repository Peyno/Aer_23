/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Jan  9 16:51:47 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkGadget.h"


/* String declarations */
static std::string const __str_literal_1("Idle cycle %0d", 14u);


/* Constructor */
MOD_mkGadget::MOD_mkGadget(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_idle_cycles(simHdl, "idle_cycles", this, 32u, 0u, (tUInt8)0u),
    INST_infifo(simHdl, "infifo", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_outfifo(simHdl, "outfifo", this, 32u, 2u, (tUInt8)1u, 0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 5u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkGadget::init_symbols_0()
{
  init_symbol(&symbols[0u], "idle_cycles", SYM_MODULE, &INST_idle_cycles);
  init_symbol(&symbols[1u], "infifo", SYM_MODULE, &INST_infifo);
  init_symbol(&symbols[2u], "outfifo", SYM_MODULE, &INST_outfifo);
  init_symbol(&symbols[3u], "RL_count_idle_cycles", SYM_RULE);
  init_symbol(&symbols[4u], "RL_enqueue_item", SYM_RULE);
}


/* Rule actions */

void MOD_mkGadget::RL_enqueue_item()
{
  tUInt32 DEF_infifo_first____d4;
  DEF_infifo_first____d4 = INST_infifo.METH_first();
  INST_outfifo.METH_enq(DEF_infifo_first____d4);
  INST_infifo.METH_deq();
}

void MOD_mkGadget::RL_count_idle_cycles()
{
  tUInt32 DEF_b__h346;
  tUInt32 DEF_idle_cycles_PLUS_1___d6;
  tUInt32 DEF_signed_idle_cycles_PLUS_1___d7;
  DEF_b__h346 = INST_idle_cycles.METH_read();
  DEF_idle_cycles_PLUS_1___d6 = DEF_b__h346 + 1u;
  DEF_signed_idle_cycles_PLUS_1___d7 = DEF_idle_cycles_PLUS_1___d6;
  INST_idle_cycles.METH_write(DEF_idle_cycles_PLUS_1___d6);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_1, DEF_signed_idle_cycles_PLUS_1___d7);
}


/* Methods */

void MOD_mkGadget::METH_request_put(tUInt32 ARG_request_put)
{
  INST_infifo.METH_enq(ARG_request_put);
}

tUInt8 MOD_mkGadget::METH_RDY_request_put()
{
  tUInt8 DEF_CAN_FIRE_request_put;
  tUInt8 PORT_RDY_request_put;
  DEF_CAN_FIRE_request_put = INST_infifo.METH_i_notFull();
  PORT_RDY_request_put = DEF_CAN_FIRE_request_put;
  return PORT_RDY_request_put;
}

tUInt32 MOD_mkGadget::METH_response_get()
{
  tUInt32 DEF_response_get__avValue1;
  tUInt32 PORT_response_get;
  DEF_response_get__avValue1 = INST_outfifo.METH_first();
  PORT_response_get = DEF_response_get__avValue1;
  INST_outfifo.METH_deq();
  return PORT_response_get;
}

tUInt8 MOD_mkGadget::METH_RDY_response_get()
{
  tUInt8 DEF_CAN_FIRE_response_get;
  tUInt8 PORT_RDY_response_get;
  DEF_CAN_FIRE_response_get = INST_outfifo.METH_i_notEmpty();
  PORT_RDY_response_get = DEF_CAN_FIRE_response_get;
  return PORT_RDY_response_get;
}


/* Reset routines */

void MOD_mkGadget::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_outfifo.reset_RST(ARG_rst_in);
  INST_infifo.reset_RST(ARG_rst_in);
  INST_idle_cycles.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkGadget::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkGadget::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_idle_cycles.dump_state(indent + 2u);
  INST_infifo.dump_state(indent + 2u);
  INST_outfifo.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkGadget::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 4u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_idle_cycles.dump_VCD_defs(num);
  num = INST_infifo.dump_VCD_defs(num);
  num = INST_outfifo.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkGadget::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkGadget &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkGadget::vcd_defs(tVCDDumpType dt, MOD_mkGadget &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkGadget::vcd_prims(tVCDDumpType dt, MOD_mkGadget &backing)
{
  INST_idle_cycles.dump_VCD(dt, backing.INST_idle_cycles);
  INST_infifo.dump_VCD(dt, backing.INST_infifo);
  INST_outfifo.dump_VCD(dt, backing.INST_outfifo);
}
