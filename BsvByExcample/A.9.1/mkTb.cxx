/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Wed Jan 10 14:15:04 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_1("=== step 0 ===", 14u);
static std::string const __str_literal_10("=== step 1 ===", 14u);
static std::string const __str_literal_11("All done", 8u);
static std::string const __str_literal_3("enum1 DOX =>", 12u);
static std::string const __str_literal_4("enum1 DOY =>", 12u);
static std::string const __str_literal_5("enum1 FINISH =>", 15u);
static std::string const __str_literal_2("enum1 IDLE =>", 13u);
static std::string const __str_literal_6("enum2 S0 =>", 11u);
static std::string const __str_literal_7("enum2 S1 =>", 11u);
static std::string const __str_literal_8("enum3 S2 =>", 11u);
static std::string const __str_literal_9("enum4 S3 =>", 11u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_r1(simHdl, "r1", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_r2(simHdl, "r2", this, 8u, (tUInt8)254u, (tUInt8)0u),
    INST_step(simHdl, "step", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 7u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h141", SYM_DEF, &DEF_b__h141, 32u);
  init_symbol(&symbols[1u], "RL_inint", SYM_RULE);
  init_symbol(&symbols[2u], "RL_step1", SYM_RULE);
  init_symbol(&symbols[3u], "RL_step2", SYM_RULE);
  init_symbol(&symbols[4u], "r1", SYM_MODULE, &INST_r1);
  init_symbol(&symbols[5u], "r2", SYM_MODULE, &INST_r2);
  init_symbol(&symbols[6u], "step", SYM_MODULE, &INST_step);
}


/* Rule actions */

void MOD_mkTb::RL_inint()
{
  DEF_b__h141 = INST_step.METH_read();
  DEF_step_PLUS_1___d3 = DEF_b__h141 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_2, (tUInt8)0u);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_3, (tUInt8)1u);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_4, (tUInt8)2u);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_5, (tUInt8)3u);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_6, (tUInt8)43u);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_7, (tUInt8)44u);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_8, (tUInt8)20u);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_9, (tUInt8)254u);
  }
  INST_step.METH_write(DEF_step_PLUS_1___d3);
}

void MOD_mkTb::RL_step1()
{
  DEF_b__h141 = INST_step.METH_read();
  DEF_step_PLUS_1___d3 = DEF_b__h141 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_10);
  INST_step.METH_write(DEF_step_PLUS_1___d3);
}

void MOD_mkTb::RL_step2()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_11);
    dollar_finish(sim_hdl, "32", 0u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_step.reset_RST(ARG_rst_in);
  INST_r2.reset_RST(ARG_rst_in);
  INST_r1.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_r1.dump_state(indent + 2u);
  INST_r2.dump_state(indent + 2u);
  INST_step.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 6u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h141", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "step_PLUS_1___d3", 32u);
  num = INST_r1.dump_VCD_defs(num);
  num = INST_r2.dump_VCD_defs(num);
  num = INST_step.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h141) != DEF_b__h141)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h141, 32u);
	backing.DEF_b__h141 = DEF_b__h141;
      }
      ++num;
      if ((backing.DEF_step_PLUS_1___d3) != DEF_step_PLUS_1___d3)
      {
	vcd_write_val(sim_hdl, num, DEF_step_PLUS_1___d3, 32u);
	backing.DEF_step_PLUS_1___d3 = DEF_step_PLUS_1___d3;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h141, 32u);
      backing.DEF_b__h141 = DEF_b__h141;
      vcd_write_val(sim_hdl, num++, DEF_step_PLUS_1___d3, 32u);
      backing.DEF_step_PLUS_1___d3 = DEF_step_PLUS_1___d3;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_r1.dump_VCD(dt, backing.INST_r1);
  INST_r2.dump_VCD(dt, backing.INST_r2);
  INST_step.dump_VCD(dt, backing.INST_step);
}
