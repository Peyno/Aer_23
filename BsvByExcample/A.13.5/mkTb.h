/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Sun Jan 14 00:04:32 CET 2024
 * 
 */

/* Generation options: */
#ifndef __mkTb_h__
#define __mkTb_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkTb module */
class MOD_mkTb : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_cond;
  MOD_Fifo<tUInt32> INST_fifo;
  MOD_Reg<tUInt32> INST_ii;
  MOD_Reg<tUInt32> INST_jj;
  MOD_Reg<tUInt32> INST_kk;
  MOD_Wire<tUInt8> INST_rcvrFSM_abort;
  MOD_ConfigReg<tUInt8> INST_rcvrFSM_jj_repeat_count;
  MOD_Reg<tUInt8> INST_rcvrFSM_start_reg;
  MOD_Reg<tUInt8> INST_rcvrFSM_start_reg_1;
  MOD_Wire<tUInt8> INST_rcvrFSM_start_reg_2;
  MOD_Wire<tUInt8> INST_rcvrFSM_start_wire;
  MOD_Reg<tUInt8> INST_rcvrFSM_state_can_overlap;
  MOD_Reg<tUInt8> INST_rcvrFSM_state_fired;
  MOD_Wire<tUInt8> INST_rcvrFSM_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_rcvrFSM_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_rcvrFSM_state_overlap_pw;
  MOD_Wire<tUInt8> INST_rcvrFSM_state_set_pw;
  MOD_Wire<tUInt8> INST_testFSM_abort;
  MOD_ConfigReg<tUInt8> INST_testFSM_jj_1_repeat_count;
  MOD_ConfigReg<tUInt8> INST_testFSM_jj_repeat_count;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_1_abort;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_1_abort_1;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_1_fired;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_1_fired_1;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_1_start_reg;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_1_start_reg_1;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_1_start_reg_2;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_1_start_reg_3;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_1_start_wire;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_1_start_wire_1;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_1_state_can_overlap;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_1_state_fired;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_1_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_testFSM_par_blocks_1_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_1_state_overlap_pw;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_1_state_set_pw;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_2_abort;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_2_abort_1;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_2_fired;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_2_fired_1;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_2_start_reg;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_2_start_reg_1;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_2_start_reg_2;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_2_start_reg_3;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_2_start_wire;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_2_start_wire_1;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_2_state_can_overlap;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_2_state_fired;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_2_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_testFSM_par_blocks_2_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_2_state_overlap_pw;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_2_state_set_pw;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_abort;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_abort_1;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_fired;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_fired_1;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_start_reg;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_start_reg_1;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_start_reg_2;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_start_reg_3;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_start_wire;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_start_wire_1;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_state_can_overlap;
  MOD_Reg<tUInt8> INST_testFSM_par_blocks_state_fired;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_testFSM_par_blocks_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_state_overlap_pw;
  MOD_Wire<tUInt8> INST_testFSM_par_blocks_state_set_pw;
  MOD_Wire<tUInt8> INST_testFSM_par_running;
  MOD_Wire<tUInt8> INST_testFSM_par_running_1;
  MOD_Reg<tUInt8> INST_testFSM_start_reg;
  MOD_Reg<tUInt8> INST_testFSM_start_reg_1;
  MOD_Wire<tUInt8> INST_testFSM_start_reg_2;
  MOD_Wire<tUInt8> INST_testFSM_start_wire;
  MOD_Reg<tUInt8> INST_testFSM_state_can_overlap;
  MOD_Reg<tUInt8> INST_testFSM_state_fired;
  MOD_Wire<tUInt8> INST_testFSM_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_testFSM_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_testFSM_state_overlap_pw;
  MOD_Wire<tUInt8> INST_testFSM_state_set_pw;
 
 /* Constructor */
 public:
  MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_rcvrFSM_action_l183c32;
  tUInt8 DEF_WILL_FIRE_RL_rcvrFSM_action_r_init_l183c13;
  tUInt8 DEF_WILL_FIRE_RL_rcvrFSM_action_l178c13;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l170c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_actionpar_start_l155c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l158c20;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l157c20;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l163c20;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l162c20;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l154c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_actionpar_start_l144c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l150c17;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l149c17;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_f_update_l133c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_f_update_l134c13;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_f_update_l135c17;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l136c21;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_f_init_l135c17;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_f_init_l134c13;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_f_init_l133c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l127c13;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l124c12;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_f_update_l120c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l121c13;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_f_init_l120c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l118c21;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l116c21;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l110c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l104c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l100c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l96c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l92c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l85c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l80c13;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l77c13;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l74c13;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l73c13;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l72c13;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l68c21;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l67c21;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l61c20;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_r_init_l61c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l59c28;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_r_init_l59c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l57c17;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l51c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l27c17;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l23c17;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l47c25;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l46c25;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l45c25;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l40c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l38c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l37c9;
  tUInt8 DEF_WILL_FIRE_RL_testFSM_action_l36c9;
  tUInt32 DEF_b__h75571;
  tUInt32 DEF_b__h75443;
  tUInt32 DEF_b__h74887;
  tUInt8 DEF_rcvrFSM_jj_repeat_count_read____d513;
  tUInt8 DEF_testFSM_jj_1_repeat_count_read____d217;
  tUInt8 DEF_testFSM_jj_repeat_count_read____d198;
  tUInt8 DEF_rcvrFSM_state_can_overlap__h215611;
  tUInt8 DEF_testFSM_state_can_overlap__h26476;
  tUInt8 DEF_cond__h74781;
  tUInt8 DEF_NOT_cond_95___d245;
 
 /* Local definitions */
 private:
  tUInt64 DEF_v__h211762;
  tUInt64 DEF_v__h211710;
  tUInt64 DEF_v__h204606;
  tUInt64 DEF_v__h204409;
  tUInt64 DEF_v__h196774;
  tUInt64 DEF_v__h194638;
  tUInt64 DEF_v__h191522;
  tUInt64 DEF_v__h190910;
  tUInt64 DEF_v__h190306;
  tUInt64 DEF_v__h189708;
  tUInt32 DEF_signed_ii_83___d290;
  tUInt32 DEF_ii_83_PLUS_1___d294;
 
 /* Rules */
 public:
  void RL_testFSM_start_reg__dreg_update();
  void RL_testFSM_state_handle_abort();
  void RL_testFSM_state_fired__dreg_update();
  void RL_testFSM_state_every();
  void RL_testFSM_par_blocks_start_reg__dreg_update();
  void RL_testFSM_par_blocks_fired__dreg_update();
  void RL_testFSM_par_blocks_restart();
  void RL_testFSM_par_blocks_1_start_reg__dreg_update();
  void RL_testFSM_par_blocks_1_fired__dreg_update();
  void RL_testFSM_par_blocks_1_restart();
  void RL_testFSM_par_blocks_2_start_reg__dreg_update();
  void RL_testFSM_par_blocks_2_state_handle_abort();
  void RL_testFSM_par_blocks_2_state_fired__dreg_update();
  void RL_testFSM_par_blocks_2_state_every();
  void RL_testFSM_par_blocks_2_restart();
  void RL_testFSM_par_blocks_start_reg__dreg_update_1();
  void RL_testFSM_par_blocks_state_handle_abort();
  void RL_testFSM_par_blocks_state_fired__dreg_update();
  void RL_testFSM_par_blocks_state_every();
  void RL_testFSM_par_blocks_restart_1();
  void RL_testFSM_par_blocks_1_start_reg__dreg_update_1();
  void RL_testFSM_par_blocks_1_state_handle_abort();
  void RL_testFSM_par_blocks_1_state_fired__dreg_update();
  void RL_testFSM_par_blocks_1_state_every();
  void RL_testFSM_par_blocks_1_restart_1();
  void RL_testFSM_par_blocks_2_start_reg__dreg_update_1();
  void RL_testFSM_par_blocks_2_fired__dreg_update();
  void RL_testFSM_par_blocks_2_restart_1();
  void RL_testFSM_restart();
  void RL_testFSM_action_l36c9();
  void RL_testFSM_action_l37c9();
  void RL_testFSM_action_l38c9();
  void RL_testFSM_action_l40c9();
  void RL_testFSM_action_l45c25();
  void RL_testFSM_action_l46c25();
  void RL_testFSM_action_l47c25();
  void RL_testFSM_action_l23c17();
  void RL_testFSM_action_l27c17();
  void RL_testFSM_action_l51c9();
  void RL_testFSM_action_l57c17();
  void RL_testFSM_action_r_init_l59c9();
  void RL_testFSM_action_l59c28();
  void RL_testFSM_action_r_init_l61c9();
  void RL_testFSM_action_l61c20();
  void RL_testFSM_action_l67c21();
  void RL_testFSM_action_l68c21();
  void RL_testFSM_action_l72c13();
  void RL_testFSM_action_l73c13();
  void RL_testFSM_action_l74c13();
  void RL_testFSM_action_l77c13();
  void RL_testFSM_action_l80c13();
  void RL_testFSM_action_l85c9();
  void RL_testFSM_action_l92c9();
  void RL_testFSM_action_l96c9();
  void RL_testFSM_action_l100c9();
  void RL_testFSM_action_l104c9();
  void RL_testFSM_action_l110c9();
  void RL_testFSM_action_l116c21();
  void RL_testFSM_action_l118c21();
  void RL_testFSM_action_f_init_l120c9();
  void RL_testFSM_action_l121c13();
  void RL_testFSM_action_f_update_l120c9();
  void RL_testFSM_action_l124c12();
  void RL_testFSM_action_l127c13();
  void RL_testFSM_action_f_init_l133c9();
  void RL_testFSM_action_f_init_l134c13();
  void RL_testFSM_action_f_init_l135c17();
  void RL_testFSM_action_l136c21();
  void RL_testFSM_action_f_update_l135c17();
  void RL_testFSM_action_f_update_l134c13();
  void RL_testFSM_action_f_update_l133c9();
  void RL_testFSM_action_l149c17();
  void RL_testFSM_action_l150c17();
  void RL_testFSM_actionpar_start_l144c9();
  void RL_testFSM_action_l154c9();
  void RL_testFSM_action_l162c20();
  void RL_testFSM_action_l163c20();
  void RL_testFSM_action_l157c20();
  void RL_testFSM_action_l158c20();
  void RL_testFSM_actionpar_start_l155c9();
  void RL_testFSM_action_l170c9();
  void RL_testFSM_action_ovlp_r_update_l59c9();
  void RL_testFSM_action_ovlp_r_update_l61c9();
  void RL_testFSM_action_l146c13();
  void RL_testFSM_action_l145c13();
  void RL_testFSM_actionpar_run_l144c9();
  void RL_testFSM_action_l166c16();
  void RL_testFSM_actionpar_run_l155c9();
  void RL_testFSM_idle_l35c5();
  void RL_testFSM_idle_l148c13();
  void RL_testFSM_idle_l161c13();
  void RL_testFSM_idle_l156c13();
  void RL_testFSM_fsm_start();
  void RL_rcvrFSM_start_reg__dreg_update();
  void RL_rcvrFSM_state_handle_abort();
  void RL_rcvrFSM_state_fired__dreg_update();
  void RL_rcvrFSM_state_every();
  void RL_rcvrFSM_restart();
  void RL_rcvrFSM_action_l178c13();
  void RL_rcvrFSM_action_r_init_l183c13();
  void RL_rcvrFSM_action_l183c32();
  void RL_rcvrFSM_action_ovlp_r_update_l183c13();
  void RL_rcvrFSM_fsm_start();
  void RL_startit();
  void RL_finish();
  void __me_check_29();
  void __me_check_30();
  void __me_check_31();
  void __me_check_32();
  void __me_check_33();
  void __me_check_34();
  void __me_check_35();
  void __me_check_36();
  void __me_check_37();
  void __me_check_38();
  void __me_check_39();
  void __me_check_40();
  void __me_check_41();
  void __me_check_42();
  void __me_check_43();
  void __me_check_44();
  void __me_check_45();
  void __me_check_46();
  void __me_check_47();
  void __me_check_48();
  void __me_check_49();
  void __me_check_50();
  void __me_check_51();
  void __me_check_52();
  void __me_check_53();
  void __me_check_54();
  void __me_check_55();
  void __me_check_56();
  void __me_check_57();
  void __me_check_58();
  void __me_check_59();
  void __me_check_60();
  void __me_check_61();
  void __me_check_62();
  void __me_check_63();
  void __me_check_64();
  void __me_check_65();
  void __me_check_66();
  void __me_check_67();
  void __me_check_68();
  void __me_check_69();
  void __me_check_70();
  void __me_check_71();
  void __me_check_74();
  void __me_check_75();
  void __me_check_77();
  void __me_check_98();
  void __me_check_99();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTb &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTb &backing);
};

#endif /* ifndef __mkTb_h__ */
