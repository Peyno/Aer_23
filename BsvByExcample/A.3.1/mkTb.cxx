/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Dec 26 16:22:37 CET 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_2("%0d: rule sink, returned value is Coord { x: %0d, y: %0d }",
					 58u);
static std::string const __str_literal_1("%0d: rule source, sending Coord { x: %0d, y: %0d }", 50u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    INST_rx(simHdl, "rx", this, 32u, 0u, (tUInt8)0u),
    INST_ry(simHdl, "ry", this, 32u, 0u, (tUInt8)0u),
    INST_s_fi(simHdl, "s_fi", this, 64u, 2u, (tUInt8)1u, 0u),
    INST_s_fo(simHdl, "s_fo", this, 64u, 2u, (tUInt8)1u, 0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 9u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "RL_count_cycles", SYM_RULE);
  init_symbol(&symbols[2u], "RL_s_transform", SYM_RULE);
  init_symbol(&symbols[3u], "RL_sink", SYM_RULE);
  init_symbol(&symbols[4u], "RL_source", SYM_RULE);
  init_symbol(&symbols[5u], "rx", SYM_MODULE, &INST_rx);
  init_symbol(&symbols[6u], "ry", SYM_MODULE, &INST_ry);
  init_symbol(&symbols[7u], "s_fi", SYM_MODULE, &INST_s_fi);
  init_symbol(&symbols[8u], "s_fo", SYM_MODULE, &INST_s_fo);
}


/* Rule actions */

void MOD_mkTb::RL_s_transform()
{
  tUInt64 DEF_s_fi_first_BITS_63_TO_32_PLUS_15_CONCAT_s_fi_f_ETC___d9;
  tUInt64 DEF_s_fi_first____d4;
  DEF_s_fi_first____d4 = INST_s_fi.METH_first();
  DEF_s_fi_first_BITS_63_TO_32_PLUS_15_CONCAT_s_fi_f_ETC___d9 = (((tUInt64)(((tUInt32)(DEF_s_fi_first____d4 >> 32u)) + 15u)) << 32u) | (tUInt64)(((tUInt32)(DEF_s_fi_first____d4)) + 28u);
  INST_s_fi.METH_deq();
  INST_s_fo.METH_enq(DEF_s_fi_first_BITS_63_TO_32_PLUS_15_CONCAT_s_fi_f_ETC___d9);
}

void MOD_mkTb::RL_count_cycles()
{
  tUInt32 DEF_cycle_0_PLUS_1___d11;
  tUInt8 DEF_NOT_cycle_0_SLE_7_2___d13;
  DEF_b__h511 = INST_cycle.METH_read();
  DEF_NOT_cycle_0_SLE_7_2___d13 = !primSLE8(1u, 32u, (tUInt32)(DEF_b__h511), 32u, 7u);
  DEF_cycle_0_PLUS_1___d11 = DEF_b__h511 + 1u;
  INST_cycle.METH_write(DEF_cycle_0_PLUS_1___d11);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_cycle_0_SLE_7_2___d13)
      dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTb::RL_source()
{
  tUInt32 DEF_rx_5_PLUS_1___d18;
  tUInt32 DEF_ry_6_PLUS_1___d19;
  tUInt64 DEF_rx_5_CONCAT_ry_6___d17;
  tUInt32 DEF_b__h559;
  tUInt32 DEF_signed_rx_5___d21;
  tUInt32 DEF_b__h561;
  tUInt32 DEF_signed_ry_6___d22;
  DEF_b__h561 = INST_ry.METH_read();
  DEF_signed_ry_6___d22 = DEF_b__h561;
  DEF_b__h559 = INST_rx.METH_read();
  DEF_signed_rx_5___d21 = DEF_b__h559;
  DEF_b__h511 = INST_cycle.METH_read();
  DEF_signed_cycle_0___d20 = DEF_b__h511;
  DEF_rx_5_CONCAT_ry_6___d17 = (((tUInt64)(DEF_b__h559)) << 32u) | (tUInt64)(DEF_b__h561);
  DEF_ry_6_PLUS_1___d19 = DEF_b__h561 + 1u;
  DEF_rx_5_PLUS_1___d18 = DEF_b__h559 + 1u;
  INST_s_fi.METH_enq(DEF_rx_5_CONCAT_ry_6___d17);
  INST_rx.METH_write(DEF_rx_5_PLUS_1___d18);
  INST_ry.METH_write(DEF_ry_6_PLUS_1___d19);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,-32",
		   &__str_literal_1,
		   DEF_signed_cycle_0___d20,
		   DEF_signed_rx_5___d21,
		   DEF_signed_ry_6___d22);
}

void MOD_mkTb::RL_sink()
{
  tUInt64 DEF_s_fo_first____d24;
  tUInt32 DEF_signed_s_fo_first__4_BITS_63_TO_32_5___d26;
  tUInt32 DEF_signed_s_fo_first__4_BITS_31_TO_0_7___d28;
  DEF_b__h511 = INST_cycle.METH_read();
  DEF_signed_cycle_0___d20 = DEF_b__h511;
  DEF_s_fo_first____d24 = INST_s_fo.METH_first();
  DEF_signed_s_fo_first__4_BITS_31_TO_0_7___d28 = (tUInt32)(DEF_s_fo_first____d24);
  DEF_signed_s_fo_first__4_BITS_63_TO_32_5___d26 = (tUInt32)(DEF_s_fo_first____d24 >> 32u);
  INST_s_fo.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,-32",
		   &__str_literal_2,
		   DEF_signed_cycle_0___d20,
		   DEF_signed_s_fo_first__4_BITS_63_TO_32_5___d26,
		   DEF_signed_s_fo_first__4_BITS_31_TO_0_7___d28);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_s_fo.reset_RST(ARG_rst_in);
  INST_s_fi.reset_RST(ARG_rst_in);
  INST_ry.reset_RST(ARG_rst_in);
  INST_rx.reset_RST(ARG_rst_in);
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
  INST_rx.dump_state(indent + 2u);
  INST_ry.dump_state(indent + 2u);
  INST_s_fi.dump_state(indent + 2u);
  INST_s_fo.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 8u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h511", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_cycle_0___d20", 32u);
  num = INST_cycle.dump_VCD_defs(num);
  num = INST_rx.dump_VCD_defs(num);
  num = INST_ry.dump_VCD_defs(num);
  num = INST_s_fi.dump_VCD_defs(num);
  num = INST_s_fo.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h511) != DEF_b__h511)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h511, 32u);
	backing.DEF_b__h511 = DEF_b__h511;
      }
      ++num;
      if ((backing.DEF_signed_cycle_0___d20) != DEF_signed_cycle_0___d20)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_cycle_0___d20, 32u);
	backing.DEF_signed_cycle_0___d20 = DEF_signed_cycle_0___d20;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h511, 32u);
      backing.DEF_b__h511 = DEF_b__h511;
      vcd_write_val(sim_hdl, num++, DEF_signed_cycle_0___d20, 32u);
      backing.DEF_signed_cycle_0___d20 = DEF_signed_cycle_0___d20;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
  INST_rx.dump_VCD(dt, backing.INST_rx);
  INST_ry.dump_VCD(dt, backing.INST_ry);
  INST_s_fi.dump_VCD(dt, backing.INST_s_fi);
  INST_s_fo.dump_VCD(dt, backing.INST_s_fo);
}
