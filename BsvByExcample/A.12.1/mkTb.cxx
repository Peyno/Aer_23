/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Thu Jan 11 16:03:34 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_1("arr3[i] = %x", 12u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_arr3_0(simHdl, "arr3_0", this, 32u),
    INST_arr3_1(simHdl, "arr3_1", this, 32u),
    INST_arr3_2(simHdl, "arr3_2", this, 32u),
    INST_arr3_3(simHdl, "arr3_3", this, 32u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "arr3_0", SYM_MODULE, &INST_arr3_0);
  init_symbol(&symbols[1u], "arr3_1", SYM_MODULE, &INST_arr3_1);
  init_symbol(&symbols[2u], "arr3_2", SYM_MODULE, &INST_arr3_2);
  init_symbol(&symbols[3u], "arr3_3", SYM_MODULE, &INST_arr3_3);
  init_symbol(&symbols[4u], "RL_display_arr3", SYM_RULE);
  init_symbol(&symbols[5u], "RL_load_arr3", SYM_RULE);
}


/* Rule actions */

void MOD_mkTb::RL_load_arr3()
{
  INST_arr3_0.METH_write(16u);
  INST_arr3_1.METH_write(4u);
  INST_arr3_2.METH_write(1u);
  INST_arr3_3.METH_write(0u);
}

void MOD_mkTb::RL_display_arr3()
{
  tUInt32 DEF_b__h511;
  tUInt32 DEF_unsigned_arr3_1___d4;
  tUInt32 DEF_b__h468;
  tUInt32 DEF_unsigned_arr3_0___d2;
  tUInt32 DEF_b__h554;
  tUInt32 DEF_unsigned_arr3_2___d6;
  tUInt32 DEF_b__h597;
  tUInt32 DEF_unsigned_arr3_3___d8;
  DEF_b__h597 = INST_arr3_3.METH_read();
  DEF_unsigned_arr3_3___d8 = DEF_b__h597;
  DEF_b__h554 = INST_arr3_2.METH_read();
  DEF_unsigned_arr3_2___d6 = DEF_b__h554;
  DEF_b__h468 = INST_arr3_0.METH_read();
  DEF_unsigned_arr3_0___d2 = DEF_b__h468;
  DEF_b__h511 = INST_arr3_1.METH_read();
  DEF_unsigned_arr3_1___d4 = DEF_b__h511;
  dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_unsigned_arr3_0___d2);
  dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_unsigned_arr3_1___d4);
  dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_unsigned_arr3_2___d6);
  dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_unsigned_arr3_3___d8);
  dollar_finish(sim_hdl, "32", 1u);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_arr3_0.dump_state(indent + 2u);
  INST_arr3_1.dump_state(indent + 2u);
  INST_arr3_2.dump_state(indent + 2u);
  INST_arr3_3.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 5u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_arr3_0.dump_VCD_defs(num);
  num = INST_arr3_1.dump_VCD_defs(num);
  num = INST_arr3_2.dump_VCD_defs(num);
  num = INST_arr3_3.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_arr3_0.dump_VCD(dt, backing.INST_arr3_0);
  INST_arr3_1.dump_VCD(dt, backing.INST_arr3_1);
  INST_arr3_2.dump_VCD(dt, backing.INST_arr3_2);
  INST_arr3_3.dump_VCD(dt, backing.INST_arr3_3);
}
