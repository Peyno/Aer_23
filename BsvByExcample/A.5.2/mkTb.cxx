/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Wed Dec 27 16:32:05 CET 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_2(" x2 = %0d", 9u);
static std::string const __str_literal_1("x1 = %0d", 8u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_dut(simHdl, "dut", this),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 3u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "dut", SYM_MODULE, &INST_dut);
  init_symbol(&symbols[1u], "RL_r1", SYM_RULE);
  init_symbol(&symbols[2u], "RL_r2", SYM_RULE);
}


/* Rule actions */

void MOD_mkTb::RL_r1()
{
  tUInt8 DEF_NOT_dut_f1_SLE_10___d4;
  tUInt32 DEF_b__h110;
  tUInt32 DEF_signed_dut_f1___d2;
  DEF_b__h110 = INST_dut.METH_f1();
  DEF_signed_dut_f1___d2 = DEF_b__h110;
  DEF_NOT_dut_f1_SLE_10___d4 = !primSLE8(1u, 32u, (tUInt32)(DEF_b__h110), 32u, 10u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_1, DEF_signed_dut_f1___d2);
    if (DEF_NOT_dut_f1_SLE_10___d4)
      dollar_finish(sim_hdl, "32", 0u);
  }
}

void MOD_mkTb::RL_r2()
{
  tUInt8 DEF_NOT_dut_f2_SLE_10___d9;
  tUInt32 DEF_dut_f2____d6;
  tUInt32 DEF_signed_dut_f2___d7;
  DEF_dut_f2____d6 = INST_dut.METH_f2();
  DEF_signed_dut_f2___d7 = DEF_dut_f2____d6;
  DEF_NOT_dut_f2_SLE_10___d9 = !primSLE8(1u, 32u, (tUInt32)(DEF_dut_f2____d6), 32u, 10u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_2, DEF_signed_dut_f2___d7);
    if (DEF_NOT_dut_f2_SLE_10___d9)
      dollar_finish(sim_hdl, "32", 0u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_dut.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_dut.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_dut.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkTb::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  INST_dut.dump_VCD(dt, levels, backing.INST_dut);
}
