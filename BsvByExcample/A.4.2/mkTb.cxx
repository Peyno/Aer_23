/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Dec 26 18:30:22 CET 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_4("  x1, y1 =%0d,%0d;       x2,y2 = %0d,%0d,", 41u);
static std::string const __str_literal_1("r1", 2u);
static std::string const __str_literal_2("r2a", 3u);
static std::string const __str_literal_3("r2b", 3u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_x1(simHdl, "x1", this, 32u, 10u, (tUInt8)0u),
    INST_x2(simHdl, "x2", this, 32u, 10u, (tUInt8)0u),
    INST_y1(simHdl, "y1", this, 32u, 100u, (tUInt8)0u),
    INST_y2(simHdl, "y2", this, 32u, 100u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 8u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "RL_r1", SYM_RULE);
  init_symbol(&symbols[1u], "RL_r2a", SYM_RULE);
  init_symbol(&symbols[2u], "RL_r2b", SYM_RULE);
  init_symbol(&symbols[3u], "RL_show_and_eventually_stop", SYM_RULE);
  init_symbol(&symbols[4u], "x1", SYM_MODULE, &INST_x1);
  init_symbol(&symbols[5u], "x2", SYM_MODULE, &INST_x2);
  init_symbol(&symbols[6u], "y1", SYM_MODULE, &INST_y1);
  init_symbol(&symbols[7u], "y2", SYM_MODULE, &INST_y2);
}


/* Rule actions */

void MOD_mkTb::RL_r1()
{
  tUInt32 DEF_x1_PLUS_1___d4;
  tUInt32 DEF_y1_PLUS_1___d2;
  DEF_b__h245 = INST_y1.METH_read();
  DEF_b__h258 = INST_x1.METH_read();
  DEF_y1_PLUS_1___d2 = DEF_b__h245 + 1u;
  DEF_x1_PLUS_1___d4 = DEF_b__h258 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
  INST_x1.METH_write(DEF_y1_PLUS_1___d2);
  INST_y1.METH_write(DEF_x1_PLUS_1___d4);
}

void MOD_mkTb::RL_r2a()
{
  tUInt32 DEF_y2_PLUS_1___d6;
  DEF_b__h303 = INST_y2.METH_read();
  DEF_y2_PLUS_1___d6 = DEF_b__h303 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
  INST_x2.METH_write(DEF_y2_PLUS_1___d6);
}

void MOD_mkTb::RL_r2b()
{
  tUInt32 DEF_x2_PLUS_1___d8;
  DEF_b__h348 = INST_x2.METH_read();
  DEF_x2_PLUS_1___d8 = DEF_b__h348 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_3);
  INST_y2.METH_write(DEF_x2_PLUS_1___d8);
}

void MOD_mkTb::RL_show_and_eventually_stop()
{
  tUInt8 DEF_NOT_x1_SLT_105_3___d14;
  tUInt32 DEF_signed_x1___d9;
  tUInt32 DEF_signed_y1___d10;
  tUInt32 DEF_signed_y2___d12;
  tUInt32 DEF_signed_x2___d11;
  DEF_b__h348 = INST_x2.METH_read();
  DEF_signed_x2___d11 = DEF_b__h348;
  DEF_b__h303 = INST_y2.METH_read();
  DEF_signed_y2___d12 = DEF_b__h303;
  DEF_b__h245 = INST_y1.METH_read();
  DEF_signed_y1___d10 = DEF_b__h245;
  DEF_b__h258 = INST_x1.METH_read();
  DEF_signed_x1___d9 = DEF_b__h258;
  DEF_NOT_x1_SLT_105_3___d14 = !primSLT8(1u, 32u, (tUInt32)(DEF_b__h258), 32u, 105u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32,-32,-32",
		   &__str_literal_4,
		   DEF_signed_x1___d9,
		   DEF_signed_y1___d10,
		   DEF_signed_x2___d11,
		   DEF_signed_y2___d12);
    if (DEF_NOT_x1_SLT_105_3___d14)
      dollar_finish(sim_hdl, "32", 0u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_y2.reset_RST(ARG_rst_in);
  INST_y1.reset_RST(ARG_rst_in);
  INST_x2.reset_RST(ARG_rst_in);
  INST_x1.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_x1.dump_state(indent + 2u);
  INST_x2.dump_state(indent + 2u);
  INST_y1.dump_state(indent + 2u);
  INST_y2.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 9u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h245", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h258", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h303", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h348", 32u);
  num = INST_x1.dump_VCD_defs(num);
  num = INST_x2.dump_VCD_defs(num);
  num = INST_y1.dump_VCD_defs(num);
  num = INST_y2.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h245) != DEF_b__h245)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h245, 32u);
	backing.DEF_b__h245 = DEF_b__h245;
      }
      ++num;
      if ((backing.DEF_b__h258) != DEF_b__h258)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h258, 32u);
	backing.DEF_b__h258 = DEF_b__h258;
      }
      ++num;
      if ((backing.DEF_b__h303) != DEF_b__h303)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h303, 32u);
	backing.DEF_b__h303 = DEF_b__h303;
      }
      ++num;
      if ((backing.DEF_b__h348) != DEF_b__h348)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h348, 32u);
	backing.DEF_b__h348 = DEF_b__h348;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h245, 32u);
      backing.DEF_b__h245 = DEF_b__h245;
      vcd_write_val(sim_hdl, num++, DEF_b__h258, 32u);
      backing.DEF_b__h258 = DEF_b__h258;
      vcd_write_val(sim_hdl, num++, DEF_b__h303, 32u);
      backing.DEF_b__h303 = DEF_b__h303;
      vcd_write_val(sim_hdl, num++, DEF_b__h348, 32u);
      backing.DEF_b__h348 = DEF_b__h348;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_x1.dump_VCD(dt, backing.INST_x1);
  INST_x2.dump_VCD(dt, backing.INST_x2);
  INST_y1.dump_VCD(dt, backing.INST_y1);
  INST_y2.dump_VCD(dt, backing.INST_y2);
}
