/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Fri Jan 12 16:20:23 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_2("RegStatus(i)", 12u);
static std::string const __str_literal_3("VecStatus(i)", 12u);
static std::string const __str_literal_1("cycle = ", 8u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_failCond(simHdl, "failCond", this, 5u, (tUInt8)10u, (tUInt8)0u),
    INST_regstatus(simHdl, "regstatus", this, 20u, 0u, (tUInt8)0u),
    INST_vecstatus_0(simHdl, "vecstatus_0", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_vecstatus_1(simHdl, "vecstatus_1", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_vecstatus_2(simHdl, "vecstatus_2", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_vecstatus_3(simHdl, "vecstatus_3", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_vecstatus_4(simHdl, "vecstatus_4", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_vecstatus_5(simHdl, "vecstatus_5", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_vecstatus_6(simHdl, "vecstatus_6", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_vecstatus_7(simHdl, "vecstatus_7", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_vecstatus_8(simHdl, "vecstatus_8", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_vecstatus_9(simHdl, "vecstatus_9", this, 2u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 17u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "failCond", SYM_MODULE, &INST_failCond);
  init_symbol(&symbols[2u], "RL_checkChannel", SYM_RULE);
  init_symbol(&symbols[3u], "RL_displayReg", SYM_RULE);
  init_symbol(&symbols[4u], "RL_updateRegStatus", SYM_RULE);
  init_symbol(&symbols[5u], "RL_updateVecStauts", SYM_RULE);
  init_symbol(&symbols[6u], "regstatus", SYM_MODULE, &INST_regstatus);
  init_symbol(&symbols[7u], "vecstatus_0", SYM_MODULE, &INST_vecstatus_0);
  init_symbol(&symbols[8u], "vecstatus_1", SYM_MODULE, &INST_vecstatus_1);
  init_symbol(&symbols[9u], "vecstatus_2", SYM_MODULE, &INST_vecstatus_2);
  init_symbol(&symbols[10u], "vecstatus_3", SYM_MODULE, &INST_vecstatus_3);
  init_symbol(&symbols[11u], "vecstatus_4", SYM_MODULE, &INST_vecstatus_4);
  init_symbol(&symbols[12u], "vecstatus_5", SYM_MODULE, &INST_vecstatus_5);
  init_symbol(&symbols[13u], "vecstatus_6", SYM_MODULE, &INST_vecstatus_6);
  init_symbol(&symbols[14u], "vecstatus_7", SYM_MODULE, &INST_vecstatus_7);
  init_symbol(&symbols[15u], "vecstatus_8", SYM_MODULE, &INST_vecstatus_8);
  init_symbol(&symbols[16u], "vecstatus_9", SYM_MODULE, &INST_vecstatus_9);
}


/* Rule actions */

void MOD_mkTb::RL_checkChannel()
{
  tUInt8 DEF_cycle_PLUS_1___d2;
  tUInt8 DEF_NOT_cycle_ULE_9___d8;
  tUInt8 DEF_IF_cycle_EQ_5_THEN_21_ELSE_0_CONCAT_DONTCARE___d5;
  tUInt8 DEF_b__h1859;
  tUInt8 DEF_unsigned_cycle___d6;
  DEF_b__h1859 = INST_cycle.METH_read();
  DEF_unsigned_cycle___d6 = DEF_b__h1859;
  DEF_IF_cycle_EQ_5_THEN_21_ELSE_0_CONCAT_DONTCARE___d5 = DEF_b__h1859 == (tUInt8)5u ? (tUInt8)21u : (tUInt8)10u;
  DEF_NOT_cycle_ULE_9___d8 = !(DEF_b__h1859 <= (tUInt8)9u);
  DEF_cycle_PLUS_1___d2 = (tUInt8)15u & (DEF_b__h1859 + (tUInt8)1u);
  INST_cycle.METH_write(DEF_cycle_PLUS_1___d2);
  INST_failCond.METH_write(DEF_IF_cycle_EQ_5_THEN_21_ELSE_0_CONCAT_DONTCARE___d5);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,4", &__str_literal_1, DEF_unsigned_cycle___d6);
    if (DEF_NOT_cycle_ULE_9___d8)
      dollar_finish(sim_hdl, "32", 0u);
  }
}

void MOD_mkTb::RL_updateRegStatus()
{
  tUInt32 DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d59;
  tUInt8 DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d18;
  tUInt8 DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d22;
  tUInt8 DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d27;
  tUInt8 DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d31;
  tUInt8 DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d36;
  tUInt8 DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d40;
  tUInt8 DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d45;
  tUInt8 DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d49;
  tUInt8 DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d54;
  tUInt8 DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d58;
  DEF_regstatus__h3418 = INST_regstatus.METH_read();
  DEF_failCond___d9 = INST_failCond.METH_read();
  DEF_b__h2720 = (tUInt8)((tUInt8)15u & DEF_failCond___d9);
  DEF_x__h2738 = DEF_b__h2720;
  DEF_regstatus_BITS_19_TO_18___h2789 = (tUInt8)(DEF_regstatus__h3418 >> 18u);
  DEF_regstatus_BITS_15_TO_14___h2929 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 14u));
  DEF_regstatus_BITS_17_TO_16___h2859 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 16u));
  DEF_regstatus_BITS_13_TO_12___h2999 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 12u));
  DEF_regstatus_BITS_11_TO_10___h3069 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 10u));
  DEF_regstatus_BITS_9_TO_8___h3139 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 8u));
  DEF_regstatus_BITS_7_TO_6___h3209 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 6u));
  DEF_regstatus_BITS_3_TO_2___h3349 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 2u));
  DEF_regstatus_BITS_5_TO_4___h3279 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 4u));
  DEF_regstatus_BITS_1_TO_0___h3419 = (tUInt8)((tUInt8)3u & DEF_regstatus__h3418);
  switch (DEF_x__h2738) {
  case (tUInt8)15u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d58 = (tUInt8)2u;
    break;
  case (tUInt8)0u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d58 = (tUInt8)1u;
    break;
  default:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d58 = DEF_regstatus_BITS_1_TO_0___h3419;
  }
  switch (DEF_x__h2738) {
  case (tUInt8)0u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d54 = (tUInt8)2u;
    break;
  case (tUInt8)1u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d54 = (tUInt8)1u;
    break;
  default:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d54 = DEF_regstatus_BITS_3_TO_2___h3349;
  }
  switch (DEF_x__h2738) {
  case (tUInt8)1u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d49 = (tUInt8)2u;
    break;
  case (tUInt8)2u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d49 = (tUInt8)1u;
    break;
  default:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d49 = DEF_regstatus_BITS_5_TO_4___h3279;
  }
  switch (DEF_x__h2738) {
  case (tUInt8)2u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d45 = (tUInt8)2u;
    break;
  case (tUInt8)3u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d45 = (tUInt8)1u;
    break;
  default:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d45 = DEF_regstatus_BITS_7_TO_6___h3209;
  }
  switch (DEF_x__h2738) {
  case (tUInt8)4u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d36 = (tUInt8)2u;
    break;
  case (tUInt8)5u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d36 = (tUInt8)1u;
    break;
  default:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d36 = DEF_regstatus_BITS_11_TO_10___h3069;
  }
  switch (DEF_x__h2738) {
  case (tUInt8)3u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d40 = (tUInt8)2u;
    break;
  case (tUInt8)4u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d40 = (tUInt8)1u;
    break;
  default:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d40 = DEF_regstatus_BITS_9_TO_8___h3139;
  }
  switch (DEF_x__h2738) {
  case (tUInt8)5u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d31 = (tUInt8)2u;
    break;
  case (tUInt8)6u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d31 = (tUInt8)1u;
    break;
  default:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d31 = DEF_regstatus_BITS_13_TO_12___h2999;
  }
  switch (DEF_x__h2738) {
  case (tUInt8)6u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d27 = (tUInt8)2u;
    break;
  case (tUInt8)7u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d27 = (tUInt8)1u;
    break;
  default:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d27 = DEF_regstatus_BITS_15_TO_14___h2929;
  }
  switch (DEF_x__h2738) {
  case (tUInt8)7u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d22 = (tUInt8)2u;
    break;
  case (tUInt8)8u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d22 = (tUInt8)1u;
    break;
  default:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d22 = DEF_regstatus_BITS_17_TO_16___h2859;
  }
  switch (DEF_x__h2738) {
  case (tUInt8)8u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d18 = (tUInt8)2u;
    break;
  case (tUInt8)9u:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d18 = (tUInt8)1u;
    break;
  default:
    DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d18 = DEF_regstatus_BITS_19_TO_18___h2789;
  }
  DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d59 = 1048575u & ((((((((((((tUInt32)(DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d18)) << 18u) | (((tUInt32)(DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d22)) << 16u)) | (((tUInt32)(DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d27)) << 14u)) | (((tUInt32)(DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d31)) << 12u)) | (((tUInt32)(DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d36)) << 10u)) | (((tUInt32)(DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d40)) << 8u)) | (((tUInt32)(DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d45)) << 6u)) | (((tUInt32)(DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d49)) << 4u)) | (((tUInt32)(DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d54)) << 2u)) | (tUInt32)(DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d58));
  INST_regstatus.METH_write(DEF_IF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_ETC___d59);
}

void MOD_mkTb::RL_displayReg()
{
  tUInt8 DEF_vecstatus_0__h3817;
  tUInt8 DEF_vecstatus_1__h3916;
  tUInt8 DEF_vecstatus_2__h4015;
  tUInt8 DEF_vecstatus_3__h4114;
  tUInt8 DEF_vecstatus_4__h4213;
  tUInt8 DEF_vecstatus_5__h4312;
  tUInt8 DEF_vecstatus_6__h4411;
  tUInt8 DEF_vecstatus_7__h4510;
  tUInt8 DEF_vecstatus_8__h4609;
  tUInt8 DEF_vecstatus_9__h4708;
  DEF_regstatus__h3418 = INST_regstatus.METH_read();
  DEF_vecstatus_9__h4708 = INST_vecstatus_9.METH_read();
  DEF_vecstatus_8__h4609 = INST_vecstatus_8.METH_read();
  DEF_vecstatus_7__h4510 = INST_vecstatus_7.METH_read();
  DEF_vecstatus_5__h4312 = INST_vecstatus_5.METH_read();
  DEF_vecstatus_6__h4411 = INST_vecstatus_6.METH_read();
  DEF_vecstatus_4__h4213 = INST_vecstatus_4.METH_read();
  DEF_vecstatus_3__h4114 = INST_vecstatus_3.METH_read();
  DEF_vecstatus_2__h4015 = INST_vecstatus_2.METH_read();
  DEF_vecstatus_1__h3916 = INST_vecstatus_1.METH_read();
  DEF_vecstatus_0__h3817 = INST_vecstatus_0.METH_read();
  DEF_regstatus_BITS_19_TO_18___h2789 = (tUInt8)(DEF_regstatus__h3418 >> 18u);
  DEF_regstatus_BITS_15_TO_14___h2929 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 14u));
  DEF_regstatus_BITS_17_TO_16___h2859 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 16u));
  DEF_regstatus_BITS_13_TO_12___h2999 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 12u));
  DEF_regstatus_BITS_11_TO_10___h3069 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 10u));
  DEF_regstatus_BITS_9_TO_8___h3139 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 8u));
  DEF_regstatus_BITS_5_TO_4___h3279 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 4u));
  DEF_regstatus_BITS_7_TO_6___h3209 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 6u));
  DEF_regstatus_BITS_3_TO_2___h3349 = (tUInt8)((tUInt8)3u & (DEF_regstatus__h3418 >> 2u));
  DEF_regstatus_BITS_1_TO_0___h3419 = (tUInt8)((tUInt8)3u & DEF_regstatus__h3418);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,2", &__str_literal_2, DEF_regstatus_BITS_1_TO_0___h3419);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_3, DEF_vecstatus_0__h3817);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_2, DEF_regstatus_BITS_3_TO_2___h3349);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_3, DEF_vecstatus_1__h3916);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_2, DEF_regstatus_BITS_5_TO_4___h3279);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_3, DEF_vecstatus_2__h4015);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_2, DEF_regstatus_BITS_7_TO_6___h3209);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_3, DEF_vecstatus_3__h4114);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_2, DEF_regstatus_BITS_9_TO_8___h3139);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_3, DEF_vecstatus_4__h4213);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_2, DEF_regstatus_BITS_11_TO_10___h3069);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_3, DEF_vecstatus_5__h4312);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_2, DEF_regstatus_BITS_13_TO_12___h2999);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_3, DEF_vecstatus_6__h4411);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_2, DEF_regstatus_BITS_15_TO_14___h2929);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_3, DEF_vecstatus_7__h4510);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_2, DEF_regstatus_BITS_17_TO_16___h2859);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_3, DEF_vecstatus_8__h4609);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_2, DEF_regstatus_BITS_19_TO_18___h2789);
    dollar_display(sim_hdl, this, "s,2", &__str_literal_3, DEF_vecstatus_9__h4708);
  }
}

void MOD_mkTb::RL_updateVecStauts()
{
  tUInt8 DEF_x__h4985;
  tUInt8 DEF__dfoo1;
  tUInt8 DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d14;
  tUInt8 DEF__dfoo2;
  tUInt8 DEF__dfoo3;
  tUInt8 DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d13;
  tUInt8 DEF__dfoo4;
  tUInt8 DEF__dfoo5;
  tUInt8 DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d19;
  tUInt8 DEF__dfoo6;
  tUInt8 DEF__dfoo7;
  tUInt8 DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d24;
  tUInt8 DEF__dfoo8;
  tUInt8 DEF__dfoo9;
  tUInt8 DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d28;
  tUInt8 DEF__dfoo10;
  tUInt8 DEF__dfoo11;
  tUInt8 DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d33;
  tUInt8 DEF__dfoo12;
  tUInt8 DEF__dfoo13;
  tUInt8 DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d37;
  tUInt8 DEF__dfoo14;
  tUInt8 DEF__dfoo15;
  tUInt8 DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d42;
  tUInt8 DEF__dfoo16;
  tUInt8 DEF__dfoo17;
  tUInt8 DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d46;
  tUInt8 DEF__dfoo18;
  tUInt8 DEF__dfoo19;
  tUInt8 DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d51;
  tUInt8 DEF__dfoo20;
  DEF_failCond___d9 = INST_failCond.METH_read();
  DEF_b__h2720 = (tUInt8)((tUInt8)15u & DEF_failCond___d9);
  DEF_x__h2738 = DEF_b__h2720;
  DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d51 = DEF_x__h2738 == (tUInt8)0u;
  DEF__dfoo20 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d51 ? (tUInt8)1u : (tUInt8)2u;
  DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d46 = DEF_x__h2738 == (tUInt8)1u;
  DEF__dfoo18 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d46 ? (tUInt8)1u : (tUInt8)2u;
  DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d42 = DEF_x__h2738 == (tUInt8)2u;
  DEF__dfoo16 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d42 ? (tUInt8)1u : (tUInt8)2u;
  DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d37 = DEF_x__h2738 == (tUInt8)3u;
  DEF__dfoo14 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d37 ? (tUInt8)1u : (tUInt8)2u;
  DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d28 = DEF_x__h2738 == (tUInt8)5u;
  DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d33 = DEF_x__h2738 == (tUInt8)4u;
  DEF__dfoo12 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d33 ? (tUInt8)1u : (tUInt8)2u;
  DEF__dfoo10 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d28 ? (tUInt8)1u : (tUInt8)2u;
  DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d24 = DEF_x__h2738 == (tUInt8)6u;
  DEF__dfoo8 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d24 ? (tUInt8)1u : (tUInt8)2u;
  DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d19 = DEF_x__h2738 == (tUInt8)7u;
  DEF__dfoo6 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d19 ? (tUInt8)1u : (tUInt8)2u;
  DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d13 = DEF_x__h2738 == (tUInt8)8u;
  DEF__dfoo4 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d13 ? (tUInt8)1u : (tUInt8)2u;
  DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d14 = DEF_x__h2738 == (tUInt8)9u;
  DEF__dfoo2 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d14 ? (tUInt8)1u : (tUInt8)2u;
  DEF_x__h4985 = (tUInt8)15u & (DEF_x__h2738 + (tUInt8)1u);
  DEF__dfoo19 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d51 || DEF_x__h4985 == (tUInt8)0u;
  DEF__dfoo17 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d46 || DEF_x__h4985 == (tUInt8)1u;
  DEF__dfoo15 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d42 || DEF_x__h4985 == (tUInt8)2u;
  DEF__dfoo13 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d37 || DEF_x__h4985 == (tUInt8)3u;
  DEF__dfoo11 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d33 || DEF_x__h4985 == (tUInt8)4u;
  DEF__dfoo9 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d28 || DEF_x__h4985 == (tUInt8)5u;
  DEF__dfoo7 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d24 || DEF_x__h4985 == (tUInt8)6u;
  DEF__dfoo5 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d19 || DEF_x__h4985 == (tUInt8)7u;
  DEF__dfoo3 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d13 || DEF_x__h4985 == (tUInt8)8u;
  DEF__dfoo1 = DEF_IF_failCond_BIT_4_0_THEN_failCond_BITS_3_TO_0__ETC___d14 || DEF_x__h4985 == (tUInt8)9u;
  if (DEF__dfoo19)
    INST_vecstatus_0.METH_write(DEF__dfoo20);
  if (DEF__dfoo17)
    INST_vecstatus_1.METH_write(DEF__dfoo18);
  if (DEF__dfoo15)
    INST_vecstatus_2.METH_write(DEF__dfoo16);
  if (DEF__dfoo11)
    INST_vecstatus_4.METH_write(DEF__dfoo12);
  if (DEF__dfoo13)
    INST_vecstatus_3.METH_write(DEF__dfoo14);
  if (DEF__dfoo9)
    INST_vecstatus_5.METH_write(DEF__dfoo10);
  if (DEF__dfoo7)
    INST_vecstatus_6.METH_write(DEF__dfoo8);
  if (DEF__dfoo5)
    INST_vecstatus_7.METH_write(DEF__dfoo6);
  if (DEF__dfoo3)
    INST_vecstatus_8.METH_write(DEF__dfoo4);
  if (DEF__dfoo1)
    INST_vecstatus_9.METH_write(DEF__dfoo2);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_vecstatus_9.reset_RST(ARG_rst_in);
  INST_vecstatus_8.reset_RST(ARG_rst_in);
  INST_vecstatus_7.reset_RST(ARG_rst_in);
  INST_vecstatus_6.reset_RST(ARG_rst_in);
  INST_vecstatus_5.reset_RST(ARG_rst_in);
  INST_vecstatus_4.reset_RST(ARG_rst_in);
  INST_vecstatus_3.reset_RST(ARG_rst_in);
  INST_vecstatus_2.reset_RST(ARG_rst_in);
  INST_vecstatus_1.reset_RST(ARG_rst_in);
  INST_vecstatus_0.reset_RST(ARG_rst_in);
  INST_regstatus.reset_RST(ARG_rst_in);
  INST_failCond.reset_RST(ARG_rst_in);
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
  INST_failCond.dump_state(indent + 2u);
  INST_regstatus.dump_state(indent + 2u);
  INST_vecstatus_0.dump_state(indent + 2u);
  INST_vecstatus_1.dump_state(indent + 2u);
  INST_vecstatus_2.dump_state(indent + 2u);
  INST_vecstatus_3.dump_state(indent + 2u);
  INST_vecstatus_4.dump_state(indent + 2u);
  INST_vecstatus_5.dump_state(indent + 2u);
  INST_vecstatus_6.dump_state(indent + 2u);
  INST_vecstatus_7.dump_state(indent + 2u);
  INST_vecstatus_8.dump_state(indent + 2u);
  INST_vecstatus_9.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 28u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2720", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "failCond___d9", 5u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "regstatus_BITS_11_TO_10___h3069", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "regstatus_BITS_13_TO_12___h2999", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "regstatus_BITS_15_TO_14___h2929", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "regstatus_BITS_17_TO_16___h2859", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "regstatus_BITS_19_TO_18___h2789", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "regstatus_BITS_1_TO_0___h3419", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "regstatus_BITS_3_TO_2___h3349", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "regstatus_BITS_5_TO_4___h3279", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "regstatus_BITS_7_TO_6___h3209", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "regstatus_BITS_9_TO_8___h3139", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "regstatus__h3418", 20u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2738", 4u);
  num = INST_cycle.dump_VCD_defs(num);
  num = INST_failCond.dump_VCD_defs(num);
  num = INST_regstatus.dump_VCD_defs(num);
  num = INST_vecstatus_0.dump_VCD_defs(num);
  num = INST_vecstatus_1.dump_VCD_defs(num);
  num = INST_vecstatus_2.dump_VCD_defs(num);
  num = INST_vecstatus_3.dump_VCD_defs(num);
  num = INST_vecstatus_4.dump_VCD_defs(num);
  num = INST_vecstatus_5.dump_VCD_defs(num);
  num = INST_vecstatus_6.dump_VCD_defs(num);
  num = INST_vecstatus_7.dump_VCD_defs(num);
  num = INST_vecstatus_8.dump_VCD_defs(num);
  num = INST_vecstatus_9.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 5u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 20u);
    vcd_write_x(sim_hdl, num++, 4u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h2720) != DEF_b__h2720)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2720, 4u);
	backing.DEF_b__h2720 = DEF_b__h2720;
      }
      ++num;
      if ((backing.DEF_failCond___d9) != DEF_failCond___d9)
      {
	vcd_write_val(sim_hdl, num, DEF_failCond___d9, 5u);
	backing.DEF_failCond___d9 = DEF_failCond___d9;
      }
      ++num;
      if ((backing.DEF_regstatus_BITS_11_TO_10___h3069) != DEF_regstatus_BITS_11_TO_10___h3069)
      {
	vcd_write_val(sim_hdl, num, DEF_regstatus_BITS_11_TO_10___h3069, 2u);
	backing.DEF_regstatus_BITS_11_TO_10___h3069 = DEF_regstatus_BITS_11_TO_10___h3069;
      }
      ++num;
      if ((backing.DEF_regstatus_BITS_13_TO_12___h2999) != DEF_regstatus_BITS_13_TO_12___h2999)
      {
	vcd_write_val(sim_hdl, num, DEF_regstatus_BITS_13_TO_12___h2999, 2u);
	backing.DEF_regstatus_BITS_13_TO_12___h2999 = DEF_regstatus_BITS_13_TO_12___h2999;
      }
      ++num;
      if ((backing.DEF_regstatus_BITS_15_TO_14___h2929) != DEF_regstatus_BITS_15_TO_14___h2929)
      {
	vcd_write_val(sim_hdl, num, DEF_regstatus_BITS_15_TO_14___h2929, 2u);
	backing.DEF_regstatus_BITS_15_TO_14___h2929 = DEF_regstatus_BITS_15_TO_14___h2929;
      }
      ++num;
      if ((backing.DEF_regstatus_BITS_17_TO_16___h2859) != DEF_regstatus_BITS_17_TO_16___h2859)
      {
	vcd_write_val(sim_hdl, num, DEF_regstatus_BITS_17_TO_16___h2859, 2u);
	backing.DEF_regstatus_BITS_17_TO_16___h2859 = DEF_regstatus_BITS_17_TO_16___h2859;
      }
      ++num;
      if ((backing.DEF_regstatus_BITS_19_TO_18___h2789) != DEF_regstatus_BITS_19_TO_18___h2789)
      {
	vcd_write_val(sim_hdl, num, DEF_regstatus_BITS_19_TO_18___h2789, 2u);
	backing.DEF_regstatus_BITS_19_TO_18___h2789 = DEF_regstatus_BITS_19_TO_18___h2789;
      }
      ++num;
      if ((backing.DEF_regstatus_BITS_1_TO_0___h3419) != DEF_regstatus_BITS_1_TO_0___h3419)
      {
	vcd_write_val(sim_hdl, num, DEF_regstatus_BITS_1_TO_0___h3419, 2u);
	backing.DEF_regstatus_BITS_1_TO_0___h3419 = DEF_regstatus_BITS_1_TO_0___h3419;
      }
      ++num;
      if ((backing.DEF_regstatus_BITS_3_TO_2___h3349) != DEF_regstatus_BITS_3_TO_2___h3349)
      {
	vcd_write_val(sim_hdl, num, DEF_regstatus_BITS_3_TO_2___h3349, 2u);
	backing.DEF_regstatus_BITS_3_TO_2___h3349 = DEF_regstatus_BITS_3_TO_2___h3349;
      }
      ++num;
      if ((backing.DEF_regstatus_BITS_5_TO_4___h3279) != DEF_regstatus_BITS_5_TO_4___h3279)
      {
	vcd_write_val(sim_hdl, num, DEF_regstatus_BITS_5_TO_4___h3279, 2u);
	backing.DEF_regstatus_BITS_5_TO_4___h3279 = DEF_regstatus_BITS_5_TO_4___h3279;
      }
      ++num;
      if ((backing.DEF_regstatus_BITS_7_TO_6___h3209) != DEF_regstatus_BITS_7_TO_6___h3209)
      {
	vcd_write_val(sim_hdl, num, DEF_regstatus_BITS_7_TO_6___h3209, 2u);
	backing.DEF_regstatus_BITS_7_TO_6___h3209 = DEF_regstatus_BITS_7_TO_6___h3209;
      }
      ++num;
      if ((backing.DEF_regstatus_BITS_9_TO_8___h3139) != DEF_regstatus_BITS_9_TO_8___h3139)
      {
	vcd_write_val(sim_hdl, num, DEF_regstatus_BITS_9_TO_8___h3139, 2u);
	backing.DEF_regstatus_BITS_9_TO_8___h3139 = DEF_regstatus_BITS_9_TO_8___h3139;
      }
      ++num;
      if ((backing.DEF_regstatus__h3418) != DEF_regstatus__h3418)
      {
	vcd_write_val(sim_hdl, num, DEF_regstatus__h3418, 20u);
	backing.DEF_regstatus__h3418 = DEF_regstatus__h3418;
      }
      ++num;
      if ((backing.DEF_x__h2738) != DEF_x__h2738)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2738, 4u);
	backing.DEF_x__h2738 = DEF_x__h2738;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h2720, 4u);
      backing.DEF_b__h2720 = DEF_b__h2720;
      vcd_write_val(sim_hdl, num++, DEF_failCond___d9, 5u);
      backing.DEF_failCond___d9 = DEF_failCond___d9;
      vcd_write_val(sim_hdl, num++, DEF_regstatus_BITS_11_TO_10___h3069, 2u);
      backing.DEF_regstatus_BITS_11_TO_10___h3069 = DEF_regstatus_BITS_11_TO_10___h3069;
      vcd_write_val(sim_hdl, num++, DEF_regstatus_BITS_13_TO_12___h2999, 2u);
      backing.DEF_regstatus_BITS_13_TO_12___h2999 = DEF_regstatus_BITS_13_TO_12___h2999;
      vcd_write_val(sim_hdl, num++, DEF_regstatus_BITS_15_TO_14___h2929, 2u);
      backing.DEF_regstatus_BITS_15_TO_14___h2929 = DEF_regstatus_BITS_15_TO_14___h2929;
      vcd_write_val(sim_hdl, num++, DEF_regstatus_BITS_17_TO_16___h2859, 2u);
      backing.DEF_regstatus_BITS_17_TO_16___h2859 = DEF_regstatus_BITS_17_TO_16___h2859;
      vcd_write_val(sim_hdl, num++, DEF_regstatus_BITS_19_TO_18___h2789, 2u);
      backing.DEF_regstatus_BITS_19_TO_18___h2789 = DEF_regstatus_BITS_19_TO_18___h2789;
      vcd_write_val(sim_hdl, num++, DEF_regstatus_BITS_1_TO_0___h3419, 2u);
      backing.DEF_regstatus_BITS_1_TO_0___h3419 = DEF_regstatus_BITS_1_TO_0___h3419;
      vcd_write_val(sim_hdl, num++, DEF_regstatus_BITS_3_TO_2___h3349, 2u);
      backing.DEF_regstatus_BITS_3_TO_2___h3349 = DEF_regstatus_BITS_3_TO_2___h3349;
      vcd_write_val(sim_hdl, num++, DEF_regstatus_BITS_5_TO_4___h3279, 2u);
      backing.DEF_regstatus_BITS_5_TO_4___h3279 = DEF_regstatus_BITS_5_TO_4___h3279;
      vcd_write_val(sim_hdl, num++, DEF_regstatus_BITS_7_TO_6___h3209, 2u);
      backing.DEF_regstatus_BITS_7_TO_6___h3209 = DEF_regstatus_BITS_7_TO_6___h3209;
      vcd_write_val(sim_hdl, num++, DEF_regstatus_BITS_9_TO_8___h3139, 2u);
      backing.DEF_regstatus_BITS_9_TO_8___h3139 = DEF_regstatus_BITS_9_TO_8___h3139;
      vcd_write_val(sim_hdl, num++, DEF_regstatus__h3418, 20u);
      backing.DEF_regstatus__h3418 = DEF_regstatus__h3418;
      vcd_write_val(sim_hdl, num++, DEF_x__h2738, 4u);
      backing.DEF_x__h2738 = DEF_x__h2738;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
  INST_failCond.dump_VCD(dt, backing.INST_failCond);
  INST_regstatus.dump_VCD(dt, backing.INST_regstatus);
  INST_vecstatus_0.dump_VCD(dt, backing.INST_vecstatus_0);
  INST_vecstatus_1.dump_VCD(dt, backing.INST_vecstatus_1);
  INST_vecstatus_2.dump_VCD(dt, backing.INST_vecstatus_2);
  INST_vecstatus_3.dump_VCD(dt, backing.INST_vecstatus_3);
  INST_vecstatus_4.dump_VCD(dt, backing.INST_vecstatus_4);
  INST_vecstatus_5.dump_VCD(dt, backing.INST_vecstatus_5);
  INST_vecstatus_6.dump_VCD(dt, backing.INST_vecstatus_6);
  INST_vecstatus_7.dump_VCD(dt, backing.INST_vecstatus_7);
  INST_vecstatus_8.dump_VCD(dt, backing.INST_vecstatus_8);
  INST_vecstatus_9.dump_VCD(dt, backing.INST_vecstatus_9);
}
