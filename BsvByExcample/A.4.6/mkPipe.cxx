/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Dec 26 18:56:57 CET 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkPipe.h"


/* String declarations */
static std::string const __str_literal_1(" v1 = %0h", 9u);
static std::string const __str_literal_2(" v2 = %0h", 9u);
static std::string const __str_literal_3(" v3 = %0h", 9u);
static std::string const __str_literal_4(" v4 = %0h", 9u);


/* Constructor */
MOD_mkPipe::MOD_mkPipe(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_f1(simHdl, "f1", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_f2(simHdl, "f2", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_f3(simHdl, "f3", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_f4(simHdl, "f4", this, 32u, 2u, (tUInt8)1u, 0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 7u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkPipe::init_symbols_0()
{
  init_symbol(&symbols[0u], "f1", SYM_MODULE, &INST_f1);
  init_symbol(&symbols[1u], "f2", SYM_MODULE, &INST_f2);
  init_symbol(&symbols[2u], "f3", SYM_MODULE, &INST_f3);
  init_symbol(&symbols[3u], "f4", SYM_MODULE, &INST_f4);
  init_symbol(&symbols[4u], "RL_r2", SYM_RULE);
  init_symbol(&symbols[5u], "RL_r3", SYM_RULE);
  init_symbol(&symbols[6u], "RL_r4", SYM_RULE);
}


/* Rule actions */

void MOD_mkPipe::RL_r2()
{
  tUInt32 DEF_f1_first_PLUS_1___d6;
  tUInt32 DEF_f1_first____d4;
  tUInt32 DEF_signed_f1_first___d5;
  DEF_f1_first____d4 = INST_f1.METH_first();
  DEF_signed_f1_first___d5 = DEF_f1_first____d4;
  DEF_f1_first_PLUS_1___d6 = DEF_f1_first____d4 + 1u;
  INST_f1.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_1, DEF_signed_f1_first___d5);
  INST_f2.METH_enq(DEF_f1_first_PLUS_1___d6);
}

void MOD_mkPipe::RL_r3()
{
  tUInt32 DEF_f2_first__0_PLUS_1___d12;
  tUInt32 DEF_f2_first____d10;
  tUInt32 DEF_signed_f2_first__0___d11;
  DEF_f2_first____d10 = INST_f2.METH_first();
  DEF_signed_f2_first__0___d11 = DEF_f2_first____d10;
  DEF_f2_first__0_PLUS_1___d12 = DEF_f2_first____d10 + 1u;
  INST_f2.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_2, DEF_signed_f2_first__0___d11);
  INST_f3.METH_enq(DEF_f2_first__0_PLUS_1___d12);
}

void MOD_mkPipe::RL_r4()
{
  tUInt32 DEF_f3_first__6_PLUS_1___d18;
  tUInt32 DEF_f3_first____d16;
  tUInt32 DEF_signed_f3_first__6___d17;
  DEF_f3_first____d16 = INST_f3.METH_first();
  DEF_signed_f3_first__6___d17 = DEF_f3_first____d16;
  DEF_f3_first__6_PLUS_1___d18 = DEF_f3_first____d16 + 1u;
  INST_f3.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_3, DEF_signed_f3_first__6___d17);
  INST_f4.METH_enq(DEF_f3_first__6_PLUS_1___d18);
}


/* Methods */

void MOD_mkPipe::METH_send(tUInt32 ARG_send_x)
{
  INST_f1.METH_enq(ARG_send_x);
}

tUInt8 MOD_mkPipe::METH_RDY_send()
{
  tUInt8 DEF_CAN_FIRE_send;
  tUInt8 PORT_RDY_send;
  DEF_CAN_FIRE_send = INST_f1.METH_i_notFull();
  PORT_RDY_send = DEF_CAN_FIRE_send;
  return PORT_RDY_send;
}

tUInt32 MOD_mkPipe::METH_receive()
{
  tUInt32 DEF_f4_first____d19;
  tUInt32 DEF_signed_f4_first__9___d20;
  tUInt32 PORT_receive;
  DEF_f4_first____d19 = INST_f4.METH_first();
  PORT_receive = DEF_f4_first____d19;
  DEF_signed_f4_first__9___d20 = DEF_f4_first____d19;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_4, DEF_signed_f4_first__9___d20);
  INST_f4.METH_deq();
  return PORT_receive;
}

tUInt8 MOD_mkPipe::METH_RDY_receive()
{
  tUInt8 DEF_CAN_FIRE_receive;
  tUInt8 PORT_RDY_receive;
  DEF_CAN_FIRE_receive = INST_f4.METH_i_notEmpty();
  PORT_RDY_receive = DEF_CAN_FIRE_receive;
  return PORT_RDY_receive;
}


/* Reset routines */

void MOD_mkPipe::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_f4.reset_RST(ARG_rst_in);
  INST_f3.reset_RST(ARG_rst_in);
  INST_f2.reset_RST(ARG_rst_in);
  INST_f1.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkPipe::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkPipe::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_f1.dump_state(indent + 2u);
  INST_f2.dump_state(indent + 2u);
  INST_f3.dump_state(indent + 2u);
  INST_f4.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkPipe::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 5u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_f1.dump_VCD_defs(num);
  num = INST_f2.dump_VCD_defs(num);
  num = INST_f3.dump_VCD_defs(num);
  num = INST_f4.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkPipe::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkPipe &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkPipe::vcd_defs(tVCDDumpType dt, MOD_mkPipe &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkPipe::vcd_prims(tVCDDumpType dt, MOD_mkPipe &backing)
{
  INST_f1.dump_VCD(dt, backing.INST_f1);
  INST_f2.dump_VCD(dt, backing.INST_f2);
  INST_f3.dump_VCD(dt, backing.INST_f3);
  INST_f4.dump_VCD(dt, backing.INST_f4);
}
