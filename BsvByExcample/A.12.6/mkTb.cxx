/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Fri Jan 12 16:37:33 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_2("Error: \"Tb.bsv\", line 44, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l44c14] and\n  [RL_action_l45c14, RL_action_l46c14, RL_action_l47c14, RL_action_l48c14,\n  RL_action_l49c14, RL_action_l50c14, RL_action_l51c14, RL_action_l52c17] )\n  fired in the same clock cycle.\n",
					 297u);
static std::string const __str_literal_3("Error: \"Tb.bsv\", line 45, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l45c14] and\n  [RL_action_l46c14, RL_action_l47c14, RL_action_l48c14, RL_action_l49c14,\n  RL_action_l50c14, RL_action_l51c14, RL_action_l52c17] ) fired in the same\n  clock cycle.\n",
					 279u);
static std::string const __str_literal_4("Error: \"Tb.bsv\", line 46, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l46c14] and\n  [RL_action_l47c14, RL_action_l48c14, RL_action_l49c14, RL_action_l50c14,\n  RL_action_l51c14, RL_action_l52c17] ) fired in the same clock cycle.\n",
					 259u);
static std::string const __str_literal_5("Error: \"Tb.bsv\", line 47, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l47c14] and\n  [RL_action_l48c14, RL_action_l49c14, RL_action_l50c14, RL_action_l51c14,\n  RL_action_l52c17] ) fired in the same clock cycle.\n",
					 241u);
static std::string const __str_literal_6("Error: \"Tb.bsv\", line 48, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l48c14] and\n  [RL_action_l49c14, RL_action_l50c14, RL_action_l51c14, RL_action_l52c17] )\n  fired in the same clock cycle.\n",
					 223u);
static std::string const __str_literal_7("Error: \"Tb.bsv\", line 49, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l49c14] and\n  [RL_action_l50c14, RL_action_l51c14, RL_action_l52c17] ) fired in the same\n  clock cycle.\n",
					 205u);
static std::string const __str_literal_8("Error: \"Tb.bsv\", line 50, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l50c14] and\n  [RL_action_l51c14, RL_action_l52c17] ) fired in the same clock cycle.\n",
					 185u);
static std::string const __str_literal_9("Error: \"Tb.bsv\", line 51, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l51c14] and\n  [RL_action_l52c17] ) fired in the same clock cycle.\n",
					 167u);
static std::string const __str_literal_1("ofifo[%d] => %x at ", 19u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_ififo_0(simHdl, "ififo_0", this, 14u, 2u, (tUInt8)1u, 0u),
    INST_ififo_1(simHdl, "ififo_1", this, 14u, 2u, (tUInt8)1u, 0u),
    INST_ofifo_0(simHdl, "ofifo_0", this, 14u, 2u, (tUInt8)1u, 0u),
    INST_ofifo_1(simHdl, "ofifo_1", this, 14u, 2u, (tUInt8)1u, 0u),
    INST_ofifo_2(simHdl, "ofifo_2", this, 14u, 2u, (tUInt8)1u, 0u),
    INST_ofifo_3(simHdl, "ofifo_3", this, 14u, 2u, (tUInt8)1u, 0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h18739(12297829382473034410llu),
    DEF_v__h18660(12297829382473034410llu),
    DEF_v__h18581(12297829382473034410llu),
    DEF_v__h18502(12297829382473034410llu)
{
  symbol_count = 59u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_10", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_11", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_12", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_13", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_14", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[7u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[8u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[9u], "ififo_0", SYM_MODULE, &INST_ififo_0);
  init_symbol(&symbols[10u], "ififo_1", SYM_MODULE, &INST_ififo_1);
  init_symbol(&symbols[11u], "ofifo_0", SYM_MODULE, &INST_ofifo_0);
  init_symbol(&symbols[12u], "ofifo_1", SYM_MODULE, &INST_ofifo_1);
  init_symbol(&symbols[13u], "ofifo_2", SYM_MODULE, &INST_ofifo_2);
  init_symbol(&symbols[14u], "ofifo_3", SYM_MODULE, &INST_ofifo_3);
  init_symbol(&symbols[15u], "RL_action_l44c14", SYM_RULE);
  init_symbol(&symbols[16u], "RL_action_l45c14", SYM_RULE);
  init_symbol(&symbols[17u], "RL_action_l46c14", SYM_RULE);
  init_symbol(&symbols[18u], "RL_action_l47c14", SYM_RULE);
  init_symbol(&symbols[19u], "RL_action_l48c14", SYM_RULE);
  init_symbol(&symbols[20u], "RL_action_l49c14", SYM_RULE);
  init_symbol(&symbols[21u], "RL_action_l50c14", SYM_RULE);
  init_symbol(&symbols[22u], "RL_action_l51c14", SYM_RULE);
  init_symbol(&symbols[23u], "RL_action_l52c17", SYM_RULE);
  init_symbol(&symbols[24u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[25u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[26u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[27u], "RL_idle_l43c5", SYM_RULE);
  init_symbol(&symbols[28u], "RL_move0", SYM_RULE);
  init_symbol(&symbols[29u], "RL_move1", SYM_RULE);
  init_symbol(&symbols[30u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[31u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[32u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[33u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[34u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[35u], "RL_watch", SYM_RULE);
  init_symbol(&symbols[36u], "RL_watch_1", SYM_RULE);
  init_symbol(&symbols[37u], "RL_watch_2", SYM_RULE);
  init_symbol(&symbols[38u], "RL_watch_3", SYM_RULE);
  init_symbol(&symbols[39u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[40u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[41u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[42u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[43u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[44u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[45u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[46u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[47u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[48u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[49u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[50u],
	      "WILL_FIRE_RL_action_l44c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l44c14,
	      1u);
  init_symbol(&symbols[51u],
	      "WILL_FIRE_RL_action_l45c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l45c14,
	      1u);
  init_symbol(&symbols[52u],
	      "WILL_FIRE_RL_action_l46c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l46c14,
	      1u);
  init_symbol(&symbols[53u],
	      "WILL_FIRE_RL_action_l47c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l47c14,
	      1u);
  init_symbol(&symbols[54u],
	      "WILL_FIRE_RL_action_l48c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l48c14,
	      1u);
  init_symbol(&symbols[55u],
	      "WILL_FIRE_RL_action_l49c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l49c14,
	      1u);
  init_symbol(&symbols[56u],
	      "WILL_FIRE_RL_action_l50c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l50c14,
	      1u);
  init_symbol(&symbols[57u],
	      "WILL_FIRE_RL_action_l51c14",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l51c14,
	      1u);
  init_symbol(&symbols[58u],
	      "WILL_FIRE_RL_action_l52c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l52c17,
	      1u);
}


/* Rule actions */

void MOD_mkTb::RL_move0()
{
  tUInt8 DEF_ififo_0_first__0_BITS_13_TO_12_1_EQ_0___d12;
  tUInt8 DEF_ififo_0_first__0_BITS_13_TO_12_1_EQ_1___d13;
  tUInt8 DEF_ififo_0_first__0_BITS_13_TO_12_1_EQ_2___d14;
  tUInt8 DEF_ififo_0_first__0_BITS_13_TO_12_1_EQ_3___d15;
  tUInt8 DEF_x__h1176;
  tUInt32 DEF_ififo_0_first____d10;
  DEF_ififo_0_first____d10 = INST_ififo_0.METH_first();
  DEF_x__h1176 = (tUInt8)(DEF_ififo_0_first____d10 >> 12u);
  DEF_ififo_0_first__0_BITS_13_TO_12_1_EQ_3___d15 = DEF_x__h1176 == (tUInt8)3u;
  DEF_ififo_0_first__0_BITS_13_TO_12_1_EQ_2___d14 = DEF_x__h1176 == (tUInt8)2u;
  DEF_ififo_0_first__0_BITS_13_TO_12_1_EQ_1___d13 = DEF_x__h1176 == (tUInt8)1u;
  DEF_ififo_0_first__0_BITS_13_TO_12_1_EQ_0___d12 = DEF_x__h1176 == (tUInt8)0u;
  INST_ififo_0.METH_deq();
  if (DEF_ififo_0_first__0_BITS_13_TO_12_1_EQ_0___d12)
    INST_ofifo_0.METH_enq(DEF_ififo_0_first____d10);
  if (DEF_ififo_0_first__0_BITS_13_TO_12_1_EQ_1___d13)
    INST_ofifo_1.METH_enq(DEF_ififo_0_first____d10);
  if (DEF_ififo_0_first__0_BITS_13_TO_12_1_EQ_2___d14)
    INST_ofifo_2.METH_enq(DEF_ififo_0_first____d10);
  if (DEF_ififo_0_first__0_BITS_13_TO_12_1_EQ_3___d15)
    INST_ofifo_3.METH_enq(DEF_ififo_0_first____d10);
}

void MOD_mkTb::RL_move1()
{
  tUInt8 DEF_ififo_1_first__8_BITS_13_TO_12_9_EQ_0___d20;
  tUInt8 DEF_ififo_1_first__8_BITS_13_TO_12_9_EQ_1___d21;
  tUInt8 DEF_ififo_1_first__8_BITS_13_TO_12_9_EQ_2___d22;
  tUInt8 DEF_ififo_1_first__8_BITS_13_TO_12_9_EQ_3___d23;
  tUInt8 DEF_x__h1401;
  tUInt32 DEF_ififo_1_first____d18;
  DEF_ififo_1_first____d18 = INST_ififo_1.METH_first();
  DEF_x__h1401 = (tUInt8)(DEF_ififo_1_first____d18 >> 12u);
  DEF_ififo_1_first__8_BITS_13_TO_12_9_EQ_3___d23 = DEF_x__h1401 == (tUInt8)3u;
  DEF_ififo_1_first__8_BITS_13_TO_12_9_EQ_2___d22 = DEF_x__h1401 == (tUInt8)2u;
  DEF_ififo_1_first__8_BITS_13_TO_12_9_EQ_1___d21 = DEF_x__h1401 == (tUInt8)1u;
  DEF_ififo_1_first__8_BITS_13_TO_12_9_EQ_0___d20 = DEF_x__h1401 == (tUInt8)0u;
  INST_ififo_1.METH_deq();
  if (DEF_ififo_1_first__8_BITS_13_TO_12_9_EQ_0___d20)
    INST_ofifo_0.METH_enq(DEF_ififo_1_first____d18);
  if (DEF_ififo_1_first__8_BITS_13_TO_12_9_EQ_1___d21)
    INST_ofifo_1.METH_enq(DEF_ififo_1_first____d18);
  if (DEF_ififo_1_first__8_BITS_13_TO_12_9_EQ_2___d22)
    INST_ofifo_2.METH_enq(DEF_ififo_1_first____d18);
  if (DEF_ififo_1_first__8_BITS_13_TO_12_9_EQ_3___d23)
    INST_ofifo_3.METH_enq(DEF_ififo_1_first____d18);
}

void MOD_mkTb::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas__4_AND_start_reg_2_wget__5___d26;
  DEF_start_reg_2_whas__4_AND_start_reg_2_wget__5___d26 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas__4_AND_start_reg_2_wget__5___d26);
}

void MOD_mkTb::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTb::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__6_AND_state_fired_1_wget__7___d38;
  DEF_state_fired_1_whas__6_AND_state_fired_1_wget__7___d38 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__6_AND_state_fired_1_wget__7___d38);
}

void MOD_mkTb::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__9_OR_NOT_state_overlap_pw_w_ETC___d44;
  tUInt8 DEF_state_can_overlap__h3896;
  DEF_state_can_overlap__h3896 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__9_OR_NOT_state_overlap_pw_w_ETC___d44 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h3896);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__9_OR_NOT_state_overlap_pw_w_ETC___d44);
}

void MOD_mkTb::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTb::RL_action_l44c14()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_ififo_0.METH_enq(0u);
}

void MOD_mkTb::RL_action_l45c14()
{
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_ififo_0.METH_enq(4097u);
}

void MOD_mkTb::RL_action_l46c14()
{
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_ififo_0.METH_enq(8194u);
}

void MOD_mkTb::RL_action_l47c14()
{
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_ififo_0.METH_enq(12291u);
}

void MOD_mkTb::RL_action_l48c14()
{
  INST_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_ififo_1.METH_enq(0u);
}

void MOD_mkTb::RL_action_l49c14()
{
  INST_state_mkFSMstate.METH_write((tUInt8)6u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_ififo_1.METH_enq(4112u);
}

void MOD_mkTb::RL_action_l50c14()
{
  INST_state_mkFSMstate.METH_write((tUInt8)7u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_ififo_1.METH_enq(8224u);
}

void MOD_mkTb::RL_action_l51c14()
{
  INST_state_mkFSMstate.METH_write((tUInt8)8u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_ififo_1.METH_enq(12336u);
}

void MOD_mkTb::RL_action_l52c17()
{
  INST_state_mkFSMstate.METH_write((tUInt8)9u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTb::RL_idle_l43c5()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTb::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTb::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTb::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTb::RL_watch()
{
  tUInt32 DEF_data__h18470;
  tUInt32 DEF_signed_0___d100;
  DEF_signed_0___d100 = 0u;
  DEF_data__h18470 = INST_ofifo_0.METH_first();
  INST_ofifo_0.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h18502 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,14,64",
		   &__str_literal_1,
		   DEF_signed_0___d100,
		   DEF_data__h18470,
		   DEF_v__h18502);
}

void MOD_mkTb::RL_watch_1()
{
  tUInt32 DEF_data__h18549;
  tUInt32 DEF_signed_1___d104;
  DEF_signed_1___d104 = 1u;
  DEF_data__h18549 = INST_ofifo_1.METH_first();
  INST_ofifo_1.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h18581 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,14,64",
		   &__str_literal_1,
		   DEF_signed_1___d104,
		   DEF_data__h18549,
		   DEF_v__h18581);
}

void MOD_mkTb::RL_watch_2()
{
  tUInt32 DEF_data__h18628;
  tUInt32 DEF_signed_2___d108;
  DEF_signed_2___d108 = 2u;
  DEF_data__h18628 = INST_ofifo_2.METH_first();
  INST_ofifo_2.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h18660 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,14,64",
		   &__str_literal_1,
		   DEF_signed_2___d108,
		   DEF_data__h18628,
		   DEF_v__h18660);
}

void MOD_mkTb::RL_watch_3()
{
  tUInt32 DEF_data__h18707;
  tUInt32 DEF_signed_3___d112;
  DEF_signed_3___d112 = 3u;
  DEF_data__h18707 = INST_ofifo_3.METH_first();
  INST_ofifo_3.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h18739 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,14,64",
		   &__str_literal_1,
		   DEF_signed_3___d112,
		   DEF_data__h18707,
		   DEF_v__h18739);
}

void MOD_mkTb::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l44c14 && (((((((DEF_WILL_FIRE_RL_action_l45c14 || DEF_WILL_FIRE_RL_action_l46c14) || DEF_WILL_FIRE_RL_action_l47c14) || DEF_WILL_FIRE_RL_action_l48c14) || DEF_WILL_FIRE_RL_action_l49c14) || DEF_WILL_FIRE_RL_action_l50c14) || DEF_WILL_FIRE_RL_action_l51c14) || DEF_WILL_FIRE_RL_action_l52c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_2);
}

void MOD_mkTb::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l45c14 && ((((((DEF_WILL_FIRE_RL_action_l46c14 || DEF_WILL_FIRE_RL_action_l47c14) || DEF_WILL_FIRE_RL_action_l48c14) || DEF_WILL_FIRE_RL_action_l49c14) || DEF_WILL_FIRE_RL_action_l50c14) || DEF_WILL_FIRE_RL_action_l51c14) || DEF_WILL_FIRE_RL_action_l52c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_3);
}

void MOD_mkTb::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l46c14 && (((((DEF_WILL_FIRE_RL_action_l47c14 || DEF_WILL_FIRE_RL_action_l48c14) || DEF_WILL_FIRE_RL_action_l49c14) || DEF_WILL_FIRE_RL_action_l50c14) || DEF_WILL_FIRE_RL_action_l51c14) || DEF_WILL_FIRE_RL_action_l52c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkTb::__me_check_10()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l47c14 && ((((DEF_WILL_FIRE_RL_action_l48c14 || DEF_WILL_FIRE_RL_action_l49c14) || DEF_WILL_FIRE_RL_action_l50c14) || DEF_WILL_FIRE_RL_action_l51c14) || DEF_WILL_FIRE_RL_action_l52c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
}

void MOD_mkTb::__me_check_11()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l48c14 && (((DEF_WILL_FIRE_RL_action_l49c14 || DEF_WILL_FIRE_RL_action_l50c14) || DEF_WILL_FIRE_RL_action_l51c14) || DEF_WILL_FIRE_RL_action_l52c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
}

void MOD_mkTb::__me_check_12()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l49c14 && ((DEF_WILL_FIRE_RL_action_l50c14 || DEF_WILL_FIRE_RL_action_l51c14) || DEF_WILL_FIRE_RL_action_l52c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
}

void MOD_mkTb::__me_check_13()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l50c14 && (DEF_WILL_FIRE_RL_action_l51c14 || DEF_WILL_FIRE_RL_action_l52c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
}

void MOD_mkTb::__me_check_14()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l51c14 && DEF_WILL_FIRE_RL_action_l52c17)
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_ofifo_3.reset_RST(ARG_rst_in);
  INST_ofifo_2.reset_RST(ARG_rst_in);
  INST_ofifo_1.reset_RST(ARG_rst_in);
  INST_ofifo_0.reset_RST(ARG_rst_in);
  INST_ififo_1.reset_RST(ARG_rst_in);
  INST_ififo_0.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_ififo_0.dump_state(indent + 2u);
  INST_ififo_1.dump_state(indent + 2u);
  INST_ofifo_0.dump_state(indent + 2u);
  INST_ofifo_1.dump_state(indent + 2u);
  INST_ofifo_2.dump_state(indent + 2u);
  INST_ofifo_3.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 32u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l44c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l45c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l46c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l47c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l48c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l49c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l50c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l51c14", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l52c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h18502", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h18581", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h18660", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h18739", 64u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_ififo_0.dump_VCD_defs(num);
  num = INST_ififo_1.dump_VCD_defs(num);
  num = INST_ofifo_0.dump_VCD_defs(num);
  num = INST_ofifo_1.dump_VCD_defs(num);
  num = INST_ofifo_2.dump_VCD_defs(num);
  num = INST_ofifo_3.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l44c14) != DEF_WILL_FIRE_RL_action_l44c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l44c14, 1u);
	backing.DEF_WILL_FIRE_RL_action_l44c14 = DEF_WILL_FIRE_RL_action_l44c14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l45c14) != DEF_WILL_FIRE_RL_action_l45c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l45c14, 1u);
	backing.DEF_WILL_FIRE_RL_action_l45c14 = DEF_WILL_FIRE_RL_action_l45c14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l46c14) != DEF_WILL_FIRE_RL_action_l46c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l46c14, 1u);
	backing.DEF_WILL_FIRE_RL_action_l46c14 = DEF_WILL_FIRE_RL_action_l46c14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l47c14) != DEF_WILL_FIRE_RL_action_l47c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l47c14, 1u);
	backing.DEF_WILL_FIRE_RL_action_l47c14 = DEF_WILL_FIRE_RL_action_l47c14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l48c14) != DEF_WILL_FIRE_RL_action_l48c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l48c14, 1u);
	backing.DEF_WILL_FIRE_RL_action_l48c14 = DEF_WILL_FIRE_RL_action_l48c14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l49c14) != DEF_WILL_FIRE_RL_action_l49c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l49c14, 1u);
	backing.DEF_WILL_FIRE_RL_action_l49c14 = DEF_WILL_FIRE_RL_action_l49c14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l50c14) != DEF_WILL_FIRE_RL_action_l50c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l50c14, 1u);
	backing.DEF_WILL_FIRE_RL_action_l50c14 = DEF_WILL_FIRE_RL_action_l50c14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l51c14) != DEF_WILL_FIRE_RL_action_l51c14)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l51c14, 1u);
	backing.DEF_WILL_FIRE_RL_action_l51c14 = DEF_WILL_FIRE_RL_action_l51c14;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l52c17) != DEF_WILL_FIRE_RL_action_l52c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l52c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_l52c17 = DEF_WILL_FIRE_RL_action_l52c17;
      }
      ++num;
      if ((backing.DEF_v__h18502) != DEF_v__h18502)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h18502, 64u);
	backing.DEF_v__h18502 = DEF_v__h18502;
      }
      ++num;
      if ((backing.DEF_v__h18581) != DEF_v__h18581)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h18581, 64u);
	backing.DEF_v__h18581 = DEF_v__h18581;
      }
      ++num;
      if ((backing.DEF_v__h18660) != DEF_v__h18660)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h18660, 64u);
	backing.DEF_v__h18660 = DEF_v__h18660;
      }
      ++num;
      if ((backing.DEF_v__h18739) != DEF_v__h18739)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h18739, 64u);
	backing.DEF_v__h18739 = DEF_v__h18739;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l44c14, 1u);
      backing.DEF_WILL_FIRE_RL_action_l44c14 = DEF_WILL_FIRE_RL_action_l44c14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l45c14, 1u);
      backing.DEF_WILL_FIRE_RL_action_l45c14 = DEF_WILL_FIRE_RL_action_l45c14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l46c14, 1u);
      backing.DEF_WILL_FIRE_RL_action_l46c14 = DEF_WILL_FIRE_RL_action_l46c14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l47c14, 1u);
      backing.DEF_WILL_FIRE_RL_action_l47c14 = DEF_WILL_FIRE_RL_action_l47c14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l48c14, 1u);
      backing.DEF_WILL_FIRE_RL_action_l48c14 = DEF_WILL_FIRE_RL_action_l48c14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l49c14, 1u);
      backing.DEF_WILL_FIRE_RL_action_l49c14 = DEF_WILL_FIRE_RL_action_l49c14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l50c14, 1u);
      backing.DEF_WILL_FIRE_RL_action_l50c14 = DEF_WILL_FIRE_RL_action_l50c14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l51c14, 1u);
      backing.DEF_WILL_FIRE_RL_action_l51c14 = DEF_WILL_FIRE_RL_action_l51c14;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l52c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_l52c17 = DEF_WILL_FIRE_RL_action_l52c17;
      vcd_write_val(sim_hdl, num++, DEF_v__h18502, 64u);
      backing.DEF_v__h18502 = DEF_v__h18502;
      vcd_write_val(sim_hdl, num++, DEF_v__h18581, 64u);
      backing.DEF_v__h18581 = DEF_v__h18581;
      vcd_write_val(sim_hdl, num++, DEF_v__h18660, 64u);
      backing.DEF_v__h18660 = DEF_v__h18660;
      vcd_write_val(sim_hdl, num++, DEF_v__h18739, 64u);
      backing.DEF_v__h18739 = DEF_v__h18739;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_ififo_0.dump_VCD(dt, backing.INST_ififo_0);
  INST_ififo_1.dump_VCD(dt, backing.INST_ififo_1);
  INST_ofifo_0.dump_VCD(dt, backing.INST_ofifo_0);
  INST_ofifo_1.dump_VCD(dt, backing.INST_ofifo_1);
  INST_ofifo_2.dump_VCD(dt, backing.INST_ofifo_2);
  INST_ofifo_3.dump_VCD(dt, backing.INST_ofifo_3);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}
