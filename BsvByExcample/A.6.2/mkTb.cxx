/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Jan  9 15:33:21 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_3("fifo deq: %d", 12u);
static std::string const __str_literal_1("fifo enq1: %d2", 14u);
static std::string const __str_literal_2("fifo enq2: %d", 13u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_f(simHdl, "f", this, 32u, 2u, (tUInt8)1u, 0u),
    INST_state(simHdl, "state", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 7u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h189", SYM_DEF, &DEF_b__h189, 32u);
  init_symbol(&symbols[1u], "f", SYM_MODULE, &INST_f);
  init_symbol(&symbols[2u], "RL_deq", SYM_RULE);
  init_symbol(&symbols[3u], "RL_enq1", SYM_RULE);
  init_symbol(&symbols[4u], "RL_enq2", SYM_RULE);
  init_symbol(&symbols[5u], "RL_step_state", SYM_RULE);
  init_symbol(&symbols[6u], "state", SYM_MODULE, &INST_state);
}


/* Rule actions */

void MOD_mkTb::RL_step_state()
{
  tUInt8 DEF_NOT_state_SLE_9___d3;
  DEF_b__h189 = INST_state.METH_read();
  DEF_state_PLUS_1___d4 = DEF_b__h189 + 1u;
  DEF_NOT_state_SLE_9___d3 = !primSLE8(1u, 32u, (tUInt32)(DEF_b__h189), 32u, 9u);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_state_SLE_9___d3)
      dollar_finish(sim_hdl, "32", 0u);
  INST_state.METH_write(DEF_state_PLUS_1___d4);
}

void MOD_mkTb::RL_enq1()
{
  tUInt32 DEF_signed_state___d8;
  DEF_b__h189 = INST_state.METH_read();
  DEF_signed_state___d8 = DEF_b__h189;
  INST_f.METH_enq(DEF_b__h189);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_1, DEF_signed_state___d8);
}

void MOD_mkTb::RL_enq2()
{
  tUInt32 DEF_signed_state_PLUS_1___d12;
  DEF_b__h189 = INST_state.METH_read();
  DEF_state_PLUS_1___d4 = DEF_b__h189 + 1u;
  DEF_signed_state_PLUS_1___d12 = DEF_state_PLUS_1___d4;
  INST_f.METH_enq(DEF_state_PLUS_1___d4);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_2, DEF_signed_state_PLUS_1___d12);
}

void MOD_mkTb::RL_deq()
{
  tUInt32 DEF_signed_f_first__4___d15;
  DEF_signed_f_first__4___d15 = INST_f.METH_first();
  INST_f.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_3, DEF_signed_f_first__4___d15);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state.reset_RST(ARG_rst_in);
  INST_f.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_f.dump_state(indent + 2u);
  INST_state.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 5u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h189", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "state_PLUS_1___d4", 32u);
  num = INST_f.dump_VCD_defs(num);
  num = INST_state.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h189) != DEF_b__h189)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h189, 32u);
	backing.DEF_b__h189 = DEF_b__h189;
      }
      ++num;
      if ((backing.DEF_state_PLUS_1___d4) != DEF_state_PLUS_1___d4)
      {
	vcd_write_val(sim_hdl, num, DEF_state_PLUS_1___d4, 32u);
	backing.DEF_state_PLUS_1___d4 = DEF_state_PLUS_1___d4;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h189, 32u);
      backing.DEF_b__h189 = DEF_b__h189;
      vcd_write_val(sim_hdl, num++, DEF_state_PLUS_1___d4, 32u);
      backing.DEF_state_PLUS_1___d4 = DEF_state_PLUS_1___d4;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_f.dump_VCD(dt, backing.INST_f);
  INST_state.dump_VCD(dt, backing.INST_state);
}
