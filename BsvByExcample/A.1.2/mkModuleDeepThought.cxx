/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Sat Dec 23 17:01:16 CET 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkModuleDeepThought.h"


/* Constructor */
MOD_mkModuleDeepThought::MOD_mkModuleDeepThought(tSimStateHdl simHdl,
						 char const *name,
						 Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  symbol_count = 0u;
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkModuleDeepThought::init_symbols_0()
{
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkModuleDeepThought::METH_the_answer(tUInt32 ARG_the_answer_x,
						 tUInt32 ARG_the_answer_y,
						 tUInt32 ARG_the_answer_z)
{
  tUInt32 DEF_the_answer_x_PLUS_the_answer_y___d1;
  tUInt32 PORT_the_answer;
  DEF_the_answer_x_PLUS_the_answer_y___d1 = ARG_the_answer_x + ARG_the_answer_y;
  PORT_the_answer = DEF_the_answer_x_PLUS_the_answer_y___d1 + ARG_the_answer_z;
  return PORT_the_answer;
}

tUInt8 MOD_mkModuleDeepThought::METH_RDY_the_answer()
{
  tUInt8 DEF_CAN_FIRE_the_answer;
  tUInt8 PORT_RDY_the_answer;
  DEF_CAN_FIRE_the_answer = (tUInt8)1u;
  PORT_RDY_the_answer = DEF_CAN_FIRE_the_answer;
  return PORT_RDY_the_answer;
}


/* Reset routines */

void MOD_mkModuleDeepThought::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkModuleDeepThought::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkModuleDeepThought::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkModuleDeepThought::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkModuleDeepThought::dump_VCD(tVCDDumpType dt,
				       unsigned int levels,
				       MOD_mkModuleDeepThought &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkModuleDeepThought::vcd_defs(tVCDDumpType dt, MOD_mkModuleDeepThought &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}
