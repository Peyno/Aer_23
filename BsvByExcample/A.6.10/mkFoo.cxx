/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Jan  9 17:36:38 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkFoo.h"


/* String declarations */
static std::string const __str_literal_3("%0d: method avx; setting x to 42; returning old x = %0d",
					 55u);
static std::string const __str_literal_1("%0d: rule incx; new x = %0d", 27u);
static std::string const __str_literal_2("%0d: rule incy; new y = %0d", 27u);
static std::string const __str_literal_4("0d: method ay; setting y to 42", 30u);


/* Constructor */
MOD_mkFoo::MOD_mkFoo(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    INST_x(simHdl, "x", this, 32u, 0u, (tUInt8)0u),
    INST_y(simHdl, "y", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_avx = false;
  symbol_count = 8u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkFoo::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "EN_avx", SYM_PORT, &PORT_EN_avx, 1u);
  init_symbol(&symbols[2u], "RL_count_cycles", SYM_RULE);
  init_symbol(&symbols[3u], "RL_incx", SYM_RULE);
  init_symbol(&symbols[4u], "RL_incy", SYM_RULE);
  init_symbol(&symbols[5u], "WILL_FIRE_avx", SYM_DEF, &DEF_WILL_FIRE_avx, 1u);
  init_symbol(&symbols[6u], "x", SYM_MODULE, &INST_x);
  init_symbol(&symbols[7u], "y", SYM_MODULE, &INST_y);
}


/* Rule actions */

void MOD_mkFoo::RL_count_cycles()
{
  tUInt32 DEF_cycle_PLUS_1___d2;
  tUInt8 DEF_NOT_cycle_SLE_3___d4;
  DEF_b__h184 = INST_cycle.METH_read();
  DEF_NOT_cycle_SLE_3___d4 = !primSLE8(1u, 32u, (tUInt32)(DEF_b__h184), 32u, 3u);
  DEF_cycle_PLUS_1___d2 = DEF_b__h184 + 1u;
  INST_cycle.METH_write(DEF_cycle_PLUS_1___d2);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_cycle_SLE_3___d4)
      dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkFoo::RL_incx()
{
  tUInt32 DEF_x_PLUS_1___d6;
  tUInt32 DEF_signed_x_PLUS_1___d8;
  DEF_b__h184 = INST_cycle.METH_read();
  DEF_signed_cycle___d7 = DEF_b__h184;
  DEF_b__h242 = INST_x.METH_read();
  DEF_x_PLUS_1___d6 = DEF_b__h242 + 1u;
  DEF_signed_x_PLUS_1___d8 = DEF_x_PLUS_1___d6;
  INST_x.METH_write(DEF_x_PLUS_1___d6);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_1,
		   DEF_signed_cycle___d7,
		   DEF_signed_x_PLUS_1___d8);
}

void MOD_mkFoo::RL_incy()
{
  tUInt32 DEF_y_PLUS_1___d10;
  tUInt32 DEF_signed_y_PLUS_1_0___d11;
  DEF_b__h184 = INST_cycle.METH_read();
  DEF_signed_cycle___d7 = DEF_b__h184;
  DEF_b__h293 = INST_y.METH_read();
  DEF_y_PLUS_1___d10 = DEF_b__h293 + 1u;
  DEF_signed_y_PLUS_1_0___d11 = DEF_y_PLUS_1___d10;
  INST_y.METH_write(DEF_y_PLUS_1___d10);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_2,
		   DEF_signed_cycle___d7,
		   DEF_signed_y_PLUS_1_0___d11);
}


/* Methods */

tUInt32 MOD_mkFoo::METH_avx()
{
  tUInt32 DEF_signed_x___d12;
  tUInt32 PORT_avx;
  PORT_EN_avx = (tUInt8)1u;
  DEF_WILL_FIRE_avx = (tUInt8)1u;
  DEF_b__h184 = INST_cycle.METH_read();
  DEF_signed_cycle___d7 = DEF_b__h184;
  DEF_b__h242 = INST_x.METH_read();
  PORT_avx = DEF_b__h242;
  DEF_signed_x___d12 = DEF_b__h242;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_3,
		   DEF_signed_cycle___d7,
		   DEF_signed_x___d12);
  INST_x.METH_write(42u);
  return PORT_avx;
}

tUInt8 MOD_mkFoo::METH_RDY_avx()
{
  tUInt8 DEF_CAN_FIRE_avx;
  tUInt8 PORT_RDY_avx;
  DEF_CAN_FIRE_avx = (tUInt8)1u;
  PORT_RDY_avx = DEF_CAN_FIRE_avx;
  return PORT_RDY_avx;
}

tUInt32 MOD_mkFoo::METH_vy()
{
  tUInt32 PORT_vy;
  DEF_b__h293 = INST_y.METH_read();
  PORT_vy = DEF_b__h293;
  return PORT_vy;
}

tUInt8 MOD_mkFoo::METH_RDY_vy()
{
  tUInt8 DEF_CAN_FIRE_vy;
  tUInt8 PORT_RDY_vy;
  DEF_CAN_FIRE_vy = (tUInt8)1u;
  PORT_RDY_vy = DEF_CAN_FIRE_vy;
  return PORT_RDY_vy;
}

void MOD_mkFoo::METH_ay()
{
  DEF_b__h184 = INST_cycle.METH_read();
  DEF_signed_cycle___d7 = DEF_b__h184;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_4, DEF_signed_cycle___d7);
  INST_y.METH_write(42u);
}

tUInt8 MOD_mkFoo::METH_RDY_ay()
{
  tUInt8 DEF_CAN_FIRE_ay;
  tUInt8 PORT_RDY_ay;
  DEF_CAN_FIRE_ay = (tUInt8)1u;
  PORT_RDY_ay = DEF_CAN_FIRE_ay;
  return PORT_RDY_ay;
}

tUInt32 MOD_mkFoo::METH_get_cycle_count()
{
  tUInt32 PORT_get_cycle_count;
  DEF_b__h184 = INST_cycle.METH_read();
  PORT_get_cycle_count = DEF_b__h184;
  return PORT_get_cycle_count;
}

tUInt8 MOD_mkFoo::METH_RDY_get_cycle_count()
{
  tUInt8 DEF_CAN_FIRE_get_cycle_count;
  tUInt8 PORT_RDY_get_cycle_count;
  DEF_CAN_FIRE_get_cycle_count = (tUInt8)1u;
  PORT_RDY_get_cycle_count = DEF_CAN_FIRE_get_cycle_count;
  return PORT_RDY_get_cycle_count;
}


/* Reset routines */

void MOD_mkFoo::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_y.reset_RST(ARG_rst_in);
  INST_x.reset_RST(ARG_rst_in);
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkFoo::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkFoo::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
  INST_x.dump_state(indent + 2u);
  INST_y.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkFoo::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 10u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_avx", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h184", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h242", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h293", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_cycle___d7", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_avx", 1u);
  num = INST_cycle.dump_VCD_defs(num);
  num = INST_x.dump_VCD_defs(num);
  num = INST_y.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkFoo::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFoo &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkFoo::vcd_defs(tVCDDumpType dt, MOD_mkFoo &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_avx) != DEF_WILL_FIRE_avx)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_avx, 1u);
	backing.DEF_WILL_FIRE_avx = DEF_WILL_FIRE_avx;
      }
      ++num;
      if ((backing.DEF_b__h184) != DEF_b__h184)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h184, 32u);
	backing.DEF_b__h184 = DEF_b__h184;
      }
      ++num;
      if ((backing.DEF_b__h242) != DEF_b__h242)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h242, 32u);
	backing.DEF_b__h242 = DEF_b__h242;
      }
      ++num;
      if ((backing.DEF_b__h293) != DEF_b__h293)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h293, 32u);
	backing.DEF_b__h293 = DEF_b__h293;
      }
      ++num;
      if ((backing.DEF_signed_cycle___d7) != DEF_signed_cycle___d7)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_cycle___d7, 32u);
	backing.DEF_signed_cycle___d7 = DEF_signed_cycle___d7;
      }
      ++num;
      if ((backing.PORT_EN_avx) != PORT_EN_avx)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_avx, 1u);
	backing.PORT_EN_avx = PORT_EN_avx;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_avx, 1u);
      backing.DEF_WILL_FIRE_avx = DEF_WILL_FIRE_avx;
      vcd_write_val(sim_hdl, num++, DEF_b__h184, 32u);
      backing.DEF_b__h184 = DEF_b__h184;
      vcd_write_val(sim_hdl, num++, DEF_b__h242, 32u);
      backing.DEF_b__h242 = DEF_b__h242;
      vcd_write_val(sim_hdl, num++, DEF_b__h293, 32u);
      backing.DEF_b__h293 = DEF_b__h293;
      vcd_write_val(sim_hdl, num++, DEF_signed_cycle___d7, 32u);
      backing.DEF_signed_cycle___d7 = DEF_signed_cycle___d7;
      vcd_write_val(sim_hdl, num++, PORT_EN_avx, 1u);
      backing.PORT_EN_avx = PORT_EN_avx;
    }
}

void MOD_mkFoo::vcd_prims(tVCDDumpType dt, MOD_mkFoo &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
  INST_x.dump_VCD(dt, backing.INST_x);
  INST_y.dump_VCD(dt, backing.INST_y);
}
