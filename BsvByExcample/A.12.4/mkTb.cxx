/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Fri Jan 12 16:06:21 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_3("b12 = %b", 8u);
static std::string const __str_literal_1("foo[1:0] = %b", 13u);
static std::string const __str_literal_2("foo[2] = %b", 11u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_b1(simHdl, "b1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_b2(simHdl, "b2", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_foo(simHdl, "foo", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_foo2(simHdl, "foo2", this, 8u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 8u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "b1", SYM_MODULE, &INST_b1);
  init_symbol(&symbols[1u], "b2", SYM_MODULE, &INST_b2);
  init_symbol(&symbols[2u], "foo", SYM_MODULE, &INST_foo);
  init_symbol(&symbols[3u], "foo2", SYM_MODULE, &INST_foo2);
  init_symbol(&symbols[4u], "RL_done", SYM_RULE);
  init_symbol(&symbols[5u], "RL_up1", SYM_RULE);
  init_symbol(&symbols[6u], "RL_up2", SYM_RULE);
  init_symbol(&symbols[7u], "RL_up3", SYM_RULE);
}


/* Rule actions */

void MOD_mkTb::RL_up1()
{
  tUInt8 DEF_x__h236;
  tUInt8 DEF_x__h298;
  tUInt8 DEF_foo_BIT_0___h292;
  tUInt8 DEF_foo_BIT_2___h218;
  tUInt8 DEF_foo2_BIT_0___h373;
  tUInt8 DEF_foo2___d7;
  DEF_foo2___d7 = INST_foo2.METH_read();
  DEF_foo___d1 = INST_foo.METH_read();
  DEF_foo_BITS_1_TO_0___h465 = (tUInt8)((tUInt8)3u & DEF_foo___d1);
  DEF_foo2_BIT_0___h373 = (tUInt8)((tUInt8)1u & DEF_foo2___d7);
  DEF_foo_BIT_2___h218 = (tUInt8)((tUInt8)1u & (DEF_foo___d1 >> 2u));
  DEF_foo_BIT_0___h292 = (tUInt8)((tUInt8)1u & DEF_foo___d1);
  DEF_x__h298 = (tUInt8)255u & (((((((tUInt8)3u << 6u) | (((tUInt8)((tUInt8)3u & (DEF_foo2___d7 >> 4u))) << 4u)) | ((tUInt8)1u << 3u)) | (((tUInt8)((tUInt8)1u & (DEF_foo2___d7 >> 2u))) << 2u)) | ((tUInt8)1u << 1u)) | DEF_foo2_BIT_0___h373);
  DEF_x__h236 = (tUInt8)255u & (((((tUInt8)(DEF_foo___d1 >> 2u)) << 2u) | ((tUInt8)1u << 1u)) | DEF_foo_BIT_0___h292);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,2", &__str_literal_1, DEF_foo_BITS_1_TO_0___h465);
    dollar_display(sim_hdl, this, "s,1", &__str_literal_2, DEF_foo_BIT_2___h218);
  }
  INST_foo.METH_write(DEF_x__h236);
  INST_foo2.METH_write(DEF_x__h298);
}

void MOD_mkTb::RL_up2()
{
  tUInt8 DEF_x__h427;
  DEF_foo___d1 = INST_foo.METH_read();
  DEF_foo_BITS_1_TO_0___h465 = (tUInt8)((tUInt8)3u & DEF_foo___d1);
  DEF_x__h427 = (tUInt8)255u & (((((tUInt8)(DEF_foo___d1 >> 3u)) << 3u) | ((tUInt8)1u << 2u)) | DEF_foo_BITS_1_TO_0___h465);
  INST_foo.METH_write(DEF_x__h427);
}

void MOD_mkTb::RL_up3()
{
  INST_b1.METH_write((tUInt8)1u);
  INST_b2.METH_write((tUInt8)1u);
}

void MOD_mkTb::RL_done()
{
  tUInt8 DEF_b1_7_CONCAT_b2_6___d18;
  tUInt8 DEF__read__h499;
  DEF_b2___d16 = INST_b2.METH_read();
  DEF__read__h499 = INST_b1.METH_read();
  DEF_b1_7_CONCAT_b2_6___d18 = (tUInt8)3u & ((DEF__read__h499 << 1u) | DEF_b2___d16);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,2", &__str_literal_3, DEF_b1_7_CONCAT_b2_6___d18);
    dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_foo2.reset_RST(ARG_rst_in);
  INST_foo.reset_RST(ARG_rst_in);
  INST_b2.reset_RST(ARG_rst_in);
  INST_b1.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_b1.dump_state(indent + 2u);
  INST_b2.dump_state(indent + 2u);
  INST_foo.dump_state(indent + 2u);
  INST_foo2.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 8u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b2___d16", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "foo_BITS_1_TO_0___h465", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "foo___d1", 8u);
  num = INST_b1.dump_VCD_defs(num);
  num = INST_b2.dump_VCD_defs(num);
  num = INST_foo.dump_VCD_defs(num);
  num = INST_foo2.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b2___d16) != DEF_b2___d16)
      {
	vcd_write_val(sim_hdl, num, DEF_b2___d16, 1u);
	backing.DEF_b2___d16 = DEF_b2___d16;
      }
      ++num;
      if ((backing.DEF_foo_BITS_1_TO_0___h465) != DEF_foo_BITS_1_TO_0___h465)
      {
	vcd_write_val(sim_hdl, num, DEF_foo_BITS_1_TO_0___h465, 2u);
	backing.DEF_foo_BITS_1_TO_0___h465 = DEF_foo_BITS_1_TO_0___h465;
      }
      ++num;
      if ((backing.DEF_foo___d1) != DEF_foo___d1)
      {
	vcd_write_val(sim_hdl, num, DEF_foo___d1, 8u);
	backing.DEF_foo___d1 = DEF_foo___d1;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b2___d16, 1u);
      backing.DEF_b2___d16 = DEF_b2___d16;
      vcd_write_val(sim_hdl, num++, DEF_foo_BITS_1_TO_0___h465, 2u);
      backing.DEF_foo_BITS_1_TO_0___h465 = DEF_foo_BITS_1_TO_0___h465;
      vcd_write_val(sim_hdl, num++, DEF_foo___d1, 8u);
      backing.DEF_foo___d1 = DEF_foo___d1;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_b1.dump_VCD(dt, backing.INST_b1);
  INST_b2.dump_VCD(dt, backing.INST_b2);
  INST_foo.dump_VCD(dt, backing.INST_foo);
  INST_foo2.dump_VCD(dt, backing.INST_foo2);
}
