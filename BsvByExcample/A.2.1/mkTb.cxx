/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Dec 26 15:39:35 CET 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_10("%x < %x == %x (signed)", 22u);
static std::string const __str_literal_6("%x < %x == %x (unsigned)", 24u);
static std::string const __str_literal_1("== step 0 ==", 12u);
static std::string const __str_literal_7("== step 1 ==", 12u);
static std::string const __str_literal_12("== step 3 ==", 12u);
static std::string const __str_literal_15("=== ===", 7u);
static std::string const __str_literal_16("All done", 8u);
static std::string const __str_literal_13("b1 is True", 10u);
static std::string const __str_literal_2("foo = %x", 8u);
static std::string const __str_literal_3("fooneg = %x", 11u);
static std::string const __str_literal_8("maxInt16 = %x", 13u);
static std::string const __str_literal_11("maxInt16/4 = %x", 15u);
static std::string const __str_literal_4("maxUInt16 = %x", 14u);
static std::string const __str_literal_9("minInt16 = %x", 13u);
static std::string const __str_literal_5("minUInt16 = %x", 14u);
static std::string const __str_literal_14("onebit is a 1", 13u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_int16(simHdl, "int16", this, 16u, 2048u, (tUInt8)0u),
    INST_step(simHdl, "step", this, 32u, 0u, (tUInt8)0u),
    INST_uint16(simHdl, "uint16", this, 16u, 2048u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 8u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h151", SYM_DEF, &DEF_b__h151, 32u);
  init_symbol(&symbols[1u], "int16", SYM_MODULE, &INST_int16);
  init_symbol(&symbols[2u], "RL_step0", SYM_RULE);
  init_symbol(&symbols[3u], "RL_step1", SYM_RULE);
  init_symbol(&symbols[4u], "RL_step3", SYM_RULE);
  init_symbol(&symbols[5u], "RL_step4", SYM_RULE);
  init_symbol(&symbols[6u], "step", SYM_MODULE, &INST_step);
  init_symbol(&symbols[7u], "uint16", SYM_MODULE, &INST_uint16);
}


/* Rule actions */

void MOD_mkTb::RL_step0()
{
  tUInt32 DEF_unsigned_0___d6;
  tUInt32 DEF_unsigned_5___d4;
  tUInt32 DEF_unsigned_0x1FFF___d3;
  tUInt32 DEF_unsigned_0xFFFF___d5;
  DEF_unsigned_0xFFFF___d5 = 65535u;
  DEF_unsigned_0x1FFF___d3 = 8191u;
  DEF_unsigned_5___d4 = 5u;
  DEF_unsigned_0___d6 = 0u;
  DEF_b__h151 = INST_step.METH_read();
  DEF_step_PLUS_1___d7 = DEF_b__h151 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
    dollar_display(sim_hdl, this, "s,16", &__str_literal_2, DEF_unsigned_0x1FFF___d3);
    dollar_display(sim_hdl, this, "s,16", &__str_literal_2, DEF_unsigned_5___d4);
    dollar_display(sim_hdl, this, "s,16", &__str_literal_2, DEF_unsigned_0xFFFF___d5);
    dollar_display(sim_hdl, this, "s,16", &__str_literal_2, DEF_unsigned_0___d6);
    dollar_display(sim_hdl, this, "s,1", &__str_literal_3, (tUInt8)0u);
    dollar_display(sim_hdl, this, "s,16", &__str_literal_4, DEF_unsigned_0xFFFF___d5);
    dollar_display(sim_hdl, this, "s,16", &__str_literal_5, DEF_unsigned_0___d6);
    dollar_display(sim_hdl,
		   this,
		   "s,16,16,1",
		   &__str_literal_6,
		   DEF_unsigned_0___d6,
		   DEF_unsigned_0xFFFF___d5,
		   (tUInt8)1u);
  }
  INST_step.METH_write(DEF_step_PLUS_1___d7);
}

void MOD_mkTb::RL_step1()
{
  tUInt32 DEF_IF_int16_2_BIT_15_3_THEN_NEG_int16_2_4_ELSE_in_ETC___d16;
  tUInt32 DEF_IF_int16_2_BIT_15_3_THEN_NEG_IF_int16_2_BIT_15_ETC___d18;
  tUInt8 DEF_int16_BIT_15___h805;
  tUInt32 DEF_x__h809;
  tUInt32 DEF_signed_0___d11;
  tUInt32 DEF_signed_1___d9;
  tUInt32 DEF_signed_32768___d10;
  DEF_signed_32768___d10 = 32768u;
  DEF_signed_1___d9 = 1u;
  DEF_signed_0___d11 = 0u;
  DEF_b__h151 = INST_step.METH_read();
  DEF_x__h809 = INST_int16.METH_read();
  DEF_int16_BIT_15___h805 = (tUInt8)(DEF_x__h809 >> 15u);
  DEF_IF_int16_2_BIT_15_3_THEN_NEG_int16_2_4_ELSE_in_ETC___d16 = primShiftR32(16u,
									      16u,
									      (tUInt32)(DEF_int16_BIT_15___h805 ? 65535u & -DEF_x__h809 : DEF_x__h809),
									      32u,
									      2u);
  DEF_IF_int16_2_BIT_15_3_THEN_NEG_IF_int16_2_BIT_15_ETC___d18 = DEF_int16_BIT_15___h805 ? 65535u & -DEF_IF_int16_2_BIT_15_3_THEN_NEG_int16_2_4_ELSE_in_ETC___d16 : DEF_IF_int16_2_BIT_15_3_THEN_NEG_int16_2_4_ELSE_in_ETC___d16;
  DEF_step_PLUS_1___d7 = DEF_b__h151 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_7);
    dollar_display(sim_hdl, this, "s,-16", &__str_literal_8, DEF_signed_1___d9);
    dollar_display(sim_hdl, this, "s,-16", &__str_literal_9, DEF_signed_32768___d10);
    dollar_display(sim_hdl,
		   this,
		   "s,-16,-16,1",
		   &__str_literal_10,
		   DEF_signed_32768___d10,
		   DEF_signed_1___d9,
		   (tUInt8)1u);
    dollar_display(sim_hdl, this, "s,-16", &__str_literal_11, DEF_signed_0___d11);
  }
  INST_int16.METH_write(DEF_IF_int16_2_BIT_15_3_THEN_NEG_IF_int16_2_BIT_15_ETC___d18);
  INST_step.METH_write(DEF_step_PLUS_1___d7);
}

void MOD_mkTb::RL_step3()
{
  DEF_b__h151 = INST_step.METH_read();
  DEF_step_PLUS_1___d7 = DEF_b__h151 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_12);
    dollar_display(sim_hdl, this, "s", &__str_literal_13);
    dollar_display(sim_hdl, this, "s", &__str_literal_14);
  }
  INST_step.METH_write(DEF_step_PLUS_1___d7);
}

void MOD_mkTb::RL_step4()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_15);
    dollar_display(sim_hdl, this, "s", &__str_literal_16);
    dollar_finish(sim_hdl, "32", 0u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_uint16.reset_RST(ARG_rst_in);
  INST_step.reset_RST(ARG_rst_in);
  INST_int16.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_int16.dump_state(indent + 2u);
  INST_step.dump_state(indent + 2u);
  INST_uint16.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 6u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h151", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "step_PLUS_1___d7", 32u);
  num = INST_int16.dump_VCD_defs(num);
  num = INST_step.dump_VCD_defs(num);
  num = INST_uint16.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h151) != DEF_b__h151)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h151, 32u);
	backing.DEF_b__h151 = DEF_b__h151;
      }
      ++num;
      if ((backing.DEF_step_PLUS_1___d7) != DEF_step_PLUS_1___d7)
      {
	vcd_write_val(sim_hdl, num, DEF_step_PLUS_1___d7, 32u);
	backing.DEF_step_PLUS_1___d7 = DEF_step_PLUS_1___d7;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h151, 32u);
      backing.DEF_b__h151 = DEF_b__h151;
      vcd_write_val(sim_hdl, num++, DEF_step_PLUS_1___d7, 32u);
      backing.DEF_step_PLUS_1___d7 = DEF_step_PLUS_1___d7;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_int16.dump_VCD(dt, backing.INST_int16);
  INST_step.dump_VCD(dt, backing.INST_step);
  INST_uint16.dump_VCD(dt, backing.INST_uint16);
}
