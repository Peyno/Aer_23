/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Sat Jan 13 20:48:58 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_2("=== step %d ===", 15u);
static std::string const __str_literal_1("All done", 8u);
static std::string const __str_literal_3("arr1[%d] = ", 11u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_arr1_0(simHdl, "arr1_0", this, 32u),
    INST_arr1_1(simHdl, "arr1_1", this, 32u),
    INST_arr1_2(simHdl, "arr1_2", this, 32u),
    INST_arr1_3(simHdl, "arr1_3", this, 32u),
    INST_arr1_4(simHdl, "arr1_4", this, 32u),
    INST_arr1_5(simHdl, "arr1_5", this, 32u),
    INST_arr1_6(simHdl, "arr1_6", this, 32u),
    INST_arr1_7(simHdl, "arr1_7", this, 32u),
    INST_inx(simHdl, "inx", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_step(simHdl, "step", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 21u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "arr1_0", SYM_MODULE, &INST_arr1_0);
  init_symbol(&symbols[1u], "arr1_1", SYM_MODULE, &INST_arr1_1);
  init_symbol(&symbols[2u], "arr1_2", SYM_MODULE, &INST_arr1_2);
  init_symbol(&symbols[3u], "arr1_3", SYM_MODULE, &INST_arr1_3);
  init_symbol(&symbols[4u], "arr1_4", SYM_MODULE, &INST_arr1_4);
  init_symbol(&symbols[5u], "arr1_5", SYM_MODULE, &INST_arr1_5);
  init_symbol(&symbols[6u], "arr1_6", SYM_MODULE, &INST_arr1_6);
  init_symbol(&symbols[7u], "arr1_7", SYM_MODULE, &INST_arr1_7);
  init_symbol(&symbols[8u], "b__h570", SYM_DEF, &DEF_b__h570, 32u);
  init_symbol(&symbols[9u], "inx", SYM_MODULE, &INST_inx);
  init_symbol(&symbols[10u], "RL_init", SYM_RULE);
  init_symbol(&symbols[11u], "RL_step1", SYM_RULE);
  init_symbol(&symbols[12u], "RL_step2", SYM_RULE);
  init_symbol(&symbols[13u], "RL_step3", SYM_RULE);
  init_symbol(&symbols[14u], "RL_step4", SYM_RULE);
  init_symbol(&symbols[15u], "RL_step5", SYM_RULE);
  init_symbol(&symbols[16u], "RL_step6", SYM_RULE);
  init_symbol(&symbols[17u], "RL_step7", SYM_RULE);
  init_symbol(&symbols[18u], "RL_step8", SYM_RULE);
  init_symbol(&symbols[19u], "RL_watcher", SYM_RULE);
  init_symbol(&symbols[20u], "step", SYM_MODULE, &INST_step);
}


/* Rule actions */

void MOD_mkTb::RL_init()
{
  DEF_b__h570 = INST_step.METH_read();
  DEF_step_PLUS_1___d3 = DEF_b__h570 + 1u;
  INST_arr1_0.METH_write(0u);
  INST_arr1_1.METH_write(1u);
  INST_arr1_3.METH_write(3u);
  INST_arr1_2.METH_write(2u);
  INST_arr1_4.METH_write(4u);
  INST_arr1_5.METH_write(5u);
  INST_arr1_6.METH_write(6u);
  INST_arr1_7.METH_write(7u);
  INST_step.METH_write(DEF_step_PLUS_1___d3);
}

void MOD_mkTb::RL_step1()
{
  DEF_b__h570 = INST_step.METH_read();
  DEF_step_PLUS_1___d3 = DEF_b__h570 + 1u;
  INST_arr1_0.METH_write(0u);
  INST_arr1_1.METH_write(1u);
  INST_arr1_3.METH_write(3u);
  INST_arr1_2.METH_write(2u);
  INST_arr1_4.METH_write(4u);
  INST_arr1_5.METH_write(5u);
  INST_arr1_6.METH_write(6u);
  INST_arr1_7.METH_write(7u);
  INST_step.METH_write(DEF_step_PLUS_1___d3);
}

void MOD_mkTb::RL_step2()
{
  DEF_arr1_0___d6 = INST_arr1_0.METH_read();
  DEF_b__h2457 = INST_arr1_7.METH_read();
  DEF_b__h2382 = INST_arr1_6.METH_read();
  DEF_b__h2289 = INST_arr1_5.METH_read();
  DEF_b__h2196 = INST_arr1_4.METH_read();
  DEF_b__h2103 = INST_arr1_3.METH_read();
  DEF_b__h2010 = INST_arr1_2.METH_read();
  DEF_b__h1917 = INST_arr1_1.METH_read();
  DEF_b__h570 = INST_step.METH_read();
  DEF_step_PLUS_1___d3 = DEF_b__h570 + 1u;
  INST_arr1_1.METH_write(DEF_arr1_0___d6);
  INST_arr1_3.METH_write(DEF_b__h2010);
  INST_arr1_2.METH_write(DEF_b__h1917);
  INST_arr1_4.METH_write(DEF_b__h2103);
  INST_arr1_5.METH_write(DEF_b__h2196);
  INST_arr1_6.METH_write(DEF_b__h2289);
  INST_arr1_7.METH_write(DEF_b__h2382);
  INST_arr1_0.METH_write(DEF_b__h2457);
  INST_step.METH_write(DEF_step_PLUS_1___d3);
}

void MOD_mkTb::RL_step3()
{
  DEF_arr1_0___d6 = INST_arr1_0.METH_read();
  DEF_b__h2457 = INST_arr1_7.METH_read();
  DEF_b__h2382 = INST_arr1_6.METH_read();
  DEF_b__h2289 = INST_arr1_5.METH_read();
  DEF_b__h2196 = INST_arr1_4.METH_read();
  DEF_b__h2103 = INST_arr1_3.METH_read();
  DEF_b__h2010 = INST_arr1_2.METH_read();
  DEF_b__h1917 = INST_arr1_1.METH_read();
  DEF_b__h570 = INST_step.METH_read();
  DEF_step_PLUS_1___d3 = DEF_b__h570 + 1u;
  INST_arr1_0.METH_write(DEF_b__h2103);
  INST_arr1_2.METH_write(DEF_b__h2010);
  INST_arr1_1.METH_write(DEF_b__h1917);
  INST_arr1_3.METH_write(DEF_arr1_0___d6);
  INST_arr1_4.METH_write(DEF_b__h2289);
  INST_arr1_5.METH_write(DEF_b__h2457);
  INST_arr1_6.METH_write(DEF_b__h2196);
  INST_arr1_7.METH_write(DEF_b__h2382);
  INST_step.METH_write(DEF_step_PLUS_1___d3);
}

void MOD_mkTb::RL_step4()
{
  tUInt8 DEF_inx_6_EQ_0___d17;
  tUInt8 DEF_inx_6_EQ_1___d18;
  tUInt8 DEF_inx_6_EQ_2___d19;
  tUInt8 DEF_inx_6_EQ_3___d20;
  tUInt8 DEF_inx_6_EQ_4___d21;
  tUInt8 DEF_inx_6_EQ_5___d22;
  tUInt8 DEF_inx_6_EQ_6___d23;
  tUInt8 DEF_inx_6_EQ_7___d24;
  tUInt8 DEF_x__h3309;
  DEF_b__h570 = INST_step.METH_read();
  DEF_x__h3309 = INST_inx.METH_read();
  DEF_inx_6_EQ_7___d24 = DEF_x__h3309 == (tUInt8)7u;
  DEF_inx_6_EQ_6___d23 = DEF_x__h3309 == (tUInt8)6u;
  DEF_inx_6_EQ_5___d22 = DEF_x__h3309 == (tUInt8)5u;
  DEF_inx_6_EQ_4___d21 = DEF_x__h3309 == (tUInt8)4u;
  DEF_inx_6_EQ_3___d20 = DEF_x__h3309 == (tUInt8)3u;
  DEF_inx_6_EQ_2___d19 = DEF_x__h3309 == (tUInt8)2u;
  DEF_inx_6_EQ_1___d18 = DEF_x__h3309 == (tUInt8)1u;
  DEF_inx_6_EQ_0___d17 = DEF_x__h3309 == (tUInt8)0u;
  DEF_step_PLUS_1___d3 = DEF_b__h570 + 1u;
  if (DEF_inx_6_EQ_0___d17)
    INST_arr1_0.METH_write(0u);
  if (DEF_inx_6_EQ_1___d18)
    INST_arr1_1.METH_write(0u);
  if (DEF_inx_6_EQ_2___d19)
    INST_arr1_2.METH_write(0u);
  if (DEF_inx_6_EQ_3___d20)
    INST_arr1_3.METH_write(0u);
  if (DEF_inx_6_EQ_4___d21)
    INST_arr1_4.METH_write(0u);
  if (DEF_inx_6_EQ_5___d22)
    INST_arr1_5.METH_write(0u);
  if (DEF_inx_6_EQ_6___d23)
    INST_arr1_6.METH_write(0u);
  if (DEF_inx_6_EQ_7___d24)
    INST_arr1_7.METH_write(0u);
  INST_step.METH_write(DEF_step_PLUS_1___d3);
}

void MOD_mkTb::RL_step5()
{
  DEF_b__h570 = INST_step.METH_read();
  DEF_step_PLUS_1___d3 = DEF_b__h570 + 1u;
  INST_step.METH_write(DEF_step_PLUS_1___d3);
}

void MOD_mkTb::RL_step6()
{
  tUInt32 DEF_arr1_1_PLUS_3___d27;
  tUInt32 DEF_arr1_2_PLUS_6___d28;
  tUInt32 DEF_arr1_3_PLUS_9___d29;
  tUInt32 DEF_arr1_4_0_PLUS_12___d30;
  tUInt32 DEF_arr1_5_1_PLUS_15___d31;
  tUInt32 DEF_arr1_6_2_PLUS_18___d32;
  tUInt32 DEF_arr1_7_3_PLUS_21___d33;
  DEF_b__h2457 = INST_arr1_7.METH_read();
  DEF_b__h2382 = INST_arr1_6.METH_read();
  DEF_b__h2289 = INST_arr1_5.METH_read();
  DEF_b__h2196 = INST_arr1_4.METH_read();
  DEF_b__h2010 = INST_arr1_2.METH_read();
  DEF_b__h2103 = INST_arr1_3.METH_read();
  DEF_b__h1917 = INST_arr1_1.METH_read();
  DEF_b__h570 = INST_step.METH_read();
  DEF_arr1_7_3_PLUS_21___d33 = DEF_b__h2457 + 21u;
  DEF_arr1_6_2_PLUS_18___d32 = DEF_b__h2382 + 18u;
  DEF_arr1_5_1_PLUS_15___d31 = DEF_b__h2289 + 15u;
  DEF_arr1_4_0_PLUS_12___d30 = DEF_b__h2196 + 12u;
  DEF_arr1_3_PLUS_9___d29 = DEF_b__h2103 + 9u;
  DEF_arr1_1_PLUS_3___d27 = DEF_b__h1917 + 3u;
  DEF_arr1_2_PLUS_6___d28 = DEF_b__h2010 + 6u;
  DEF_step_PLUS_1___d3 = DEF_b__h570 + 1u;
  INST_arr1_0.METH_write(DEF_arr1_1_PLUS_3___d27);
  INST_arr1_1.METH_write(DEF_arr1_2_PLUS_6___d28);
  INST_arr1_2.METH_write(DEF_arr1_3_PLUS_9___d29);
  INST_arr1_3.METH_write(DEF_arr1_4_0_PLUS_12___d30);
  INST_arr1_4.METH_write(DEF_arr1_5_1_PLUS_15___d31);
  INST_arr1_5.METH_write(DEF_arr1_6_2_PLUS_18___d32);
  INST_arr1_6.METH_write(DEF_arr1_7_3_PLUS_21___d33);
  INST_step.METH_write(DEF_step_PLUS_1___d3);
}

void MOD_mkTb::RL_step7()
{
  tUInt32 DEF_arr1_1_PLUS_arr1_0___d35;
  tUInt32 DEF_arr1_2_PLUS_arr1_1_PLUS_arr1_0_5___d36;
  tUInt32 DEF_arr1_3_PLUS_arr1_2_PLUS_arr1_1_PLUS_arr1_0_5_6___d37;
  tUInt32 DEF_arr1_4_0_PLUS_arr1_3_PLUS_arr1_2_PLUS_arr1_1_P_ETC___d38;
  tUInt32 DEF_arr1_5_1_PLUS_arr1_4_0_PLUS_arr1_3_PLUS_arr1_2_ETC___d39;
  tUInt32 DEF_arr1_6_2_PLUS_arr1_5_1_PLUS_arr1_4_0_PLUS_arr1_ETC___d40;
  tUInt32 DEF_arr1_7_3_PLUS_arr1_6_2_PLUS_arr1_5_1_PLUS_arr1_ETC___d41;
  DEF_arr1_0___d6 = INST_arr1_0.METH_read();
  DEF_b__h2457 = INST_arr1_7.METH_read();
  DEF_b__h2382 = INST_arr1_6.METH_read();
  DEF_b__h2289 = INST_arr1_5.METH_read();
  DEF_b__h2196 = INST_arr1_4.METH_read();
  DEF_b__h2010 = INST_arr1_2.METH_read();
  DEF_b__h2103 = INST_arr1_3.METH_read();
  DEF_b__h1917 = INST_arr1_1.METH_read();
  DEF_b__h570 = INST_step.METH_read();
  DEF_arr1_1_PLUS_arr1_0___d35 = DEF_b__h1917 + DEF_arr1_0___d6;
  DEF_arr1_2_PLUS_arr1_1_PLUS_arr1_0_5___d36 = DEF_b__h2010 + DEF_arr1_1_PLUS_arr1_0___d35;
  DEF_arr1_3_PLUS_arr1_2_PLUS_arr1_1_PLUS_arr1_0_5_6___d37 = DEF_b__h2103 + DEF_arr1_2_PLUS_arr1_1_PLUS_arr1_0_5___d36;
  DEF_arr1_4_0_PLUS_arr1_3_PLUS_arr1_2_PLUS_arr1_1_P_ETC___d38 = DEF_b__h2196 + DEF_arr1_3_PLUS_arr1_2_PLUS_arr1_1_PLUS_arr1_0_5_6___d37;
  DEF_arr1_5_1_PLUS_arr1_4_0_PLUS_arr1_3_PLUS_arr1_2_ETC___d39 = DEF_b__h2289 + DEF_arr1_4_0_PLUS_arr1_3_PLUS_arr1_2_PLUS_arr1_1_P_ETC___d38;
  DEF_arr1_6_2_PLUS_arr1_5_1_PLUS_arr1_4_0_PLUS_arr1_ETC___d40 = DEF_b__h2382 + DEF_arr1_5_1_PLUS_arr1_4_0_PLUS_arr1_3_PLUS_arr1_2_ETC___d39;
  DEF_arr1_7_3_PLUS_arr1_6_2_PLUS_arr1_5_1_PLUS_arr1_ETC___d41 = DEF_b__h2457 + DEF_arr1_6_2_PLUS_arr1_5_1_PLUS_arr1_4_0_PLUS_arr1_ETC___d40;
  DEF_step_PLUS_1___d3 = DEF_b__h570 + 1u;
  INST_arr1_0.METH_write(DEF_arr1_0___d6);
  INST_arr1_2.METH_write(DEF_arr1_2_PLUS_arr1_1_PLUS_arr1_0_5___d36);
  INST_arr1_1.METH_write(DEF_arr1_1_PLUS_arr1_0___d35);
  INST_arr1_3.METH_write(DEF_arr1_3_PLUS_arr1_2_PLUS_arr1_1_PLUS_arr1_0_5_6___d37);
  INST_arr1_4.METH_write(DEF_arr1_4_0_PLUS_arr1_3_PLUS_arr1_2_PLUS_arr1_1_P_ETC___d38);
  INST_arr1_5.METH_write(DEF_arr1_5_1_PLUS_arr1_4_0_PLUS_arr1_3_PLUS_arr1_2_ETC___d39);
  INST_arr1_6.METH_write(DEF_arr1_6_2_PLUS_arr1_5_1_PLUS_arr1_4_0_PLUS_arr1_ETC___d40);
  INST_arr1_7.METH_write(DEF_arr1_7_3_PLUS_arr1_6_2_PLUS_arr1_5_1_PLUS_arr1_ETC___d41);
  INST_step.METH_write(DEF_step_PLUS_1___d3);
}

void MOD_mkTb::RL_step8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
    dollar_finish(sim_hdl, "32", 0u);
  }
}

void MOD_mkTb::RL_watcher()
{
  tUInt32 DEF_signed_step___d45;
  tUInt32 DEF_signed_arr1_1___d49;
  tUInt32 DEF_signed_arr1_2___d51;
  tUInt32 DEF_signed_arr1_3___d53;
  tUInt32 DEF_signed_arr1_4_0___d55;
  tUInt32 DEF_signed_arr1_5_1___d57;
  tUInt32 DEF_signed_arr1_6_2___d59;
  tUInt32 DEF_signed_arr1_7_3___d61;
  tUInt32 DEF_signed_arr1_0___d47;
  tUInt32 DEF_signed_0___d46;
  tUInt32 DEF_signed_1___d48;
  tUInt32 DEF_signed_2___d50;
  tUInt32 DEF_signed_3___d52;
  tUInt32 DEF_signed_4___d54;
  tUInt32 DEF_signed_5___d56;
  tUInt32 DEF_signed_6___d58;
  tUInt32 DEF_signed_7___d60;
  DEF_signed_7___d60 = 7u;
  DEF_signed_6___d58 = 6u;
  DEF_signed_5___d56 = 5u;
  DEF_signed_4___d54 = 4u;
  DEF_signed_3___d52 = 3u;
  DEF_signed_2___d50 = 2u;
  DEF_signed_1___d48 = 1u;
  DEF_signed_0___d46 = 0u;
  DEF_arr1_0___d6 = INST_arr1_0.METH_read();
  DEF_signed_arr1_0___d47 = DEF_arr1_0___d6;
  DEF_b__h2457 = INST_arr1_7.METH_read();
  DEF_signed_arr1_7_3___d61 = DEF_b__h2457;
  DEF_b__h2382 = INST_arr1_6.METH_read();
  DEF_signed_arr1_6_2___d59 = DEF_b__h2382;
  DEF_b__h2289 = INST_arr1_5.METH_read();
  DEF_signed_arr1_5_1___d57 = DEF_b__h2289;
  DEF_b__h2196 = INST_arr1_4.METH_read();
  DEF_signed_arr1_4_0___d55 = DEF_b__h2196;
  DEF_b__h2103 = INST_arr1_3.METH_read();
  DEF_signed_arr1_3___d53 = DEF_b__h2103;
  DEF_b__h2010 = INST_arr1_2.METH_read();
  DEF_signed_arr1_2___d51 = DEF_b__h2010;
  DEF_b__h1917 = INST_arr1_1.METH_read();
  DEF_signed_arr1_1___d49 = DEF_b__h1917;
  DEF_b__h570 = INST_step.METH_read();
  DEF_signed_step___d45 = DEF_b__h570;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_2, DEF_signed_step___d45);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_3,
		   DEF_signed_0___d46,
		   DEF_signed_arr1_0___d47);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_3,
		   DEF_signed_1___d48,
		   DEF_signed_arr1_1___d49);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_3,
		   DEF_signed_2___d50,
		   DEF_signed_arr1_2___d51);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_3,
		   DEF_signed_3___d52,
		   DEF_signed_arr1_3___d53);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_3,
		   DEF_signed_4___d54,
		   DEF_signed_arr1_4_0___d55);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_3,
		   DEF_signed_5___d56,
		   DEF_signed_arr1_5_1___d57);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_3,
		   DEF_signed_6___d58,
		   DEF_signed_arr1_6_2___d59);
    dollar_display(sim_hdl,
		   this,
		   "s,-32,-32",
		   &__str_literal_3,
		   DEF_signed_7___d60,
		   DEF_signed_arr1_7_3___d61);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_step.reset_RST(ARG_rst_in);
  INST_inx.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_arr1_0.dump_state(indent + 2u);
  INST_arr1_1.dump_state(indent + 2u);
  INST_arr1_2.dump_state(indent + 2u);
  INST_arr1_3.dump_state(indent + 2u);
  INST_arr1_4.dump_state(indent + 2u);
  INST_arr1_5.dump_state(indent + 2u);
  INST_arr1_6.dump_state(indent + 2u);
  INST_arr1_7.dump_state(indent + 2u);
  INST_inx.dump_state(indent + 2u);
  INST_step.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 21u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "arr1_0___d6", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h1917", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2010", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2103", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2196", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2289", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2382", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2457", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h570", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "step_PLUS_1___d3", 32u);
  num = INST_arr1_0.dump_VCD_defs(num);
  num = INST_arr1_1.dump_VCD_defs(num);
  num = INST_arr1_2.dump_VCD_defs(num);
  num = INST_arr1_3.dump_VCD_defs(num);
  num = INST_arr1_4.dump_VCD_defs(num);
  num = INST_arr1_5.dump_VCD_defs(num);
  num = INST_arr1_6.dump_VCD_defs(num);
  num = INST_arr1_7.dump_VCD_defs(num);
  num = INST_inx.dump_VCD_defs(num);
  num = INST_step.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_arr1_0___d6) != DEF_arr1_0___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_arr1_0___d6, 32u);
	backing.DEF_arr1_0___d6 = DEF_arr1_0___d6;
      }
      ++num;
      if ((backing.DEF_b__h1917) != DEF_b__h1917)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h1917, 32u);
	backing.DEF_b__h1917 = DEF_b__h1917;
      }
      ++num;
      if ((backing.DEF_b__h2010) != DEF_b__h2010)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2010, 32u);
	backing.DEF_b__h2010 = DEF_b__h2010;
      }
      ++num;
      if ((backing.DEF_b__h2103) != DEF_b__h2103)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2103, 32u);
	backing.DEF_b__h2103 = DEF_b__h2103;
      }
      ++num;
      if ((backing.DEF_b__h2196) != DEF_b__h2196)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2196, 32u);
	backing.DEF_b__h2196 = DEF_b__h2196;
      }
      ++num;
      if ((backing.DEF_b__h2289) != DEF_b__h2289)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2289, 32u);
	backing.DEF_b__h2289 = DEF_b__h2289;
      }
      ++num;
      if ((backing.DEF_b__h2382) != DEF_b__h2382)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2382, 32u);
	backing.DEF_b__h2382 = DEF_b__h2382;
      }
      ++num;
      if ((backing.DEF_b__h2457) != DEF_b__h2457)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2457, 32u);
	backing.DEF_b__h2457 = DEF_b__h2457;
      }
      ++num;
      if ((backing.DEF_b__h570) != DEF_b__h570)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h570, 32u);
	backing.DEF_b__h570 = DEF_b__h570;
      }
      ++num;
      if ((backing.DEF_step_PLUS_1___d3) != DEF_step_PLUS_1___d3)
      {
	vcd_write_val(sim_hdl, num, DEF_step_PLUS_1___d3, 32u);
	backing.DEF_step_PLUS_1___d3 = DEF_step_PLUS_1___d3;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_arr1_0___d6, 32u);
      backing.DEF_arr1_0___d6 = DEF_arr1_0___d6;
      vcd_write_val(sim_hdl, num++, DEF_b__h1917, 32u);
      backing.DEF_b__h1917 = DEF_b__h1917;
      vcd_write_val(sim_hdl, num++, DEF_b__h2010, 32u);
      backing.DEF_b__h2010 = DEF_b__h2010;
      vcd_write_val(sim_hdl, num++, DEF_b__h2103, 32u);
      backing.DEF_b__h2103 = DEF_b__h2103;
      vcd_write_val(sim_hdl, num++, DEF_b__h2196, 32u);
      backing.DEF_b__h2196 = DEF_b__h2196;
      vcd_write_val(sim_hdl, num++, DEF_b__h2289, 32u);
      backing.DEF_b__h2289 = DEF_b__h2289;
      vcd_write_val(sim_hdl, num++, DEF_b__h2382, 32u);
      backing.DEF_b__h2382 = DEF_b__h2382;
      vcd_write_val(sim_hdl, num++, DEF_b__h2457, 32u);
      backing.DEF_b__h2457 = DEF_b__h2457;
      vcd_write_val(sim_hdl, num++, DEF_b__h570, 32u);
      backing.DEF_b__h570 = DEF_b__h570;
      vcd_write_val(sim_hdl, num++, DEF_step_PLUS_1___d3, 32u);
      backing.DEF_step_PLUS_1___d3 = DEF_step_PLUS_1___d3;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_arr1_0.dump_VCD(dt, backing.INST_arr1_0);
  INST_arr1_1.dump_VCD(dt, backing.INST_arr1_1);
  INST_arr1_2.dump_VCD(dt, backing.INST_arr1_2);
  INST_arr1_3.dump_VCD(dt, backing.INST_arr1_3);
  INST_arr1_4.dump_VCD(dt, backing.INST_arr1_4);
  INST_arr1_5.dump_VCD(dt, backing.INST_arr1_5);
  INST_arr1_6.dump_VCD(dt, backing.INST_arr1_6);
  INST_arr1_7.dump_VCD(dt, backing.INST_arr1_7);
  INST_inx.dump_VCD(dt, backing.INST_inx);
  INST_step.dump_VCD(dt, backing.INST_step);
}
