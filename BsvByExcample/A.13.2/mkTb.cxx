/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Sat Jan 13 21:25:43 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_2("Counter = %03d, State: IDLE", 27u);
static std::string const __str_literal_3("Counter = %03d, State: STEP1", 28u);
static std::string const __str_literal_4("Counter = %03d, State: STEP2", 28u);
static std::string const __str_literal_1("Done", 4u);
static std::string const __str_literal_7("Error: \"Tb.bsv\", line 27, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_stateIdle] and\n  [RL_stateStep1] ) fired in the same clock cycle.\n",
					 160u);
static std::string const __str_literal_6("Error: \"Tb.bsv\", line 27, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_stateIdle] and\n  [RL_stateStep2] ) fired in the same clock cycle.\n",
					 160u);
static std::string const __str_literal_5("Error: \"Tb.bsv\", line 27, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_stateIdle] and [RL_stateStop]\n  ) fired in the same clock cycle.\n",
					 159u);
static std::string const __str_literal_9("Error: \"Tb.bsv\", line 27, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_stateStep1] and\n  [RL_stateStep2] ) fired in the same clock cycle.\n",
					 161u);
static std::string const __str_literal_8("Error: \"Tb.bsv\", line 27, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_stateStep1] and\n  [RL_stateStop] ) fired in the same clock cycle.\n",
					 160u);
static std::string const __str_literal_10("Error: \"Tb.bsv\", line 27, column 53: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_stateStep2] and\n  [RL_stateStop] ) fired in the same clock cycle.\n",
					  160u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_counter(simHdl, "counter", this, 32u, 0u, (tUInt8)0u),
    INST_restart(simHdl, "restart", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state(simHdl, "state", this, 4u, (tUInt8)1u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 15u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_1", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_2", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_3", SYM_RULE);
  init_symbol(&symbols[3u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[4u], "RL_runCounter", SYM_RULE);
  init_symbol(&symbols[5u], "RL_stateIdle", SYM_RULE);
  init_symbol(&symbols[6u], "RL_stateStep1", SYM_RULE);
  init_symbol(&symbols[7u], "RL_stateStep2", SYM_RULE);
  init_symbol(&symbols[8u], "RL_stateStop", SYM_RULE);
  init_symbol(&symbols[9u], "restart", SYM_MODULE, &INST_restart);
  init_symbol(&symbols[10u], "state", SYM_MODULE, &INST_state);
  init_symbol(&symbols[11u], "WILL_FIRE_RL_stateIdle", SYM_DEF, &DEF_WILL_FIRE_RL_stateIdle, 1u);
  init_symbol(&symbols[12u], "WILL_FIRE_RL_stateStep1", SYM_DEF, &DEF_WILL_FIRE_RL_stateStep1, 1u);
  init_symbol(&symbols[13u], "WILL_FIRE_RL_stateStep2", SYM_DEF, &DEF_WILL_FIRE_RL_stateStep2, 1u);
  init_symbol(&symbols[14u], "WILL_FIRE_RL_stateStop", SYM_DEF, &DEF_WILL_FIRE_RL_stateStop, 1u);
}


/* Rule actions */

void MOD_mkTb::RL_runCounter()
{
  tUInt32 DEF_counter_PLUS_1___d3;
  tUInt8 DEF_counter_EQ_200___d2;
  DEF_x__h547 = INST_counter.METH_read();
  DEF_counter_EQ_200___d2 = DEF_x__h547 == 200u;
  DEF_counter_PLUS_1___d3 = DEF_x__h547 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_counter_EQ_200___d2)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_counter_EQ_200___d2)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_counter.METH_write(DEF_counter_PLUS_1___d3);
}

void MOD_mkTb::RL_stateIdle()
{
  DEF_x__h547 = INST_counter.METH_read();
  DEF_signed_counter___d6 = DEF_x__h547;
  DEF_counter_BIT_31___h543 = (tUInt8)(DEF_x__h547 >> 31u);
  DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11 = (tUInt32)((tUInt8)((tUInt8)3u & (DEF_counter_BIT_31___h543 ? -DEF_x__h547 : DEF_x__h547)));
  DEF_IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14 = (DEF_counter_BIT_31___h543 ? -DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11 : DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11) == 0u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_2, DEF_signed_counter___d6);
  if (DEF_IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14)
    INST_state.METH_write((tUInt8)2u);
}

void MOD_mkTb::RL_stateStep1()
{
  tUInt8 DEF_IF_restart_6_THEN_1_ELSE_4___d18;
  tUInt8 DEF_restart__h500;
  tUInt8 DEF_restart_6_OR_IF_counter_BIT_31_THEN_NEG_0_CONC_ETC___d17;
  DEF_x__h547 = INST_counter.METH_read();
  DEF_signed_counter___d6 = DEF_x__h547;
  DEF_restart__h500 = INST_restart.METH_read();
  DEF_counter_BIT_31___h543 = (tUInt8)(DEF_x__h547 >> 31u);
  DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11 = (tUInt32)((tUInt8)((tUInt8)3u & (DEF_counter_BIT_31___h543 ? -DEF_x__h547 : DEF_x__h547)));
  DEF_IF_restart_6_THEN_1_ELSE_4___d18 = DEF_restart__h500 ? (tUInt8)1u : (tUInt8)4u;
  DEF_IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14 = (DEF_counter_BIT_31___h543 ? -DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11 : DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11) == 0u;
  DEF_restart_6_OR_IF_counter_BIT_31_THEN_NEG_0_CONC_ETC___d17 = DEF_restart__h500 || DEF_IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_3, DEF_signed_counter___d6);
  if (DEF_restart_6_OR_IF_counter_BIT_31_THEN_NEG_0_CONC_ETC___d17)
    INST_state.METH_write(DEF_IF_restart_6_THEN_1_ELSE_4___d18);
}

void MOD_mkTb::RL_stateStep2()
{
  DEF_x__h547 = INST_counter.METH_read();
  DEF_signed_counter___d6 = DEF_x__h547;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_4, DEF_signed_counter___d6);
  INST_state.METH_write((tUInt8)8u);
}

void MOD_mkTb::RL_stateStop()
{
  DEF_x__h547 = INST_counter.METH_read();
  DEF_signed_counter___d6 = DEF_x__h547;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_4, DEF_signed_counter___d6);
  INST_state.METH_write((tUInt8)8u);
}

void MOD_mkTb::__me_check_1()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_stateIdle && DEF_WILL_FIRE_RL_stateStop)
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
    if (DEF_WILL_FIRE_RL_stateIdle && DEF_WILL_FIRE_RL_stateStep2)
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
    if (DEF_WILL_FIRE_RL_stateIdle && DEF_WILL_FIRE_RL_stateStep1)
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
  }
}

void MOD_mkTb::__me_check_2()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_stateStep1 && DEF_WILL_FIRE_RL_stateStop)
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
    if (DEF_WILL_FIRE_RL_stateStep1 && DEF_WILL_FIRE_RL_stateStep2)
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
  }
}

void MOD_mkTb::__me_check_3()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_stateStep2 && DEF_WILL_FIRE_RL_stateStop)
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state.reset_RST(ARG_rst_in);
  INST_restart.reset_RST(ARG_rst_in);
  INST_counter.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_counter.dump_state(indent + 2u);
  INST_restart.dump_state(indent + 2u);
  INST_state.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 13u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_stateIdle", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_stateStep1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_stateStep2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_stateStop", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "counter_BIT_31___h543", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_counter___d6", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h547", 32u);
  num = INST_counter.dump_VCD_defs(num);
  num = INST_restart.dump_VCD_defs(num);
  num = INST_state.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14) != DEF_IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14, 1u);
	backing.DEF_IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14 = DEF_IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_stateIdle) != DEF_WILL_FIRE_RL_stateIdle)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_stateIdle, 1u);
	backing.DEF_WILL_FIRE_RL_stateIdle = DEF_WILL_FIRE_RL_stateIdle;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_stateStep1) != DEF_WILL_FIRE_RL_stateStep1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_stateStep1, 1u);
	backing.DEF_WILL_FIRE_RL_stateStep1 = DEF_WILL_FIRE_RL_stateStep1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_stateStep2) != DEF_WILL_FIRE_RL_stateStep2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_stateStep2, 1u);
	backing.DEF_WILL_FIRE_RL_stateStep2 = DEF_WILL_FIRE_RL_stateStep2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_stateStop) != DEF_WILL_FIRE_RL_stateStop)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_stateStop, 1u);
	backing.DEF_WILL_FIRE_RL_stateStop = DEF_WILL_FIRE_RL_stateStop;
      }
      ++num;
      if ((backing.DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11) != DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11)
      {
	vcd_write_val(sim_hdl, num, DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11, 32u);
	backing.DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11 = DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11;
      }
      ++num;
      if ((backing.DEF_counter_BIT_31___h543) != DEF_counter_BIT_31___h543)
      {
	vcd_write_val(sim_hdl, num, DEF_counter_BIT_31___h543, 1u);
	backing.DEF_counter_BIT_31___h543 = DEF_counter_BIT_31___h543;
      }
      ++num;
      if ((backing.DEF_signed_counter___d6) != DEF_signed_counter___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_counter___d6, 32u);
	backing.DEF_signed_counter___d6 = DEF_signed_counter___d6;
      }
      ++num;
      if ((backing.DEF_x__h547) != DEF_x__h547)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h547, 32u);
	backing.DEF_x__h547 = DEF_x__h547;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14, 1u);
      backing.DEF_IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14 = DEF_IF_counter_BIT_31_THEN_NEG_0_CONCAT_IF_counter_ETC___d14;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_stateIdle, 1u);
      backing.DEF_WILL_FIRE_RL_stateIdle = DEF_WILL_FIRE_RL_stateIdle;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_stateStep1, 1u);
      backing.DEF_WILL_FIRE_RL_stateStep1 = DEF_WILL_FIRE_RL_stateStep1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_stateStep2, 1u);
      backing.DEF_WILL_FIRE_RL_stateStep2 = DEF_WILL_FIRE_RL_stateStep2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_stateStop, 1u);
      backing.DEF_WILL_FIRE_RL_stateStop = DEF_WILL_FIRE_RL_stateStop;
      vcd_write_val(sim_hdl, num++, DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11, 32u);
      backing.DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11 = DEF__0_CONCAT_IF_counter_BIT_31_THEN_NEG_counter_EL_ETC___d11;
      vcd_write_val(sim_hdl, num++, DEF_counter_BIT_31___h543, 1u);
      backing.DEF_counter_BIT_31___h543 = DEF_counter_BIT_31___h543;
      vcd_write_val(sim_hdl, num++, DEF_signed_counter___d6, 32u);
      backing.DEF_signed_counter___d6 = DEF_signed_counter___d6;
      vcd_write_val(sim_hdl, num++, DEF_x__h547, 32u);
      backing.DEF_x__h547 = DEF_x__h547;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_counter.dump_VCD(dt, backing.INST_counter);
  INST_restart.dump_VCD(dt, backing.INST_restart);
  INST_state.dump_VCD(dt, backing.INST_state);
}
