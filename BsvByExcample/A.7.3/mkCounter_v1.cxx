/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Wed Jan 10 11:46:16 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkCounter_v1.h"


/* Constructor */
MOD_mkCounter_v1::MOD_mkCounter_v1(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_value1(simHdl, "value1", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 1u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkCounter_v1::init_symbols_0()
{
  init_symbol(&symbols[0u], "value1", SYM_MODULE, &INST_value1);
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkCounter_v1::METH_read()
{
  tUInt32 PORT_read;
  DEF_b__h61 = INST_value1.METH_read();
  PORT_read = DEF_b__h61;
  return PORT_read;
}

tUInt8 MOD_mkCounter_v1::METH_RDY_read()
{
  tUInt8 DEF_CAN_FIRE_read;
  tUInt8 PORT_RDY_read;
  DEF_CAN_FIRE_read = (tUInt8)1u;
  PORT_RDY_read = DEF_CAN_FIRE_read;
  return PORT_RDY_read;
}

void MOD_mkCounter_v1::METH_increment(tUInt32 ARG_increment_di)
{
  tUInt32 DEF_value1_PLUS_increment_di___d2;
  DEF_b__h61 = INST_value1.METH_read();
  DEF_value1_PLUS_increment_di___d2 = DEF_b__h61 + ARG_increment_di;
  INST_value1.METH_write(DEF_value1_PLUS_increment_di___d2);
}

tUInt8 MOD_mkCounter_v1::METH_RDY_increment()
{
  tUInt8 DEF_CAN_FIRE_increment;
  tUInt8 PORT_RDY_increment;
  DEF_CAN_FIRE_increment = (tUInt8)1u;
  PORT_RDY_increment = DEF_CAN_FIRE_increment;
  return PORT_RDY_increment;
}

void MOD_mkCounter_v1::METH_decrement(tUInt32 ARG_decrement_dd)
{
  tUInt32 DEF_value1_MINUS_decrement_dd___d3;
  DEF_b__h61 = INST_value1.METH_read();
  DEF_value1_MINUS_decrement_dd___d3 = DEF_b__h61 - ARG_decrement_dd;
  INST_value1.METH_write(DEF_value1_MINUS_decrement_dd___d3);
}

tUInt8 MOD_mkCounter_v1::METH_RDY_decrement()
{
  tUInt8 DEF_CAN_FIRE_decrement;
  tUInt8 PORT_RDY_decrement;
  DEF_CAN_FIRE_decrement = (tUInt8)1u;
  PORT_RDY_decrement = DEF_CAN_FIRE_decrement;
  return PORT_RDY_decrement;
}


/* Reset routines */

void MOD_mkCounter_v1::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_value1.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkCounter_v1::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkCounter_v1::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_value1.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkCounter_v1::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 3u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h61", 32u);
  num = INST_value1.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkCounter_v1::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCounter_v1 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkCounter_v1::vcd_defs(tVCDDumpType dt, MOD_mkCounter_v1 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h61) != DEF_b__h61)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h61, 32u);
	backing.DEF_b__h61 = DEF_b__h61;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h61, 32u);
      backing.DEF_b__h61 = DEF_b__h61;
    }
}

void MOD_mkCounter_v1::vcd_prims(tVCDDumpType dt, MOD_mkCounter_v1 &backing)
{
  INST_value1.dump_VCD(dt, backing.INST_value1);
}
