/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Wed Jan 10 11:46:16 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTb.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTb::MODEL_mkTb()
{
  mkTb_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTb()
{
  MODEL_mkTb *model = new MODEL_mkTb();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTb &INST_top = *((MOD_mkTb *)(instance_ptr));
	 tUInt8 DEF_INST_top_INST_c2_DEF_w_incr_whas____d1;
	 tUInt8 DEF_INST_top_INST_c2_DEF_w_decr_whas____d2;
	 tUInt8 DEF_INST_top_INST_c2_DEF_CAN_FIRE_RL_r_incr_and_decr;
	 tUInt8 DEF_INST_top_INST_c2_DEF_CAN_FIRE_RL_r_incr_only;
	 tUInt8 DEF_INST_top_INST_c2_DEF_WILL_FIRE_RL_r_incr_and_decr;
	 tUInt8 DEF_INST_top_INST_c2_DEF_WILL_FIRE_RL_r_incr_only;
	 tUInt8 DEF_INST_top_INST_c2_DEF_CAN_FIRE_RL_r_decr_only;
	 tUInt8 DEF_INST_top_INST_c2_DEF_WILL_FIRE_RL_r_decr_only;
	 tUInt8 DEF_INST_top_DEF_state_SLT_7___d10;
	 tUInt8 DEF_INST_top_DEF_NOT_state_SLE_3_1___d12;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_step_state;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_step_state;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_show;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_show;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_incr1;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_incr1;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_decr1;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_decr1;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_incr2;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_incr2;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_decr2;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_decr2;
	 INST_top.INST_c2.METH_RDY_decrement();
	 INST_top.DEF_b__h182 = INST_top.INST_state.METH_read();
	 DEF_INST_top_DEF_NOT_state_SLE_3_1___d12 = !primSLE8(1u,
							      32u,
							      (tUInt32)(INST_top.DEF_b__h182),
							      32u,
							      3u);
	 DEF_INST_top_DEF_CAN_FIRE_RL_decr2 = DEF_INST_top_DEF_NOT_state_SLE_3_1___d12;
	 DEF_INST_top_DEF_WILL_FIRE_RL_decr2 = DEF_INST_top_DEF_CAN_FIRE_RL_decr2;
	 INST_top.INST_c1.METH_RDY_increment();
	 DEF_INST_top_DEF_state_SLT_7___d10 = primSLT8(1u, 32u, (tUInt32)(INST_top.DEF_b__h182), 32u, 7u);
	 DEF_INST_top_DEF_CAN_FIRE_RL_incr1 = DEF_INST_top_DEF_state_SLT_7___d10;
	 DEF_INST_top_DEF_WILL_FIRE_RL_incr1 = DEF_INST_top_DEF_CAN_FIRE_RL_incr1;
	 INST_top.INST_c1.METH_RDY_decrement();
	 DEF_INST_top_DEF_CAN_FIRE_RL_decr1 = DEF_INST_top_DEF_NOT_state_SLE_3_1___d12;
	 DEF_INST_top_DEF_WILL_FIRE_RL_decr1 = DEF_INST_top_DEF_CAN_FIRE_RL_decr1 && !DEF_INST_top_DEF_WILL_FIRE_RL_incr1;
	 INST_top.INST_c2.METH_RDY_increment();
	 DEF_INST_top_DEF_CAN_FIRE_RL_incr2 = DEF_INST_top_DEF_state_SLT_7___d10;
	 DEF_INST_top_DEF_WILL_FIRE_RL_incr2 = DEF_INST_top_DEF_CAN_FIRE_RL_incr2;
	 DEF_INST_top_DEF_CAN_FIRE_RL_show = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_show = DEF_INST_top_DEF_CAN_FIRE_RL_show;
	 DEF_INST_top_DEF_CAN_FIRE_RL_step_state = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_step_state = DEF_INST_top_DEF_CAN_FIRE_RL_step_state;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_decr2)
	   INST_top.RL_decr2();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_incr2)
	   INST_top.RL_incr2();
	 DEF_INST_top_INST_c2_DEF_w_decr_whas____d2 = INST_top.INST_c2.INST_w_decr.METH_whas();
	 DEF_INST_top_INST_c2_DEF_w_incr_whas____d1 = INST_top.INST_c2.INST_w_incr.METH_whas();
	 DEF_INST_top_INST_c2_DEF_CAN_FIRE_RL_r_incr_and_decr = DEF_INST_top_INST_c2_DEF_w_incr_whas____d1 && DEF_INST_top_INST_c2_DEF_w_decr_whas____d2;
	 DEF_INST_top_INST_c2_DEF_WILL_FIRE_RL_r_incr_and_decr = DEF_INST_top_INST_c2_DEF_CAN_FIRE_RL_r_incr_and_decr;
	 DEF_INST_top_INST_c2_DEF_CAN_FIRE_RL_r_incr_only = DEF_INST_top_INST_c2_DEF_w_incr_whas____d1;
	 DEF_INST_top_INST_c2_DEF_WILL_FIRE_RL_r_incr_only = DEF_INST_top_INST_c2_DEF_CAN_FIRE_RL_r_incr_only && !DEF_INST_top_INST_c2_DEF_WILL_FIRE_RL_r_incr_and_decr;
	 DEF_INST_top_INST_c2_DEF_CAN_FIRE_RL_r_decr_only = DEF_INST_top_INST_c2_DEF_w_decr_whas____d2;
	 DEF_INST_top_INST_c2_DEF_WILL_FIRE_RL_r_decr_only = (DEF_INST_top_INST_c2_DEF_CAN_FIRE_RL_r_decr_only && !DEF_INST_top_INST_c2_DEF_WILL_FIRE_RL_r_incr_only) && !DEF_INST_top_INST_c2_DEF_WILL_FIRE_RL_r_incr_and_decr;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_show)
	   INST_top.RL_show();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_decr1)
	   INST_top.RL_decr1();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_incr1)
	   INST_top.RL_incr1();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_step_state)
	   INST_top.RL_step_state();
	 if (DEF_INST_top_INST_c2_DEF_WILL_FIRE_RL_r_decr_only)
	   INST_top.INST_c2.RL_r_decr_only();
	 if (DEF_INST_top_INST_c2_DEF_WILL_FIRE_RL_r_incr_and_decr)
	   INST_top.INST_c2.RL_r_incr_and_decr();
	 if (DEF_INST_top_INST_c2_DEF_WILL_FIRE_RL_r_incr_only)
	   INST_top.INST_c2.RL_r_incr_only();
	 INST_top.INST_c2.INST_w_decr.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_c2.INST_w_incr.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_c1.INST_value1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_c2.INST_value2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_state.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTb::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTb_instance = new MOD_mkTb(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTb_instance->INST_c1.set_clk_0)("CLK");
  (mkTb_instance->INST_c2.INST_w_incr.set_clk_0)("CLK");
  (mkTb_instance->INST_c2.INST_w_decr.set_clk_0)("CLK");
  (mkTb_instance->INST_c2.set_clk_0)("CLK");
  (mkTb_instance->set_clk_0)("CLK");
}
void MODEL_mkTb::destroy_model()
{
  delete mkTb_instance;
  mkTb_instance = NULL;
}
void MODEL_mkTb::reset_model(bool asserted)
{
  (mkTb_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTb::get_instance()
{
  return mkTb_instance;
}

/* Fill in version numbers */
void MODEL_mkTb::get_version(char const **name, char const **build)
{
  *name = "2023.07";
  *build = "0eb551dc";
}

/* Get the model creation time */
time_t MODEL_mkTb::get_creation_time()
{
  
  /* Wed Jan 10 10:46:16 UTC 2024 */
  return 1704883576llu;
}

/* State dumping function */
void MODEL_mkTb::dump_state()
{
  (mkTb_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTb & mkTb_backing(tSimStateHdl simHdl)
{
  static MOD_mkTb *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTb(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTb::dump_VCD_defs()
{
  (mkTb_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTb::dump_VCD(tVCDDumpType dt)
{
  (mkTb_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTb_backing(sim_hdl));
}
