/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Nov  7 16:00:55 CET 2023
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkU1Tb.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkU1Tb::MODEL_mkU1Tb()
{
  mkU1Tb_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkU1Tb()
{
  MODEL_mkU1Tb *model = new MODEL_mkU1Tb();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkU1Tb &INST_top = *((MOD_mkU1Tb *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_started__h346;
	 tUInt8 DEF_INST_top_DEF_dut_ctrl_on__h144;
	 tUInt8 DEF_INST_top_DEF_cycles_0_ULE_10___d11;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_dut_regel;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_dut_regel;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_start;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_start;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_let_blink;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_let_blink;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_check;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_check;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_shutdown;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_shutdown;
	 DEF_INST_top_DEF_dut_ctrl_on__h144 = INST_top.INST_dut_ctrl_on.METH_read();
	 INST_top.DEF_b__h429 = INST_top.INST_cycles.METH_read();
	 DEF_INST_top_DEF_cycles_0_ULE_10___d11 = (INST_top.DEF_b__h429) <= 10llu;
	 DEF_INST_top_DEF_CAN_FIRE_RL_check = DEF_INST_top_DEF_dut_ctrl_on__h144 && !DEF_INST_top_DEF_cycles_0_ULE_10___d11;
	 DEF_INST_top_DEF_WILL_FIRE_RL_check = DEF_INST_top_DEF_CAN_FIRE_RL_check;
	 DEF_INST_top_DEF_CAN_FIRE_RL_dut_regel = DEF_INST_top_DEF_dut_ctrl_on__h144;
	 DEF_INST_top_DEF_WILL_FIRE_RL_dut_regel = DEF_INST_top_DEF_CAN_FIRE_RL_dut_regel && !DEF_INST_top_DEF_WILL_FIRE_RL_check;
	 DEF_INST_top_DEF_CAN_FIRE_RL_let_blink = DEF_INST_top_DEF_cycles_0_ULE_10___d11;
	 DEF_INST_top_DEF_WILL_FIRE_RL_let_blink = DEF_INST_top_DEF_CAN_FIRE_RL_let_blink;
	 DEF_INST_top_DEF_CAN_FIRE_RL_shutdown = INST_top.INST_checked.METH_read();
	 DEF_INST_top_DEF_WILL_FIRE_RL_shutdown = DEF_INST_top_DEF_CAN_FIRE_RL_shutdown;
	 DEF_INST_top_DEF_started__h346 = INST_top.INST_started.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_start = !DEF_INST_top_DEF_dut_ctrl_on__h144 && !DEF_INST_top_DEF_started__h346;
	 DEF_INST_top_DEF_WILL_FIRE_RL_start = DEF_INST_top_DEF_CAN_FIRE_RL_start;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_let_blink)
	   INST_top.RL_let_blink();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_dut_regel)
	   INST_top.RL_dut_regel();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_shutdown)
	   INST_top.RL_shutdown();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_check)
	   INST_top.RL_check();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_start)
	   INST_top.RL_start();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_dut_ctrl_on.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_dut_led_on.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_dut_blink_ctr.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_started.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_cycles.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_checked.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkU1Tb::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkU1Tb_instance = new MOD_mkU1Tb(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkU1Tb_instance->set_clk_0)("CLK");
}
void MODEL_mkU1Tb::destroy_model()
{
  delete mkU1Tb_instance;
  mkU1Tb_instance = NULL;
}
void MODEL_mkU1Tb::reset_model(bool asserted)
{
  (mkU1Tb_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkU1Tb::get_instance()
{
  return mkU1Tb_instance;
}

/* Fill in version numbers */
void MODEL_mkU1Tb::get_version(char const **name, char const **build)
{
  *name = "2023.07";
  *build = "0eb551dc";
}

/* Get the model creation time */
time_t MODEL_mkU1Tb::get_creation_time()
{
  
  /* Tue Nov  7 15:00:55 UTC 2023 */
  return 1699369255llu;
}

/* State dumping function */
void MODEL_mkU1Tb::dump_state()
{
  (mkU1Tb_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkU1Tb & mkU1Tb_backing(tSimStateHdl simHdl)
{
  static MOD_mkU1Tb *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkU1Tb(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkU1Tb::dump_VCD_defs()
{
  (mkU1Tb_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkU1Tb::dump_VCD(tVCDDumpType dt)
{
  (mkU1Tb_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkU1Tb_backing(sim_hdl));
}
