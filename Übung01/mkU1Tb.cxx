/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Nov  7 15:59:33 CET 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkU1Tb.h"


/* String declarations */
static std::string const __str_literal_3("LED count != Reference value. Expected %d, got %d", 49u);
static std::string const __str_literal_1("LED status : %b", 15u);
static std::string const __str_literal_2("Test successful!", 16u);


/* Constructor */
MOD_mkU1Tb::MOD_mkU1Tb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_checked(simHdl, "checked", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_cycles(simHdl, "cycles", this, 33u, 0llu, (tUInt8)0u),
    INST_dut_blink_ctr(simHdl, "dut_blink_ctr", this, 32u, 0u, (tUInt8)0u),
    INST_dut_ctrl_on(simHdl, "dut_ctrl_on", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_led_on(simHdl, "dut_led_on", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_started(simHdl, "started", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 12u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkU1Tb::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h429", SYM_DEF, &DEF_b__h429, 33u);
  init_symbol(&symbols[1u], "checked", SYM_MODULE, &INST_checked);
  init_symbol(&symbols[2u], "cycles", SYM_MODULE, &INST_cycles);
  init_symbol(&symbols[3u], "dut_blink_ctr", SYM_MODULE, &INST_dut_blink_ctr);
  init_symbol(&symbols[4u], "dut_ctrl_on", SYM_MODULE, &INST_dut_ctrl_on);
  init_symbol(&symbols[5u], "dut_led_on", SYM_MODULE, &INST_dut_led_on);
  init_symbol(&symbols[6u], "RL_check", SYM_RULE);
  init_symbol(&symbols[7u], "RL_dut_regel", SYM_RULE);
  init_symbol(&symbols[8u], "RL_let_blink", SYM_RULE);
  init_symbol(&symbols[9u], "RL_shutdown", SYM_RULE);
  init_symbol(&symbols[10u], "RL_start", SYM_RULE);
  init_symbol(&symbols[11u], "started", SYM_MODULE, &INST_started);
}


/* Rule actions */

void MOD_mkU1Tb::RL_dut_regel()
{
  tUInt32 DEF_dut_blink_ctr_PLUS_1___d5;
  tUInt8 DEF_NOT_dut_led_on___d3;
  DEF_dut_blink_ctr___d4 = INST_dut_blink_ctr.METH_read();
  DEF_dut_led_on__h161 = INST_dut_led_on.METH_read();
  DEF_NOT_dut_led_on___d3 = !DEF_dut_led_on__h161;
  DEF_dut_blink_ctr_PLUS_1___d5 = DEF_dut_blink_ctr___d4 + 1u;
  if (DEF_NOT_dut_led_on___d3)
    INST_dut_blink_ctr.METH_write(DEF_dut_blink_ctr_PLUS_1___d5);
  INST_dut_led_on.METH_write(DEF_NOT_dut_led_on___d3);
}

void MOD_mkU1Tb::RL_start()
{
  INST_dut_ctrl_on.METH_write((tUInt8)1u);
  INST_dut_blink_ctr.METH_write(0u);
  INST_started.METH_write((tUInt8)1u);
}

void MOD_mkU1Tb::RL_let_blink()
{
  tUInt64 DEF_cycles_0_PLUS_1___d12;
  DEF_b__h429 = INST_cycles.METH_read();
  DEF_dut_led_on__h161 = INST_dut_led_on.METH_read();
  DEF_cycles_0_PLUS_1___d12 = 8589934591llu & (DEF_b__h429 + 1llu);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,1", &__str_literal_1, DEF_dut_led_on__h161);
  INST_cycles.METH_write(DEF_cycles_0_PLUS_1___d12);
}

void MOD_mkU1Tb::RL_check()
{
  tUInt8 DEF_NOT_SEXT_dut_blink_ctr__5_EQ_5_6___d17;
  tUInt8 DEF_SEXT_dut_blink_ctr__5_EQ_5___d16;
  tUInt32 DEF_signed_dut_blink_ctr___d19;
  tUInt64 DEF_unsigned_5___d18;
  DEF_unsigned_5___d18 = 5llu;
  DEF_dut_blink_ctr___d4 = INST_dut_blink_ctr.METH_read();
  DEF_signed_dut_blink_ctr___d19 = DEF_dut_blink_ctr___d4;
  DEF_SEXT_dut_blink_ctr__5_EQ_5___d16 = primSignExt64(33u,
						       32u,
						       (tUInt32)(DEF_dut_blink_ctr___d4)) == 5llu;
  DEF_NOT_SEXT_dut_blink_ctr__5_EQ_5_6___d17 = !DEF_SEXT_dut_blink_ctr__5_EQ_5___d16;
  INST_dut_ctrl_on.METH_write((tUInt8)0u);
  INST_dut_led_on.METH_write((tUInt8)0u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_SEXT_dut_blink_ctr__5_EQ_5___d16)
      dollar_display(sim_hdl, this, "s", &__str_literal_2);
    if (DEF_NOT_SEXT_dut_blink_ctr__5_EQ_5_6___d17)
      dollar_display(sim_hdl,
		     this,
		     "s,33,-32",
		     &__str_literal_3,
		     DEF_unsigned_5___d18,
		     DEF_signed_dut_blink_ctr___d19);
  }
  INST_checked.METH_write((tUInt8)1u);
}

void MOD_mkU1Tb::RL_shutdown()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 1u);
}


/* Methods */


/* Reset routines */

void MOD_mkU1Tb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_started.reset_RST(ARG_rst_in);
  INST_dut_led_on.reset_RST(ARG_rst_in);
  INST_dut_ctrl_on.reset_RST(ARG_rst_in);
  INST_dut_blink_ctr.reset_RST(ARG_rst_in);
  INST_cycles.reset_RST(ARG_rst_in);
  INST_checked.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkU1Tb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkU1Tb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_checked.dump_state(indent + 2u);
  INST_cycles.dump_state(indent + 2u);
  INST_dut_blink_ctr.dump_state(indent + 2u);
  INST_dut_ctrl_on.dump_state(indent + 2u);
  INST_dut_led_on.dump_state(indent + 2u);
  INST_started.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkU1Tb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 10u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h429", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_blink_ctr___d4", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_led_on__h161", 1u);
  num = INST_checked.dump_VCD_defs(num);
  num = INST_cycles.dump_VCD_defs(num);
  num = INST_dut_blink_ctr.dump_VCD_defs(num);
  num = INST_dut_ctrl_on.dump_VCD_defs(num);
  num = INST_dut_led_on.dump_VCD_defs(num);
  num = INST_started.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkU1Tb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkU1Tb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkU1Tb::vcd_defs(tVCDDumpType dt, MOD_mkU1Tb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h429) != DEF_b__h429)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h429, 33u);
	backing.DEF_b__h429 = DEF_b__h429;
      }
      ++num;
      if ((backing.DEF_dut_blink_ctr___d4) != DEF_dut_blink_ctr___d4)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_blink_ctr___d4, 32u);
	backing.DEF_dut_blink_ctr___d4 = DEF_dut_blink_ctr___d4;
      }
      ++num;
      if ((backing.DEF_dut_led_on__h161) != DEF_dut_led_on__h161)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_led_on__h161, 1u);
	backing.DEF_dut_led_on__h161 = DEF_dut_led_on__h161;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h429, 33u);
      backing.DEF_b__h429 = DEF_b__h429;
      vcd_write_val(sim_hdl, num++, DEF_dut_blink_ctr___d4, 32u);
      backing.DEF_dut_blink_ctr___d4 = DEF_dut_blink_ctr___d4;
      vcd_write_val(sim_hdl, num++, DEF_dut_led_on__h161, 1u);
      backing.DEF_dut_led_on__h161 = DEF_dut_led_on__h161;
    }
}

void MOD_mkU1Tb::vcd_prims(tVCDDumpType dt, MOD_mkU1Tb &backing)
{
  INST_checked.dump_VCD(dt, backing.INST_checked);
  INST_cycles.dump_VCD(dt, backing.INST_cycles);
  INST_dut_blink_ctr.dump_VCD(dt, backing.INST_dut_blink_ctr);
  INST_dut_ctrl_on.dump_VCD(dt, backing.INST_dut_ctrl_on);
  INST_dut_led_on.dump_VCD(dt, backing.INST_dut_led_on);
  INST_started.dump_VCD(dt, backing.INST_started);
}
