/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Feb 20 13:35:12 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTest.h"


/* String declarations */
static std::string const __str_literal_5("Error: \"Tb.bsv\", line 11, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l11c13] and\n  [RL_action_l12c13, RL_action_l13c13, RL_action_l16c15, RL_action_l17c13,\n  RL_action_l19c13] ) fired in the same clock cycle.\n",
					 241u);
static std::string const __str_literal_6("Error: \"Tb.bsv\", line 12, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l12c13] and\n  [RL_action_l13c13, RL_action_l16c15, RL_action_l17c13, RL_action_l19c13] )\n  fired in the same clock cycle.\n",
					 223u);
static std::string const __str_literal_7("Error: \"Tb.bsv\", line 13, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l13c13] and\n  [RL_action_l16c15, RL_action_l17c13, RL_action_l19c13] ) fired in the same\n  clock cycle.\n",
					 205u);
static std::string const __str_literal_8("Error: \"Tb.bsv\", line 16, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l16c15] and\n  [RL_action_l17c13, RL_action_l19c13] ) fired in the same clock cycle.\n",
					 185u);
static std::string const __str_literal_9("Error: \"Tb.bsv\", line 17, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l17c13] and\n  [RL_action_l19c13] ) fired in the same clock cycle.\n",
					 167u);
static std::string const __str_literal_10("Error: \"Tb.bsv\", line 28, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l28c13] and\n  [RL_action_l29c13, RL_action_l30c13, RL_action_l33c15, RL_action_l34c13,\n  RL_action_l36c13] ) fired in the same clock cycle.\n",
					  241u);
static std::string const __str_literal_11("Error: \"Tb.bsv\", line 29, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l29c13] and\n  [RL_action_l30c13, RL_action_l33c15, RL_action_l34c13, RL_action_l36c13] )\n  fired in the same clock cycle.\n",
					  223u);
static std::string const __str_literal_12("Error: \"Tb.bsv\", line 30, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l30c13] and\n  [RL_action_l33c15, RL_action_l34c13, RL_action_l36c13] ) fired in the same\n  clock cycle.\n",
					  205u);
static std::string const __str_literal_13("Error: \"Tb.bsv\", line 33, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l33c15] and\n  [RL_action_l34c13, RL_action_l36c13] ) fired in the same clock cycle.\n",
					  185u);
static std::string const __str_literal_14("Error: \"Tb.bsv\", line 34, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l34c13] and\n  [RL_action_l36c13] ) fired in the same clock cycle.\n",
					  167u);
static std::string const __str_literal_4("Test expect(unpack())", 21u);
static std::string const __str_literal_1("Test unpack(expect())", 21u);
static std::string const __str_literal_2("Wert a : %b", 11u);
static std::string const __str_literal_3("Wert b : %b", 11u);


/* Constructor */
MOD_mkTest::MOD_mkTest(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_a(simHdl, "a", this, 32u, 4294967291u, (tUInt8)0u),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_abort_1(simHdl, "abort_1", this, 1u, (tUInt8)0u),
    INST_b(simHdl, "b", this, 42u, 5llu, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_running_1(simHdl, "running_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1_1(simHdl, "start_reg_1_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1_2(simHdl, "start_reg_1_2", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1_3(simHdl, "start_reg_1_3", this, 1u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_start_wire_1(simHdl, "start_wire_1", this, 1u, (tUInt8)0u),
    INST_state_1_can_overlap(simHdl, "state_1_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_1_fired(simHdl, "state_1_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_1_fired_1(simHdl, "state_1_fired_1", this, 1u, (tUInt8)0u),
    INST_state_1_mkFSMstate(simHdl, "state_1_mkFSMstate", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_state_1_overlap_pw(simHdl, "state_1_overlap_pw", this, 0u),
    INST_state_1_set_pw(simHdl, "state_1_set_pw", this, 0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 78u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTest::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_20", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_21", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_22", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_23", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_24", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[7u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[8u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[9u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[10u], "a", SYM_MODULE, &INST_a);
  init_symbol(&symbols[11u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[12u], "abort_1", SYM_MODULE, &INST_abort_1);
  init_symbol(&symbols[13u], "b", SYM_MODULE, &INST_b);
  init_symbol(&symbols[14u], "RL_action_l11c13", SYM_RULE);
  init_symbol(&symbols[15u], "RL_action_l12c13", SYM_RULE);
  init_symbol(&symbols[16u], "RL_action_l13c13", SYM_RULE);
  init_symbol(&symbols[17u], "RL_action_l16c15", SYM_RULE);
  init_symbol(&symbols[18u], "RL_action_l17c13", SYM_RULE);
  init_symbol(&symbols[19u], "RL_action_l19c13", SYM_RULE);
  init_symbol(&symbols[20u], "RL_action_l28c13", SYM_RULE);
  init_symbol(&symbols[21u], "RL_action_l29c13", SYM_RULE);
  init_symbol(&symbols[22u], "RL_action_l30c13", SYM_RULE);
  init_symbol(&symbols[23u], "RL_action_l33c15", SYM_RULE);
  init_symbol(&symbols[24u], "RL_action_l34c13", SYM_RULE);
  init_symbol(&symbols[25u], "RL_action_l36c13", SYM_RULE);
  init_symbol(&symbols[26u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[27u], "RL_auto_finish_1", SYM_RULE);
  init_symbol(&symbols[28u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[29u], "RL_auto_start_1", SYM_RULE);
  init_symbol(&symbols[30u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[31u], "RL_fsm_start_1", SYM_RULE);
  init_symbol(&symbols[32u], "RL_idle_l10c9", SYM_RULE);
  init_symbol(&symbols[33u], "RL_idle_l27c9", SYM_RULE);
  init_symbol(&symbols[34u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[35u], "RL_restart_1", SYM_RULE);
  init_symbol(&symbols[36u], "RL_start_reg_1__dreg_update", SYM_RULE);
  init_symbol(&symbols[37u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[38u], "RL_state_1_every", SYM_RULE);
  init_symbol(&symbols[39u], "RL_state_1_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[40u], "RL_state_1_handle_abort", SYM_RULE);
  init_symbol(&symbols[41u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[42u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[43u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[44u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[45u], "running_1", SYM_MODULE, &INST_running_1);
  init_symbol(&symbols[46u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[47u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[48u], "start_reg_1_1", SYM_MODULE, &INST_start_reg_1_1);
  init_symbol(&symbols[49u], "start_reg_1_2", SYM_MODULE, &INST_start_reg_1_2);
  init_symbol(&symbols[50u], "start_reg_1_3", SYM_MODULE, &INST_start_reg_1_3);
  init_symbol(&symbols[51u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[52u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[53u], "start_wire_1", SYM_MODULE, &INST_start_wire_1);
  init_symbol(&symbols[54u], "state_1_can_overlap", SYM_MODULE, &INST_state_1_can_overlap);
  init_symbol(&symbols[55u], "state_1_fired", SYM_MODULE, &INST_state_1_fired);
  init_symbol(&symbols[56u], "state_1_fired_1", SYM_MODULE, &INST_state_1_fired_1);
  init_symbol(&symbols[57u], "state_1_mkFSMstate", SYM_MODULE, &INST_state_1_mkFSMstate);
  init_symbol(&symbols[58u], "state_1_overlap_pw", SYM_MODULE, &INST_state_1_overlap_pw);
  init_symbol(&symbols[59u], "state_1_set_pw", SYM_MODULE, &INST_state_1_set_pw);
  init_symbol(&symbols[60u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[61u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[62u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[63u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[64u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[65u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[66u],
	      "WILL_FIRE_RL_action_l11c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l11c13,
	      1u);
  init_symbol(&symbols[67u],
	      "WILL_FIRE_RL_action_l12c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l12c13,
	      1u);
  init_symbol(&symbols[68u],
	      "WILL_FIRE_RL_action_l13c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l13c13,
	      1u);
  init_symbol(&symbols[69u],
	      "WILL_FIRE_RL_action_l16c15",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l16c15,
	      1u);
  init_symbol(&symbols[70u],
	      "WILL_FIRE_RL_action_l17c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l17c13,
	      1u);
  init_symbol(&symbols[71u],
	      "WILL_FIRE_RL_action_l19c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l19c13,
	      1u);
  init_symbol(&symbols[72u],
	      "WILL_FIRE_RL_action_l28c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l28c13,
	      1u);
  init_symbol(&symbols[73u],
	      "WILL_FIRE_RL_action_l29c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l29c13,
	      1u);
  init_symbol(&symbols[74u],
	      "WILL_FIRE_RL_action_l30c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l30c13,
	      1u);
  init_symbol(&symbols[75u],
	      "WILL_FIRE_RL_action_l33c15",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l33c15,
	      1u);
  init_symbol(&symbols[76u],
	      "WILL_FIRE_RL_action_l34c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l34c13,
	      1u);
  init_symbol(&symbols[77u],
	      "WILL_FIRE_RL_action_l36c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l36c13,
	      1u);
}


/* Rule actions */

void MOD_mkTest::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas_AND_start_reg_2_wget___d3;
  DEF_start_reg_2_whas_AND_start_reg_2_wget___d3 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas_AND_start_reg_2_wget___d3);
}

void MOD_mkTest::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTest::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15;
  DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15);
}

void MOD_mkTest::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21;
  tUInt8 DEF_state_can_overlap__h1995;
  DEF_state_can_overlap__h1995 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h1995);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21);
}

void MOD_mkTest::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTest::RL_action_l11c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
}

void MOD_mkTest::RL_action_l12c13()
{
  DEF_a___d39 = INST_a.METH_read();
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,32", &__str_literal_2, DEF_a___d39);
}

void MOD_mkTest::RL_action_l13c13()
{
  DEF_b__h11700 = INST_b.METH_read();
  DEF_signed_b_2___d43 = DEF_b__h11700;
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-42", &__str_literal_3, DEF_signed_b_2___d43);
}

void MOD_mkTest::RL_action_l16c15()
{
  tUInt64 DEF__0_CONCAT_a_9___d46;
  DEF_a___d39 = INST_a.METH_read();
  DEF__0_CONCAT_a_9___d46 = 4398046511103llu & ((((tUInt64)(0u)) << 32u) | (tUInt64)(DEF_a___d39));
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_b.METH_write(DEF__0_CONCAT_a_9___d46);
}

void MOD_mkTest::RL_action_l17c13()
{
  DEF_b__h11700 = INST_b.METH_read();
  DEF_signed_b_2___d43 = DEF_b__h11700;
  INST_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-42", &__str_literal_3, DEF_signed_b_2___d43);
}

void MOD_mkTest::RL_action_l19c13()
{
  INST_state_mkFSMstate.METH_write((tUInt8)6u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 1u);
}

void MOD_mkTest::RL_idle_l10c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTest::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTest::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTest::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTest::RL_start_reg_1__dreg_update()
{
  tUInt8 DEF_start_reg_1_3_whas__4_AND_start_reg_1_3_wget__5___d66;
  DEF_start_reg_1_3_whas__4_AND_start_reg_1_3_wget__5___d66 = INST_start_reg_1_3.METH_whas() && INST_start_reg_1_3.METH_wget();
  INST_start_reg_1_2.METH_write(DEF_start_reg_1_3_whas__4_AND_start_reg_1_3_wget__5___d66);
}

void MOD_mkTest::RL_state_1_handle_abort()
{
  INST_state_1_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTest::RL_state_1_fired__dreg_update()
{
  tUInt8 DEF_state_1_fired_1_whas__6_AND_state_1_fired_1_wg_ETC___d78;
  DEF_state_1_fired_1_whas__6_AND_state_1_fired_1_wg_ETC___d78 = INST_state_1_fired_1.METH_whas() && INST_state_1_fired_1.METH_wget();
  INST_state_1_fired.METH_write(DEF_state_1_fired_1_whas__6_AND_state_1_fired_1_wg_ETC___d78);
}

void MOD_mkTest::RL_state_1_every()
{
  tUInt8 DEF_state_1_set_pw_whas__9_OR_NOT_state_1_overlap__ETC___d84;
  tUInt8 DEF_state_1_can_overlap__h14562;
  DEF_state_1_can_overlap__h14562 = INST_state_1_can_overlap.METH_read();
  DEF_state_1_set_pw_whas__9_OR_NOT_state_1_overlap__ETC___d84 = INST_state_1_set_pw.METH_whas() || (!INST_state_1_overlap_pw.METH_whas() && DEF_state_1_can_overlap__h14562);
  INST_state_1_can_overlap.METH_write(DEF_state_1_set_pw_whas__9_OR_NOT_state_1_overlap__ETC___d84);
}

void MOD_mkTest::RL_restart_1()
{
  INST_start_wire_1.METH_wset((tUInt8)1u);
  INST_start_reg_1_3.METH_wset((tUInt8)1u);
}

void MOD_mkTest::RL_action_l28c13()
{
  INST_state_1_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_1_fired_1.METH_wset((tUInt8)1u);
  INST_state_1_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkTest::RL_action_l29c13()
{
  DEF_a___d39 = INST_a.METH_read();
  INST_state_1_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_1_fired_1.METH_wset((tUInt8)1u);
  INST_state_1_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,32", &__str_literal_2, DEF_a___d39);
}

void MOD_mkTest::RL_action_l30c13()
{
  DEF_b__h11700 = INST_b.METH_read();
  DEF_signed_b_2___d43 = DEF_b__h11700;
  INST_state_1_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_1_fired_1.METH_wset((tUInt8)1u);
  INST_state_1_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-42", &__str_literal_3, DEF_signed_b_2___d43);
}

void MOD_mkTest::RL_action_l33c15()
{
  tUInt64 DEF_SEXT_a_9___d106;
  DEF_a___d39 = INST_a.METH_read();
  DEF_SEXT_a_9___d106 = primSignExt64(42u, 32u, (tUInt32)(DEF_a___d39));
  INST_state_1_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_1_fired_1.METH_wset((tUInt8)1u);
  INST_state_1_set_pw.METH_wset();
  INST_b.METH_write(DEF_SEXT_a_9___d106);
}

void MOD_mkTest::RL_action_l34c13()
{
  DEF_b__h11700 = INST_b.METH_read();
  DEF_signed_b_2___d43 = DEF_b__h11700;
  INST_state_1_mkFSMstate.METH_write((tUInt8)5u);
  INST_state_1_fired_1.METH_wset((tUInt8)1u);
  INST_state_1_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,-42", &__str_literal_3, DEF_signed_b_2___d43);
}

void MOD_mkTest::RL_action_l36c13()
{
  INST_state_1_mkFSMstate.METH_write((tUInt8)6u);
  INST_state_1_fired_1.METH_wset((tUInt8)1u);
  INST_state_1_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 1u);
}

void MOD_mkTest::RL_idle_l27c9()
{
  INST_state_1_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_1_fired_1.METH_wset((tUInt8)1u);
  INST_state_1_set_pw.METH_wset();
}

void MOD_mkTest::RL_fsm_start_1()
{
  INST_start_wire_1.METH_wset((tUInt8)1u);
  INST_start_reg_1_3.METH_wset((tUInt8)1u);
  INST_start_reg_1_1.METH_write((tUInt8)0u);
}

void MOD_mkTest::RL_auto_start_1()
{
  INST_start_reg_1_1.METH_write((tUInt8)1u);
  INST_running_1.METH_write((tUInt8)1u);
}

void MOD_mkTest::RL_auto_finish_1()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTest::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l11c13 && ((((DEF_WILL_FIRE_RL_action_l12c13 || DEF_WILL_FIRE_RL_action_l13c13) || DEF_WILL_FIRE_RL_action_l16c15) || DEF_WILL_FIRE_RL_action_l17c13) || DEF_WILL_FIRE_RL_action_l19c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
}

void MOD_mkTest::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l12c13 && (((DEF_WILL_FIRE_RL_action_l13c13 || DEF_WILL_FIRE_RL_action_l16c15) || DEF_WILL_FIRE_RL_action_l17c13) || DEF_WILL_FIRE_RL_action_l19c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
}

void MOD_mkTest::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l13c13 && ((DEF_WILL_FIRE_RL_action_l16c15 || DEF_WILL_FIRE_RL_action_l17c13) || DEF_WILL_FIRE_RL_action_l19c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
}

void MOD_mkTest::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l16c15 && (DEF_WILL_FIRE_RL_action_l17c13 || DEF_WILL_FIRE_RL_action_l19c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
}

void MOD_mkTest::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l17c13 && DEF_WILL_FIRE_RL_action_l19c13)
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
}

void MOD_mkTest::__me_check_20()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l28c13 && ((((DEF_WILL_FIRE_RL_action_l29c13 || DEF_WILL_FIRE_RL_action_l30c13) || DEF_WILL_FIRE_RL_action_l33c15) || DEF_WILL_FIRE_RL_action_l34c13) || DEF_WILL_FIRE_RL_action_l36c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
}

void MOD_mkTest::__me_check_21()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l29c13 && (((DEF_WILL_FIRE_RL_action_l30c13 || DEF_WILL_FIRE_RL_action_l33c15) || DEF_WILL_FIRE_RL_action_l34c13) || DEF_WILL_FIRE_RL_action_l36c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
}

void MOD_mkTest::__me_check_22()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l30c13 && ((DEF_WILL_FIRE_RL_action_l33c15 || DEF_WILL_FIRE_RL_action_l34c13) || DEF_WILL_FIRE_RL_action_l36c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_12);
}

void MOD_mkTest::__me_check_23()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l33c15 && (DEF_WILL_FIRE_RL_action_l34c13 || DEF_WILL_FIRE_RL_action_l36c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_13);
}

void MOD_mkTest::__me_check_24()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l34c13 && DEF_WILL_FIRE_RL_action_l36c13)
      dollar_error(sim_hdl, this, "s", &__str_literal_14);
}


/* Methods */


/* Reset routines */

void MOD_mkTest::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_state_1_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_1_fired.reset_RST(ARG_rst_in);
  INST_state_1_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1_2.reset_RST(ARG_rst_in);
  INST_start_reg_1_1.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running_1.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_b.reset_RST(ARG_rst_in);
  INST_a.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTest::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTest::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_a.dump_state(indent + 2u);
  INST_abort.dump_state(indent + 2u);
  INST_abort_1.dump_state(indent + 2u);
  INST_b.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_running_1.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_1_1.dump_state(indent + 2u);
  INST_start_reg_1_2.dump_state(indent + 2u);
  INST_start_reg_1_3.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_start_wire_1.dump_state(indent + 2u);
  INST_state_1_can_overlap.dump_state(indent + 2u);
  INST_state_1_fired.dump_state(indent + 2u);
  INST_state_1_fired_1.dump_state(indent + 2u);
  INST_state_1_mkFSMstate.dump_state(indent + 2u);
  INST_state_1_overlap_pw.dump_state(indent + 2u);
  INST_state_1_set_pw.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTest::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 42u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l11c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l12c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l13c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l16c15", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l17c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l19c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l28c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l29c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l30c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l33c15", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l34c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l36c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a___d39", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h11700", 42u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_b_2___d43", 42u);
  num = INST_a.dump_VCD_defs(num);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_abort_1.dump_VCD_defs(num);
  num = INST_b.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_running_1.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_1_1.dump_VCD_defs(num);
  num = INST_start_reg_1_2.dump_VCD_defs(num);
  num = INST_start_reg_1_3.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_start_wire_1.dump_VCD_defs(num);
  num = INST_state_1_can_overlap.dump_VCD_defs(num);
  num = INST_state_1_fired.dump_VCD_defs(num);
  num = INST_state_1_fired_1.dump_VCD_defs(num);
  num = INST_state_1_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_1_overlap_pw.dump_VCD_defs(num);
  num = INST_state_1_set_pw.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTest::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTest &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTest::vcd_defs(tVCDDumpType dt, MOD_mkTest &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 42u);
    vcd_write_x(sim_hdl, num++, 42u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l11c13) != DEF_WILL_FIRE_RL_action_l11c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l11c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l11c13 = DEF_WILL_FIRE_RL_action_l11c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l12c13) != DEF_WILL_FIRE_RL_action_l12c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l12c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l12c13 = DEF_WILL_FIRE_RL_action_l12c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l13c13) != DEF_WILL_FIRE_RL_action_l13c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l13c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l13c13 = DEF_WILL_FIRE_RL_action_l13c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l16c15) != DEF_WILL_FIRE_RL_action_l16c15)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l16c15, 1u);
	backing.DEF_WILL_FIRE_RL_action_l16c15 = DEF_WILL_FIRE_RL_action_l16c15;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l17c13) != DEF_WILL_FIRE_RL_action_l17c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l17c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l17c13 = DEF_WILL_FIRE_RL_action_l17c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l19c13) != DEF_WILL_FIRE_RL_action_l19c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l19c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l19c13 = DEF_WILL_FIRE_RL_action_l19c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l28c13) != DEF_WILL_FIRE_RL_action_l28c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l28c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l28c13 = DEF_WILL_FIRE_RL_action_l28c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l29c13) != DEF_WILL_FIRE_RL_action_l29c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l29c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l29c13 = DEF_WILL_FIRE_RL_action_l29c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l30c13) != DEF_WILL_FIRE_RL_action_l30c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l30c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l30c13 = DEF_WILL_FIRE_RL_action_l30c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l33c15) != DEF_WILL_FIRE_RL_action_l33c15)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l33c15, 1u);
	backing.DEF_WILL_FIRE_RL_action_l33c15 = DEF_WILL_FIRE_RL_action_l33c15;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l34c13) != DEF_WILL_FIRE_RL_action_l34c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l34c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l34c13 = DEF_WILL_FIRE_RL_action_l34c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l36c13) != DEF_WILL_FIRE_RL_action_l36c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l36c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l36c13 = DEF_WILL_FIRE_RL_action_l36c13;
      }
      ++num;
      if ((backing.DEF_a___d39) != DEF_a___d39)
      {
	vcd_write_val(sim_hdl, num, DEF_a___d39, 32u);
	backing.DEF_a___d39 = DEF_a___d39;
      }
      ++num;
      if ((backing.DEF_b__h11700) != DEF_b__h11700)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h11700, 42u);
	backing.DEF_b__h11700 = DEF_b__h11700;
      }
      ++num;
      if ((backing.DEF_signed_b_2___d43) != DEF_signed_b_2___d43)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_b_2___d43, 42u);
	backing.DEF_signed_b_2___d43 = DEF_signed_b_2___d43;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l11c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l11c13 = DEF_WILL_FIRE_RL_action_l11c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l12c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l12c13 = DEF_WILL_FIRE_RL_action_l12c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l13c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l13c13 = DEF_WILL_FIRE_RL_action_l13c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l16c15, 1u);
      backing.DEF_WILL_FIRE_RL_action_l16c15 = DEF_WILL_FIRE_RL_action_l16c15;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l17c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l17c13 = DEF_WILL_FIRE_RL_action_l17c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l19c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l19c13 = DEF_WILL_FIRE_RL_action_l19c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l28c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l28c13 = DEF_WILL_FIRE_RL_action_l28c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l29c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l29c13 = DEF_WILL_FIRE_RL_action_l29c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l30c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l30c13 = DEF_WILL_FIRE_RL_action_l30c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l33c15, 1u);
      backing.DEF_WILL_FIRE_RL_action_l33c15 = DEF_WILL_FIRE_RL_action_l33c15;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l34c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l34c13 = DEF_WILL_FIRE_RL_action_l34c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l36c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l36c13 = DEF_WILL_FIRE_RL_action_l36c13;
      vcd_write_val(sim_hdl, num++, DEF_a___d39, 32u);
      backing.DEF_a___d39 = DEF_a___d39;
      vcd_write_val(sim_hdl, num++, DEF_b__h11700, 42u);
      backing.DEF_b__h11700 = DEF_b__h11700;
      vcd_write_val(sim_hdl, num++, DEF_signed_b_2___d43, 42u);
      backing.DEF_signed_b_2___d43 = DEF_signed_b_2___d43;
    }
}

void MOD_mkTest::vcd_prims(tVCDDumpType dt, MOD_mkTest &backing)
{
  INST_a.dump_VCD(dt, backing.INST_a);
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_abort_1.dump_VCD(dt, backing.INST_abort_1);
  INST_b.dump_VCD(dt, backing.INST_b);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_running_1.dump_VCD(dt, backing.INST_running_1);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_1_1.dump_VCD(dt, backing.INST_start_reg_1_1);
  INST_start_reg_1_2.dump_VCD(dt, backing.INST_start_reg_1_2);
  INST_start_reg_1_3.dump_VCD(dt, backing.INST_start_reg_1_3);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_start_wire_1.dump_VCD(dt, backing.INST_start_wire_1);
  INST_state_1_can_overlap.dump_VCD(dt, backing.INST_state_1_can_overlap);
  INST_state_1_fired.dump_VCD(dt, backing.INST_state_1_fired);
  INST_state_1_fired_1.dump_VCD(dt, backing.INST_state_1_fired_1);
  INST_state_1_mkFSMstate.dump_VCD(dt, backing.INST_state_1_mkFSMstate);
  INST_state_1_overlap_pw.dump_VCD(dt, backing.INST_state_1_overlap_pw);
  INST_state_1_set_pw.dump_VCD(dt, backing.INST_state_1_set_pw);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}
