/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Sat Feb 10 16:32:40 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_1("Result is %0d", 13u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_dut_reg_rslt(simHdl, "dut_reg_rslt", this, 32u, 0u, (tUInt8)0u),
    INST_dut_reg_x(simHdl, "dut_reg_x", this, 32u, 0u, (tUInt8)0u),
    INST_dut_reg_y(simHdl, "dut_reg_y", this, 32u, 0u, (tUInt8)0u),
    INST_dut_set_x(simHdl, "dut_set_x", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_set_y(simHdl, "dut_set_y", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 9u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "dut_reg_rslt", SYM_MODULE, &INST_dut_reg_rslt);
  init_symbol(&symbols[1u], "dut_reg_x", SYM_MODULE, &INST_dut_reg_x);
  init_symbol(&symbols[2u], "dut_reg_y", SYM_MODULE, &INST_dut_reg_y);
  init_symbol(&symbols[3u], "dut_reg_y__h289", SYM_DEF, &DEF_dut_reg_y__h289, 32u);
  init_symbol(&symbols[4u], "dut_set_x", SYM_MODULE, &INST_dut_set_x);
  init_symbol(&symbols[5u], "dut_set_y", SYM_MODULE, &INST_dut_set_y);
  init_symbol(&symbols[6u], "RL_calc_real", SYM_RULE);
  init_symbol(&symbols[7u], "RL_dut_calc", SYM_RULE);
  init_symbol(&symbols[8u], "RL_result_real", SYM_RULE);
}


/* Rule actions */

void MOD_mkTb::RL_dut_calc()
{
  tUInt32 DEF_dut_reg_rslt_PLUS_dut_reg_x_0___d11;
  tUInt32 DEF_dut_reg_y_SRA_1___d14;
  tUInt32 DEF_dut_reg_x_0_BITS_30_TO_0_2_CONCAT_0___d13;
  tUInt8 DEF_dut_reg_y_BIT_0___h290;
  tUInt32 DEF_dut_reg_x_BITS_30_TO_0___h368;
  tUInt32 DEF_b__h325;
  DEF_dut_reg_rslt___d9 = INST_dut_reg_rslt.METH_read();
  DEF_dut_reg_y__h289 = INST_dut_reg_y.METH_read();
  DEF_b__h325 = INST_dut_reg_x.METH_read();
  DEF_dut_reg_x_BITS_30_TO_0___h368 = (tUInt32)(2147483647u & DEF_b__h325);
  DEF_dut_reg_y_BIT_0___h290 = (tUInt8)((tUInt8)1u & DEF_dut_reg_y__h289);
  DEF_dut_reg_x_0_BITS_30_TO_0_2_CONCAT_0___d13 = (DEF_dut_reg_x_BITS_30_TO_0___h368 << 1u) | (tUInt32)((tUInt8)0u);
  DEF_dut_reg_y_SRA_1___d14 = primShiftRA32(32u, 32u, (tUInt32)(DEF_dut_reg_y__h289), 32u, 1u);
  DEF_dut_reg_rslt_PLUS_dut_reg_x_0___d11 = DEF_dut_reg_rslt___d9 + DEF_b__h325;
  if (DEF_dut_reg_y_BIT_0___h290)
    INST_dut_reg_rslt.METH_write(DEF_dut_reg_rslt_PLUS_dut_reg_x_0___d11);
  INST_dut_reg_x.METH_write(DEF_dut_reg_x_0_BITS_30_TO_0_2_CONCAT_0___d13);
  INST_dut_reg_y.METH_write(DEF_dut_reg_y_SRA_1___d14);
}

void MOD_mkTb::RL_calc_real()
{
  INST_dut_reg_rslt.METH_write(0u);
  INST_dut_reg_x.METH_write(3u);
  INST_dut_set_x.METH_write((tUInt8)1u);
  INST_dut_reg_y.METH_write(2u);
  INST_dut_set_y.METH_write((tUInt8)1u);
}

void MOD_mkTb::RL_result_real()
{
  tUInt32 DEF_signed_dut_reg_rslt___d20;
  DEF_dut_reg_rslt___d9 = INST_dut_reg_rslt.METH_read();
  DEF_signed_dut_reg_rslt___d20 = DEF_dut_reg_rslt___d9;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,-32", &__str_literal_1, DEF_signed_dut_reg_rslt___d20);
    dollar_finish(sim_hdl, "32", 0u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_dut_set_y.reset_RST(ARG_rst_in);
  INST_dut_set_x.reset_RST(ARG_rst_in);
  INST_dut_reg_y.reset_RST(ARG_rst_in);
  INST_dut_reg_x.reset_RST(ARG_rst_in);
  INST_dut_reg_rslt.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_dut_reg_rslt.dump_state(indent + 2u);
  INST_dut_reg_x.dump_state(indent + 2u);
  INST_dut_reg_y.dump_state(indent + 2u);
  INST_dut_set_x.dump_state(indent + 2u);
  INST_dut_set_y.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 8u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_reg_rslt___d9", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_reg_y__h289", 32u);
  num = INST_dut_reg_rslt.dump_VCD_defs(num);
  num = INST_dut_reg_x.dump_VCD_defs(num);
  num = INST_dut_reg_y.dump_VCD_defs(num);
  num = INST_dut_set_x.dump_VCD_defs(num);
  num = INST_dut_set_y.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_dut_reg_rslt___d9) != DEF_dut_reg_rslt___d9)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_reg_rslt___d9, 32u);
	backing.DEF_dut_reg_rslt___d9 = DEF_dut_reg_rslt___d9;
      }
      ++num;
      if ((backing.DEF_dut_reg_y__h289) != DEF_dut_reg_y__h289)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_reg_y__h289, 32u);
	backing.DEF_dut_reg_y__h289 = DEF_dut_reg_y__h289;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_dut_reg_rslt___d9, 32u);
      backing.DEF_dut_reg_rslt___d9 = DEF_dut_reg_rslt___d9;
      vcd_write_val(sim_hdl, num++, DEF_dut_reg_y__h289, 32u);
      backing.DEF_dut_reg_y__h289 = DEF_dut_reg_y__h289;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_dut_reg_rslt.dump_VCD(dt, backing.INST_dut_reg_rslt);
  INST_dut_reg_x.dump_VCD(dt, backing.INST_dut_reg_x);
  INST_dut_reg_y.dump_VCD(dt, backing.INST_dut_reg_y);
  INST_dut_set_x.dump_VCD(dt, backing.INST_dut_set_x);
  INST_dut_set_y.dump_VCD(dt, backing.INST_dut_set_y);
}
