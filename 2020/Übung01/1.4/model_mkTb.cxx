/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Mon Jan 15 18:11:18 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTb.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTb::MODEL_mkTb()
{
  mkTb_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTb()
{
  MODEL_mkTb *model = new MODEL_mkTb();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTb &INST_top = *((MOD_mkTb *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_NOT_uut_newOperands___d37;
	 tUInt8 DEF_INST_top_DEF_uut_newOperands__h250;
	 tUInt8 DEF_INST_top_DEF_uut_resultValid__h1471;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_uut_calculate;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_uut_calculate;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_checkMul;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_checkDiv;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_checkSub;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_checkAnd;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_checkOr;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_checkMul;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_checkDiv;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_checkSub;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_checkAnd;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_checkOr;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_printResults;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_printResults;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_endSim;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_endSim;
	 DEF_INST_top_DEF_uut_newOperands__h250 = INST_top.INST_uut_newOperands.METH_read();
	 INST_top.DEF_b__h539 = INST_top.INST_testState.METH_read();
	 DEF_INST_top_DEF_NOT_uut_newOperands___d37 = !DEF_INST_top_DEF_uut_newOperands__h250;
	 DEF_INST_top_DEF_CAN_FIRE_RL_checkAnd = DEF_INST_top_DEF_NOT_uut_newOperands___d37 && (INST_top.DEF_b__h539) == (tUInt8)8u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_checkAnd = DEF_INST_top_DEF_CAN_FIRE_RL_checkAnd;
	 DEF_INST_top_DEF_CAN_FIRE_RL_checkDiv = DEF_INST_top_DEF_NOT_uut_newOperands___d37 && (INST_top.DEF_b__h539) == (tUInt8)2u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_checkDiv = DEF_INST_top_DEF_CAN_FIRE_RL_checkDiv;
	 DEF_INST_top_DEF_CAN_FIRE_RL_checkMul = DEF_INST_top_DEF_NOT_uut_newOperands___d37 && (INST_top.DEF_b__h539) == (tUInt8)0u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_checkMul = DEF_INST_top_DEF_CAN_FIRE_RL_checkMul;
	 DEF_INST_top_DEF_CAN_FIRE_RL_checkOr = DEF_INST_top_DEF_NOT_uut_newOperands___d37 && (INST_top.DEF_b__h539) == (tUInt8)10u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_checkOr = DEF_INST_top_DEF_CAN_FIRE_RL_checkOr;
	 DEF_INST_top_DEF_CAN_FIRE_RL_checkSub = DEF_INST_top_DEF_NOT_uut_newOperands___d37 && (INST_top.DEF_b__h539) == (tUInt8)6u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_checkSub = DEF_INST_top_DEF_CAN_FIRE_RL_checkSub;
	 DEF_INST_top_DEF_CAN_FIRE_RL_endSim = (INST_top.DEF_b__h539) == (tUInt8)11u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_endSim = DEF_INST_top_DEF_CAN_FIRE_RL_endSim;
	 DEF_INST_top_DEF_uut_resultValid__h1471 = INST_top.INST_uut_resultValid.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_printResults = DEF_INST_top_DEF_uut_resultValid__h1471;
	 DEF_INST_top_DEF_WILL_FIRE_RL_printResults = ((((DEF_INST_top_DEF_CAN_FIRE_RL_printResults && !DEF_INST_top_DEF_WILL_FIRE_RL_checkOr) && !DEF_INST_top_DEF_WILL_FIRE_RL_checkAnd) && !DEF_INST_top_DEF_WILL_FIRE_RL_checkSub) && !DEF_INST_top_DEF_WILL_FIRE_RL_checkDiv) && !DEF_INST_top_DEF_WILL_FIRE_RL_checkMul;
	 DEF_INST_top_DEF_CAN_FIRE_RL_uut_calculate = DEF_INST_top_DEF_uut_newOperands__h250;
	 DEF_INST_top_DEF_WILL_FIRE_RL_uut_calculate = DEF_INST_top_DEF_CAN_FIRE_RL_uut_calculate;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_checkAnd)
	   INST_top.RL_checkAnd();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_checkDiv)
	   INST_top.RL_checkDiv();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_checkMul)
	   INST_top.RL_checkMul();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_checkOr)
	   INST_top.RL_checkOr();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_checkSub)
	   INST_top.RL_checkSub();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_endSim)
	   INST_top.RL_endSim();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_printResults)
	   INST_top.RL_printResults();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_uut_calculate)
	   INST_top.RL_uut_calculate();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_uut_newOperands.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_uut_resultValid.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_uut_operation.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_uut_opA.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_uut_opB.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_uut_result.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_testState.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTb::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTb_instance = new MOD_mkTb(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTb_instance->set_clk_0)("CLK");
}
void MODEL_mkTb::destroy_model()
{
  delete mkTb_instance;
  mkTb_instance = NULL;
}
void MODEL_mkTb::reset_model(bool asserted)
{
  (mkTb_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTb::get_instance()
{
  return mkTb_instance;
}

/* Fill in version numbers */
void MODEL_mkTb::get_version(char const **name, char const **build)
{
  *name = "2023.07";
  *build = "0eb551dc";
}

/* Get the model creation time */
time_t MODEL_mkTb::get_creation_time()
{
  
  /* Mon Jan 15 17:11:18 UTC 2024 */
  return 1705338678llu;
}

/* State dumping function */
void MODEL_mkTb::dump_state()
{
  (mkTb_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTb & mkTb_backing(tSimStateHdl simHdl)
{
  static MOD_mkTb *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTb(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTb::dump_VCD_defs()
{
  (mkTb_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTb::dump_VCD(tVCDDumpType dt)
{
  (mkTb_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTb_backing(sim_hdl));
}
