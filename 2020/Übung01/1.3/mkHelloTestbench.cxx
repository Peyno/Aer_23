/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Mon Jan 15 17:30:16 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkHelloTestbench.h"


/* String declarations */
static std::string const __str_literal_1("(%0d) Hello World!", 18u);
static std::string const __str_literal_3("LED an", 6u);
static std::string const __str_literal_2("LED aus", 7u);


/* Constructor */
MOD_mkHelloTestbench::MOD_mkHelloTestbench(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_counter(simHdl, "counter", this, 32u, 0u, (tUInt8)0u),
    INST_dut_counter(simHdl, "dut_counter", this, 25u, 0u, (tUInt8)0u),
    INST_dut_ledStatus(simHdl, "dut_ledStatus", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_ledLastCycle(simHdl, "ledLastCycle", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h162(12297829382473034410llu)
{
  symbol_count = 11u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkHelloTestbench::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h118", SYM_DEF, &DEF_b__h118, 25u);
  init_symbol(&symbols[1u], "b__h383", SYM_DEF, &DEF_b__h383, 32u);
  init_symbol(&symbols[2u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[3u], "dut_counter", SYM_MODULE, &INST_dut_counter);
  init_symbol(&symbols[4u], "dut_ledStatus", SYM_MODULE, &INST_dut_ledStatus);
  init_symbol(&symbols[5u], "ledLastCycle", SYM_MODULE, &INST_ledLastCycle);
  init_symbol(&symbols[6u], "RL_checkLedStatus", SYM_RULE);
  init_symbol(&symbols[7u], "RL_counterIncr", SYM_RULE);
  init_symbol(&symbols[8u], "RL_dut_count", SYM_RULE);
  init_symbol(&symbols[9u], "RL_dut_hellodisplay", SYM_RULE);
  init_symbol(&symbols[10u], "RL_endSimulation", SYM_RULE);
}


/* Rule actions */

void MOD_mkHelloTestbench::RL_dut_count()
{
  tUInt32 DEF_IF_dut_counter_EQ_0x1FFFFFF_THEN_0_ELSE_dut_co_ETC___d4;
  DEF_b__h118 = INST_dut_counter.METH_read();
  DEF_dut_counter_EQ_0x1FFFFFF___d2 = DEF_b__h118 == 33554431u;
  DEF_IF_dut_counter_EQ_0x1FFFFFF_THEN_0_ELSE_dut_co_ETC___d4 = DEF_dut_counter_EQ_0x1FFFFFF___d2 ? 0u : 33554431u & (DEF_b__h118 + 1u);
  INST_dut_counter.METH_write(DEF_IF_dut_counter_EQ_0x1FFFFFF_THEN_0_ELSE_dut_co_ETC___d4);
}

void MOD_mkHelloTestbench::RL_dut_hellodisplay()
{
  DEF_dut_ledStatus__h353 = INST_dut_ledStatus.METH_read();
  DEF_NOT_dut_ledStatus___d7 = !DEF_dut_ledStatus__h353;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h162 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,64", &__str_literal_1, DEF_v__h162);
  INST_dut_ledStatus.METH_write(DEF_NOT_dut_ledStatus___d7);
}

void MOD_mkHelloTestbench::RL_checkLedStatus()
{
  tUInt8 DEF_ledLastCycle_AND_NOT_dut_ledStatus___d9;
  tUInt8 DEF_NOT_ledLastCycle_0_AND_dut_ledStatus___d11;
  tUInt8 DEF_ledLastCycle__h347;
  DEF_dut_ledStatus__h353 = INST_dut_ledStatus.METH_read();
  DEF_ledLastCycle__h347 = INST_ledLastCycle.METH_read();
  DEF_NOT_ledLastCycle_0_AND_dut_ledStatus___d11 = !DEF_ledLastCycle__h347 && DEF_dut_ledStatus__h353;
  DEF_NOT_dut_ledStatus___d7 = !DEF_dut_ledStatus__h353;
  DEF_ledLastCycle_AND_NOT_dut_ledStatus___d9 = DEF_ledLastCycle__h347 && DEF_NOT_dut_ledStatus___d7;
  INST_ledLastCycle.METH_write(DEF_dut_ledStatus__h353);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_ledLastCycle_AND_NOT_dut_ledStatus___d9)
      dollar_display(sim_hdl, this, "s", &__str_literal_2);
    if (DEF_NOT_ledLastCycle_0_AND_dut_ledStatus___d11)
      dollar_display(sim_hdl, this, "s", &__str_literal_3);
  }
}

void MOD_mkHelloTestbench::RL_counterIncr()
{
  tUInt32 DEF_counter_2_PLUS_1___d13;
  DEF_b__h383 = INST_counter.METH_read();
  DEF_counter_2_PLUS_1___d13 = DEF_b__h383 + 1u;
  INST_counter.METH_write(DEF_counter_2_PLUS_1___d13);
}

void MOD_mkHelloTestbench::RL_endSimulation()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 1u);
}


/* Methods */


/* Reset routines */

void MOD_mkHelloTestbench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_ledLastCycle.reset_RST(ARG_rst_in);
  INST_dut_ledStatus.reset_RST(ARG_rst_in);
  INST_dut_counter.reset_RST(ARG_rst_in);
  INST_counter.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkHelloTestbench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkHelloTestbench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_counter.dump_state(indent + 2u);
  INST_dut_counter.dump_state(indent + 2u);
  INST_dut_ledStatus.dump_state(indent + 2u);
  INST_ledLastCycle.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkHelloTestbench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 11u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_dut_ledStatus___d7", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h118", 25u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h383", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_counter_EQ_0x1FFFFFF___d2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dut_ledStatus__h353", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h162", 64u);
  num = INST_counter.dump_VCD_defs(num);
  num = INST_dut_counter.dump_VCD_defs(num);
  num = INST_dut_ledStatus.dump_VCD_defs(num);
  num = INST_ledLastCycle.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkHelloTestbench::dump_VCD(tVCDDumpType dt,
				    unsigned int levels,
				    MOD_mkHelloTestbench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkHelloTestbench::vcd_defs(tVCDDumpType dt, MOD_mkHelloTestbench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 25u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_NOT_dut_ledStatus___d7) != DEF_NOT_dut_ledStatus___d7)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_dut_ledStatus___d7, 1u);
	backing.DEF_NOT_dut_ledStatus___d7 = DEF_NOT_dut_ledStatus___d7;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h118) != DEF_b__h118)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h118, 25u);
	backing.DEF_b__h118 = DEF_b__h118;
      }
      ++num;
      if ((backing.DEF_b__h383) != DEF_b__h383)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h383, 32u);
	backing.DEF_b__h383 = DEF_b__h383;
      }
      ++num;
      if ((backing.DEF_dut_counter_EQ_0x1FFFFFF___d2) != DEF_dut_counter_EQ_0x1FFFFFF___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_counter_EQ_0x1FFFFFF___d2, 1u);
	backing.DEF_dut_counter_EQ_0x1FFFFFF___d2 = DEF_dut_counter_EQ_0x1FFFFFF___d2;
      }
      ++num;
      if ((backing.DEF_dut_ledStatus__h353) != DEF_dut_ledStatus__h353)
      {
	vcd_write_val(sim_hdl, num, DEF_dut_ledStatus__h353, 1u);
	backing.DEF_dut_ledStatus__h353 = DEF_dut_ledStatus__h353;
      }
      ++num;
      if ((backing.DEF_v__h162) != DEF_v__h162)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h162, 64u);
	backing.DEF_v__h162 = DEF_v__h162;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_NOT_dut_ledStatus___d7, 1u);
      backing.DEF_NOT_dut_ledStatus___d7 = DEF_NOT_dut_ledStatus___d7;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h118, 25u);
      backing.DEF_b__h118 = DEF_b__h118;
      vcd_write_val(sim_hdl, num++, DEF_b__h383, 32u);
      backing.DEF_b__h383 = DEF_b__h383;
      vcd_write_val(sim_hdl, num++, DEF_dut_counter_EQ_0x1FFFFFF___d2, 1u);
      backing.DEF_dut_counter_EQ_0x1FFFFFF___d2 = DEF_dut_counter_EQ_0x1FFFFFF___d2;
      vcd_write_val(sim_hdl, num++, DEF_dut_ledStatus__h353, 1u);
      backing.DEF_dut_ledStatus__h353 = DEF_dut_ledStatus__h353;
      vcd_write_val(sim_hdl, num++, DEF_v__h162, 64u);
      backing.DEF_v__h162 = DEF_v__h162;
    }
}

void MOD_mkHelloTestbench::vcd_prims(tVCDDumpType dt, MOD_mkHelloTestbench &backing)
{
  INST_counter.dump_VCD(dt, backing.INST_counter);
  INST_dut_counter.dump_VCD(dt, backing.INST_dut_counter);
  INST_dut_ledStatus.dump_VCD(dt, backing.INST_dut_ledStatus);
  INST_ledLastCycle.dump_VCD(dt, backing.INST_ledLastCycle);
}
