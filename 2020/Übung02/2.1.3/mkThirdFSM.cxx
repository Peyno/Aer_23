/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Tue Jan 16 17:56:16 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkThirdFSM.h"


/* String declarations */
static std::string const __str_literal_1("(%0d) Iteration %d.", 19u);
static std::string const __str_literal_2("Error: \"Tb.bsv\", line 20, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_myFSM_action_f_init_l20c13]\n  and [RL_myFSM_action_l21c17, RL_myFSM_action_f_update_l20c13,\n  RL_myFSM_action_l23c13] ) fired in the same clock cycle.\n",
					 245u);
static std::string const __str_literal_4("Error: \"Tb.bsv\", line 20, column 35: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_myFSM_action_f_update_l20c13]\n  and [RL_myFSM_action_l23c13] ) fired in the same clock cycle.\n",
					 188u);
static std::string const __str_literal_3("Error: \"Tb.bsv\", line 21, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_myFSM_action_l21c17] and\n  [RL_myFSM_action_f_update_l20c13, RL_myFSM_action_l23c13] ) fired in the\n  same clock cycle.\n",
					 214u);


/* Constructor */
MOD_mkThirdFSM::MOD_mkThirdFSM(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_counter(simHdl, "counter", this, 12u, 0u, (tUInt8)0u),
    INST_i(simHdl, "i", this, 12u, 0u, (tUInt8)0u),
    INST_myFSM_abort(simHdl, "myFSM_abort", this, 1u, (tUInt8)0u),
    INST_myFSM_start_reg(simHdl, "myFSM_start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_myFSM_start_reg_1(simHdl, "myFSM_start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_myFSM_start_reg_2(simHdl, "myFSM_start_reg_2", this, 1u, (tUInt8)0u),
    INST_myFSM_start_wire(simHdl, "myFSM_start_wire", this, 1u, (tUInt8)0u),
    INST_myFSM_state_can_overlap(simHdl, "myFSM_state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_myFSM_state_fired(simHdl, "myFSM_state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_myFSM_state_fired_1(simHdl, "myFSM_state_fired_1", this, 1u, (tUInt8)0u),
    INST_myFSM_state_mkFSMstate(simHdl, "myFSM_state_mkFSMstate", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_myFSM_state_overlap_pw(simHdl, "myFSM_state_overlap_pw", this, 0u),
    INST_myFSM_state_set_pw(simHdl, "myFSM_state_set_pw", this, 0u),
    INST_pw(simHdl, "pw", this, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h13588(12297829382473034410llu)
{
  symbol_count = 37u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkThirdFSM::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[3u], "b__h138", SYM_DEF, &DEF_b__h138, 12u);
  init_symbol(&symbols[4u], "b__h5556", SYM_DEF, &DEF_b__h5556, 12u);
  init_symbol(&symbols[5u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[6u], "i", SYM_MODULE, &INST_i);
  init_symbol(&symbols[7u], "myFSM_abort", SYM_MODULE, &INST_myFSM_abort);
  init_symbol(&symbols[8u], "myFSM_start_reg", SYM_MODULE, &INST_myFSM_start_reg);
  init_symbol(&symbols[9u], "myFSM_start_reg_1", SYM_MODULE, &INST_myFSM_start_reg_1);
  init_symbol(&symbols[10u], "myFSM_start_reg_2", SYM_MODULE, &INST_myFSM_start_reg_2);
  init_symbol(&symbols[11u], "myFSM_start_wire", SYM_MODULE, &INST_myFSM_start_wire);
  init_symbol(&symbols[12u], "myFSM_state_can_overlap", SYM_MODULE, &INST_myFSM_state_can_overlap);
  init_symbol(&symbols[13u], "myFSM_state_fired", SYM_MODULE, &INST_myFSM_state_fired);
  init_symbol(&symbols[14u], "myFSM_state_fired_1", SYM_MODULE, &INST_myFSM_state_fired_1);
  init_symbol(&symbols[15u], "myFSM_state_mkFSMstate", SYM_MODULE, &INST_myFSM_state_mkFSMstate);
  init_symbol(&symbols[16u], "myFSM_state_overlap_pw", SYM_MODULE, &INST_myFSM_state_overlap_pw);
  init_symbol(&symbols[17u], "myFSM_state_set_pw", SYM_MODULE, &INST_myFSM_state_set_pw);
  init_symbol(&symbols[18u], "pw", SYM_MODULE, &INST_pw);
  init_symbol(&symbols[19u], "RL_count", SYM_RULE);
  init_symbol(&symbols[20u], "RL_myFSM_action_f_init_l20c13", SYM_RULE);
  init_symbol(&symbols[21u], "RL_myFSM_action_f_update_l20c13", SYM_RULE);
  init_symbol(&symbols[22u], "RL_myFSM_action_l21c17", SYM_RULE);
  init_symbol(&symbols[23u], "RL_myFSM_action_l23c13", SYM_RULE);
  init_symbol(&symbols[24u], "RL_myFSM_fsm_start", SYM_RULE);
  init_symbol(&symbols[25u], "RL_myFSM_idle_l19c9", SYM_RULE);
  init_symbol(&symbols[26u], "RL_myFSM_restart", SYM_RULE);
  init_symbol(&symbols[27u], "RL_myFSM_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[28u], "RL_myFSM_state_every", SYM_RULE);
  init_symbol(&symbols[29u], "RL_myFSM_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[30u], "RL_myFSM_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[31u], "RL_restCount", SYM_RULE);
  init_symbol(&symbols[32u], "RL_startFSM", SYM_RULE);
  init_symbol(&symbols[33u],
	      "WILL_FIRE_RL_myFSM_action_f_init_l20c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_myFSM_action_f_init_l20c13,
	      1u);
  init_symbol(&symbols[34u],
	      "WILL_FIRE_RL_myFSM_action_f_update_l20c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_myFSM_action_f_update_l20c13,
	      1u);
  init_symbol(&symbols[35u],
	      "WILL_FIRE_RL_myFSM_action_l21c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_myFSM_action_l21c17,
	      1u);
  init_symbol(&symbols[36u],
	      "WILL_FIRE_RL_myFSM_action_l23c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_myFSM_action_l23c13,
	      1u);
}


/* Rule actions */

void MOD_mkThirdFSM::RL_count()
{
  tUInt32 DEF_counter_PLUS_1___d3;
  DEF_b__h138 = INST_counter.METH_read();
  DEF_counter_PLUS_1___d3 = 4095u & (DEF_b__h138 + 1u);
  INST_counter.METH_write(DEF_counter_PLUS_1___d3);
}

void MOD_mkThirdFSM::RL_restCount()
{
  INST_counter.METH_write(0u);
  INST_pw.METH_wset();
}

void MOD_mkThirdFSM::RL_myFSM_start_reg__dreg_update()
{
  tUInt8 DEF_myFSM_start_reg_2_whas_AND_myFSM_start_reg_2_wget___d7;
  DEF_myFSM_start_reg_2_whas_AND_myFSM_start_reg_2_wget___d7 = INST_myFSM_start_reg_2.METH_whas() && INST_myFSM_start_reg_2.METH_wget();
  INST_myFSM_start_reg_1.METH_write(DEF_myFSM_start_reg_2_whas_AND_myFSM_start_reg_2_wget___d7);
}

void MOD_mkThirdFSM::RL_myFSM_state_handle_abort()
{
  INST_myFSM_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkThirdFSM::RL_myFSM_state_fired__dreg_update()
{
  tUInt8 DEF_myFSM_state_fired_1_whas__7_AND_myFSM_state_fi_ETC___d19;
  DEF_myFSM_state_fired_1_whas__7_AND_myFSM_state_fi_ETC___d19 = INST_myFSM_state_fired_1.METH_whas() && INST_myFSM_state_fired_1.METH_wget();
  INST_myFSM_state_fired.METH_write(DEF_myFSM_state_fired_1_whas__7_AND_myFSM_state_fi_ETC___d19);
}

void MOD_mkThirdFSM::RL_myFSM_state_every()
{
  tUInt8 DEF_myFSM_state_set_pw_whas__0_OR_NOT_myFSM_state__ETC___d25;
  tUInt8 DEF_myFSM_state_can_overlap__h2241;
  DEF_myFSM_state_can_overlap__h2241 = INST_myFSM_state_can_overlap.METH_read();
  DEF_myFSM_state_set_pw_whas__0_OR_NOT_myFSM_state__ETC___d25 = INST_myFSM_state_set_pw.METH_whas() || (!INST_myFSM_state_overlap_pw.METH_whas() && DEF_myFSM_state_can_overlap__h2241);
  INST_myFSM_state_can_overlap.METH_write(DEF_myFSM_state_set_pw_whas__0_OR_NOT_myFSM_state__ETC___d25);
}

void MOD_mkThirdFSM::RL_myFSM_restart()
{
  INST_myFSM_start_wire.METH_wset((tUInt8)1u);
  INST_myFSM_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkThirdFSM::RL_myFSM_action_f_init_l20c13()
{
  INST_myFSM_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_myFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_myFSM_state_set_pw.METH_wset();
  INST_i.METH_write(0u);
}

void MOD_mkThirdFSM::RL_myFSM_action_l21c17()
{
  tUInt32 DEF_unsigned_i_3___d52;
  DEF_b__h5556 = INST_i.METH_read();
  DEF_unsigned_i_3___d52 = DEF_b__h5556;
  INST_myFSM_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_myFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_myFSM_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h13588 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,64,12", &__str_literal_1, DEF_v__h13588, DEF_unsigned_i_3___d52);
}

void MOD_mkThirdFSM::RL_myFSM_action_f_update_l20c13()
{
  tUInt32 DEF_i_3_PLUS_1___d56;
  DEF_b__h5556 = INST_i.METH_read();
  DEF_i_3_PLUS_1___d56 = 4095u & (DEF_b__h5556 + 1u);
  INST_myFSM_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_myFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_myFSM_state_set_pw.METH_wset();
  INST_i.METH_write(DEF_i_3_PLUS_1___d56);
}

void MOD_mkThirdFSM::RL_myFSM_action_l23c13()
{
  INST_myFSM_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_myFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_myFSM_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 1u);
}

void MOD_mkThirdFSM::RL_myFSM_idle_l19c9()
{
  INST_myFSM_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_myFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_myFSM_state_set_pw.METH_wset();
}

void MOD_mkThirdFSM::RL_myFSM_fsm_start()
{
  INST_myFSM_start_wire.METH_wset((tUInt8)1u);
  INST_myFSM_start_reg_2.METH_wset((tUInt8)1u);
  INST_myFSM_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkThirdFSM::RL_startFSM()
{
  INST_myFSM_start_reg.METH_write((tUInt8)1u);
}

void MOD_mkThirdFSM::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_myFSM_action_f_init_l20c13 && ((DEF_WILL_FIRE_RL_myFSM_action_l21c17 || DEF_WILL_FIRE_RL_myFSM_action_f_update_l20c13) || DEF_WILL_FIRE_RL_myFSM_action_l23c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_2);
}

void MOD_mkThirdFSM::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_myFSM_action_l21c17 && (DEF_WILL_FIRE_RL_myFSM_action_f_update_l20c13 || DEF_WILL_FIRE_RL_myFSM_action_l23c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_3);
}

void MOD_mkThirdFSM::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_myFSM_action_f_update_l20c13 && DEF_WILL_FIRE_RL_myFSM_action_l23c13)
      dollar_error(sim_hdl, this, "s", &__str_literal_4);
}


/* Methods */


/* Reset routines */

void MOD_mkThirdFSM::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_myFSM_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_myFSM_state_fired.reset_RST(ARG_rst_in);
  INST_myFSM_state_can_overlap.reset_RST(ARG_rst_in);
  INST_myFSM_start_reg_1.reset_RST(ARG_rst_in);
  INST_myFSM_start_reg.reset_RST(ARG_rst_in);
  INST_i.reset_RST(ARG_rst_in);
  INST_counter.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkThirdFSM::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkThirdFSM::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_counter.dump_state(indent + 2u);
  INST_i.dump_state(indent + 2u);
  INST_myFSM_abort.dump_state(indent + 2u);
  INST_myFSM_start_reg.dump_state(indent + 2u);
  INST_myFSM_start_reg_1.dump_state(indent + 2u);
  INST_myFSM_start_reg_2.dump_state(indent + 2u);
  INST_myFSM_start_wire.dump_state(indent + 2u);
  INST_myFSM_state_can_overlap.dump_state(indent + 2u);
  INST_myFSM_state_fired.dump_state(indent + 2u);
  INST_myFSM_state_fired_1.dump_state(indent + 2u);
  INST_myFSM_state_mkFSMstate.dump_state(indent + 2u);
  INST_myFSM_state_overlap_pw.dump_state(indent + 2u);
  INST_myFSM_state_set_pw.dump_state(indent + 2u);
  INST_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkThirdFSM::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 22u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_myFSM_action_f_init_l20c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_myFSM_action_f_update_l20c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_myFSM_action_l21c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_myFSM_action_l23c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h138", 12u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h5556", 12u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h13588", 64u);
  num = INST_counter.dump_VCD_defs(num);
  num = INST_i.dump_VCD_defs(num);
  num = INST_myFSM_abort.dump_VCD_defs(num);
  num = INST_myFSM_start_reg.dump_VCD_defs(num);
  num = INST_myFSM_start_reg_1.dump_VCD_defs(num);
  num = INST_myFSM_start_reg_2.dump_VCD_defs(num);
  num = INST_myFSM_start_wire.dump_VCD_defs(num);
  num = INST_myFSM_state_can_overlap.dump_VCD_defs(num);
  num = INST_myFSM_state_fired.dump_VCD_defs(num);
  num = INST_myFSM_state_fired_1.dump_VCD_defs(num);
  num = INST_myFSM_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_myFSM_state_overlap_pw.dump_VCD_defs(num);
  num = INST_myFSM_state_set_pw.dump_VCD_defs(num);
  num = INST_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkThirdFSM::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkThirdFSM &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkThirdFSM::vcd_defs(tVCDDumpType dt, MOD_mkThirdFSM &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 12u);
    vcd_write_x(sim_hdl, num++, 12u);
    vcd_write_x(sim_hdl, num++, 64u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_myFSM_action_f_init_l20c13) != DEF_WILL_FIRE_RL_myFSM_action_f_init_l20c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_myFSM_action_f_init_l20c13, 1u);
	backing.DEF_WILL_FIRE_RL_myFSM_action_f_init_l20c13 = DEF_WILL_FIRE_RL_myFSM_action_f_init_l20c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_myFSM_action_f_update_l20c13) != DEF_WILL_FIRE_RL_myFSM_action_f_update_l20c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_myFSM_action_f_update_l20c13, 1u);
	backing.DEF_WILL_FIRE_RL_myFSM_action_f_update_l20c13 = DEF_WILL_FIRE_RL_myFSM_action_f_update_l20c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_myFSM_action_l21c17) != DEF_WILL_FIRE_RL_myFSM_action_l21c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_myFSM_action_l21c17, 1u);
	backing.DEF_WILL_FIRE_RL_myFSM_action_l21c17 = DEF_WILL_FIRE_RL_myFSM_action_l21c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_myFSM_action_l23c13) != DEF_WILL_FIRE_RL_myFSM_action_l23c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_myFSM_action_l23c13, 1u);
	backing.DEF_WILL_FIRE_RL_myFSM_action_l23c13 = DEF_WILL_FIRE_RL_myFSM_action_l23c13;
      }
      ++num;
      if ((backing.DEF_b__h138) != DEF_b__h138)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h138, 12u);
	backing.DEF_b__h138 = DEF_b__h138;
      }
      ++num;
      if ((backing.DEF_b__h5556) != DEF_b__h5556)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h5556, 12u);
	backing.DEF_b__h5556 = DEF_b__h5556;
      }
      ++num;
      if ((backing.DEF_v__h13588) != DEF_v__h13588)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h13588, 64u);
	backing.DEF_v__h13588 = DEF_v__h13588;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_myFSM_action_f_init_l20c13, 1u);
      backing.DEF_WILL_FIRE_RL_myFSM_action_f_init_l20c13 = DEF_WILL_FIRE_RL_myFSM_action_f_init_l20c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_myFSM_action_f_update_l20c13, 1u);
      backing.DEF_WILL_FIRE_RL_myFSM_action_f_update_l20c13 = DEF_WILL_FIRE_RL_myFSM_action_f_update_l20c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_myFSM_action_l21c17, 1u);
      backing.DEF_WILL_FIRE_RL_myFSM_action_l21c17 = DEF_WILL_FIRE_RL_myFSM_action_l21c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_myFSM_action_l23c13, 1u);
      backing.DEF_WILL_FIRE_RL_myFSM_action_l23c13 = DEF_WILL_FIRE_RL_myFSM_action_l23c13;
      vcd_write_val(sim_hdl, num++, DEF_b__h138, 12u);
      backing.DEF_b__h138 = DEF_b__h138;
      vcd_write_val(sim_hdl, num++, DEF_b__h5556, 12u);
      backing.DEF_b__h5556 = DEF_b__h5556;
      vcd_write_val(sim_hdl, num++, DEF_v__h13588, 64u);
      backing.DEF_v__h13588 = DEF_v__h13588;
    }
}

void MOD_mkThirdFSM::vcd_prims(tVCDDumpType dt, MOD_mkThirdFSM &backing)
{
  INST_counter.dump_VCD(dt, backing.INST_counter);
  INST_i.dump_VCD(dt, backing.INST_i);
  INST_myFSM_abort.dump_VCD(dt, backing.INST_myFSM_abort);
  INST_myFSM_start_reg.dump_VCD(dt, backing.INST_myFSM_start_reg);
  INST_myFSM_start_reg_1.dump_VCD(dt, backing.INST_myFSM_start_reg_1);
  INST_myFSM_start_reg_2.dump_VCD(dt, backing.INST_myFSM_start_reg_2);
  INST_myFSM_start_wire.dump_VCD(dt, backing.INST_myFSM_start_wire);
  INST_myFSM_state_can_overlap.dump_VCD(dt, backing.INST_myFSM_state_can_overlap);
  INST_myFSM_state_fired.dump_VCD(dt, backing.INST_myFSM_state_fired);
  INST_myFSM_state_fired_1.dump_VCD(dt, backing.INST_myFSM_state_fired_1);
  INST_myFSM_state_mkFSMstate.dump_VCD(dt, backing.INST_myFSM_state_mkFSMstate);
  INST_myFSM_state_overlap_pw.dump_VCD(dt, backing.INST_myFSM_state_overlap_pw);
  INST_myFSM_state_set_pw.dump_VCD(dt, backing.INST_myFSM_state_set_pw);
  INST_pw.dump_VCD(dt, backing.INST_pw);
}
