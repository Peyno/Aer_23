/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551dc)
 * 
 * On Mon Jan 15 21:45:36 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkFSM.h"


/* String declarations */
static std::string const __str_literal_5("(%0d) Ende", 10u);
static std::string const __str_literal_4("(%0d) Part one done", 19u);
static std::string const __str_literal_3("(%0d) Part one starts ", 22u);
static std::string const __str_literal_2("(%0d) Part two done", 19u);
static std::string const __str_literal_11("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_d_init_np] and\n  [RL_action_np, RL_action_l15c21, RL_action_l16c17] ) fired in the same clock\n  cycle.\n",
					  207u);
static std::string const __str_literal_12("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_np] and\n  [RL_action_l15c21, RL_action_l16c17] ) fired in the same clock cycle.\n",
					  184u);
static std::string const __str_literal_10("Error: \"Tb.bsv\", line 13, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l13c17] and\n  [RL_action_d_init_np, RL_action_np, RL_action_l15c21, RL_action_l16c17] )\n  fired in the same clock cycle.\n",
					  222u);
static std::string const __str_literal_13("Error: \"Tb.bsv\", line 15, column 21: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l15c21] and\n  [RL_action_l16c17] ) fired in the same clock cycle.\n",
					  167u);
static std::string const __str_literal_7("Error: \"Tb.bsv\", line 20, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l20c17,\n  RL_action_l21c21, RL_action_l23c22, RL_action_l24c17, RL_action_l13c17,\n  RL_action_d_init_np, RL_action_np, RL_action_l15c21, RL_action_l16c17,\n  RL_actionpar_start_l10c9] and [RL_action_l28c9] ) fired in the same clock\n  cycle.\n",
					 348u);
static std::string const __str_literal_6("Error: \"Tb.bsv\", line 20, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_r_init_l20c17] and\n  [RL_action_l21c21, RL_action_l23c22, RL_action_l24c17] ) fired in the same\n  clock cycle.\n",
					 212u);
static std::string const __str_literal_8("Error: \"Tb.bsv\", line 21, column 21: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l21c21] and\n  [RL_action_l23c22, RL_action_l24c17] ) fired in the same clock cycle.\n",
					 185u);
static std::string const __str_literal_9("Error: \"Tb.bsv\", line 23, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l23c22] and\n  [RL_action_l24c17] ) fired in the same clock cycle.\n",
					 167u);
static std::string const __str_literal_1("Nachricht 2: ", 13u);


/* Constructor */
MOD_mkFSM::MOD_mkFSM(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_bol(simHdl, "bol", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_par_blocks_1_abort(simHdl, "par_blocks_1_abort", this, 1u, (tUInt8)0u),
    INST_par_blocks_1_jj_repeat_count(simHdl,
				      "par_blocks_1_jj_repeat_count",
				      this,
				      10u,
				      1u,
				      (tUInt8)0u),
    INST_par_blocks_1_start_reg(simHdl, "par_blocks_1_start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_par_blocks_1_start_reg_1(simHdl, "par_blocks_1_start_reg_1", this, 1u, (tUInt8)0u),
    INST_par_blocks_1_start_wire(simHdl, "par_blocks_1_start_wire", this, 1u, (tUInt8)0u),
    INST_par_blocks_1_state_can_overlap(simHdl,
					"par_blocks_1_state_can_overlap",
					this,
					1u,
					(tUInt8)1u,
					(tUInt8)0u),
    INST_par_blocks_1_state_fired(simHdl, "par_blocks_1_state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_par_blocks_1_state_fired_1(simHdl, "par_blocks_1_state_fired_1", this, 1u, (tUInt8)0u),
    INST_par_blocks_1_state_mkFSMstate(simHdl,
				       "par_blocks_1_state_mkFSMstate",
				       this,
				       4u,
				       (tUInt8)0u,
				       (tUInt8)0u),
    INST_par_blocks_1_state_overlap_pw(simHdl, "par_blocks_1_state_overlap_pw", this, 0u),
    INST_par_blocks_1_state_set_pw(simHdl, "par_blocks_1_state_set_pw", this, 0u),
    INST_par_blocks_abort(simHdl, "par_blocks_abort", this, 1u, (tUInt8)0u),
    INST_par_blocks_jj_delay_count(simHdl,
				   "par_blocks_jj_delay_count",
				   this,
				   7u,
				   (tUInt8)0u,
				   (tUInt8)0u),
    INST_par_blocks_start_reg(simHdl, "par_blocks_start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_par_blocks_start_reg_1(simHdl, "par_blocks_start_reg_1", this, 1u, (tUInt8)0u),
    INST_par_blocks_start_wire(simHdl, "par_blocks_start_wire", this, 1u, (tUInt8)0u),
    INST_par_blocks_state_can_overlap(simHdl,
				      "par_blocks_state_can_overlap",
				      this,
				      1u,
				      (tUInt8)1u,
				      (tUInt8)0u),
    INST_par_blocks_state_fired(simHdl, "par_blocks_state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_par_blocks_state_fired_1(simHdl, "par_blocks_state_fired_1", this, 1u, (tUInt8)0u),
    INST_par_blocks_state_mkFSMstate(simHdl,
				     "par_blocks_state_mkFSMstate",
				     this,
				     3u,
				     (tUInt8)0u,
				     (tUInt8)0u),
    INST_par_blocks_state_overlap_pw(simHdl, "par_blocks_state_overlap_pw", this, 0u),
    INST_par_blocks_state_set_pw(simHdl, "par_blocks_state_set_pw", this, 0u),
    INST_par_running(simHdl, "par_running", this, 1u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h50201(12297829382473034410llu),
    DEF_v__h49551(12297829382473034410llu),
    DEF_v__h48488(12297829382473034410llu),
    DEF_v__h48190(12297829382473034410llu),
    DEF_v__h47623(12297829382473034410llu)
{
  symbol_count = 89u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkFSM::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_15", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_16", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_17", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_19", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_20", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_21", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_22", SYM_RULE);
  init_symbol(&symbols[7u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[8u], "bol", SYM_MODULE, &INST_bol);
  init_symbol(&symbols[9u], "par_blocks_1_abort", SYM_MODULE, &INST_par_blocks_1_abort);
  init_symbol(&symbols[10u],
	      "par_blocks_1_jj_repeat_count",
	      SYM_MODULE,
	      &INST_par_blocks_1_jj_repeat_count);
  init_symbol(&symbols[11u], "par_blocks_1_start_reg", SYM_MODULE, &INST_par_blocks_1_start_reg);
  init_symbol(&symbols[12u], "par_blocks_1_start_reg_1", SYM_MODULE, &INST_par_blocks_1_start_reg_1);
  init_symbol(&symbols[13u], "par_blocks_1_start_wire", SYM_MODULE, &INST_par_blocks_1_start_wire);
  init_symbol(&symbols[14u],
	      "par_blocks_1_state_can_overlap",
	      SYM_MODULE,
	      &INST_par_blocks_1_state_can_overlap);
  init_symbol(&symbols[15u],
	      "par_blocks_1_state_can_overlap__h18793",
	      SYM_DEF,
	      &DEF_par_blocks_1_state_can_overlap__h18793,
	      1u);
  init_symbol(&symbols[16u], "par_blocks_1_state_fired", SYM_MODULE, &INST_par_blocks_1_state_fired);
  init_symbol(&symbols[17u],
	      "par_blocks_1_state_fired_1",
	      SYM_MODULE,
	      &INST_par_blocks_1_state_fired_1);
  init_symbol(&symbols[18u],
	      "par_blocks_1_state_mkFSMstate",
	      SYM_MODULE,
	      &INST_par_blocks_1_state_mkFSMstate);
  init_symbol(&symbols[19u],
	      "par_blocks_1_state_overlap_pw",
	      SYM_MODULE,
	      &INST_par_blocks_1_state_overlap_pw);
  init_symbol(&symbols[20u],
	      "par_blocks_1_state_set_pw",
	      SYM_MODULE,
	      &INST_par_blocks_1_state_set_pw);
  init_symbol(&symbols[21u], "par_blocks_abort", SYM_MODULE, &INST_par_blocks_abort);
  init_symbol(&symbols[22u],
	      "par_blocks_jj_delay_count",
	      SYM_MODULE,
	      &INST_par_blocks_jj_delay_count);
  init_symbol(&symbols[23u], "par_blocks_start_reg", SYM_MODULE, &INST_par_blocks_start_reg);
  init_symbol(&symbols[24u], "par_blocks_start_reg_1", SYM_MODULE, &INST_par_blocks_start_reg_1);
  init_symbol(&symbols[25u], "par_blocks_start_wire", SYM_MODULE, &INST_par_blocks_start_wire);
  init_symbol(&symbols[26u],
	      "par_blocks_state_can_overlap",
	      SYM_MODULE,
	      &INST_par_blocks_state_can_overlap);
  init_symbol(&symbols[27u], "par_blocks_state_fired", SYM_MODULE, &INST_par_blocks_state_fired);
  init_symbol(&symbols[28u], "par_blocks_state_fired_1", SYM_MODULE, &INST_par_blocks_state_fired_1);
  init_symbol(&symbols[29u],
	      "par_blocks_state_mkFSMstate",
	      SYM_MODULE,
	      &INST_par_blocks_state_mkFSMstate);
  init_symbol(&symbols[30u],
	      "par_blocks_state_overlap_pw",
	      SYM_MODULE,
	      &INST_par_blocks_state_overlap_pw);
  init_symbol(&symbols[31u], "par_blocks_state_set_pw", SYM_MODULE, &INST_par_blocks_state_set_pw);
  init_symbol(&symbols[32u], "par_running", SYM_MODULE, &INST_par_running);
  init_symbol(&symbols[33u], "RL_action_d_init_np", SYM_RULE);
  init_symbol(&symbols[34u], "RL_action_l13c17", SYM_RULE);
  init_symbol(&symbols[35u], "RL_action_l15c21", SYM_RULE);
  init_symbol(&symbols[36u], "RL_action_l16c17", SYM_RULE);
  init_symbol(&symbols[37u], "RL_action_l21c21", SYM_RULE);
  init_symbol(&symbols[38u], "RL_action_l23c22", SYM_RULE);
  init_symbol(&symbols[39u], "RL_action_l24c17", SYM_RULE);
  init_symbol(&symbols[40u], "RL_action_l28c9", SYM_RULE);
  init_symbol(&symbols[41u], "RL_action_np", SYM_RULE);
  init_symbol(&symbols[42u], "RL_action_ovlp_r_update_l20c17", SYM_RULE);
  init_symbol(&symbols[43u], "RL_action_r_init_l20c17", SYM_RULE);
  init_symbol(&symbols[44u], "RL_actionpar_run_l10c9", SYM_RULE);
  init_symbol(&symbols[45u], "RL_actionpar_start_l10c9", SYM_RULE);
  init_symbol(&symbols[46u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[47u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[48u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[49u], "RL_idle_l11c13", SYM_RULE);
  init_symbol(&symbols[50u], "RL_idle_l18c13", SYM_RULE);
  init_symbol(&symbols[51u], "RL_idle_l9c9", SYM_RULE);
  init_symbol(&symbols[52u], "RL_par_blocks_1_restart", SYM_RULE);
  init_symbol(&symbols[53u], "RL_par_blocks_1_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[54u], "RL_par_blocks_1_state_every", SYM_RULE);
  init_symbol(&symbols[55u], "RL_par_blocks_1_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[56u], "RL_par_blocks_1_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[57u], "RL_par_blocks_restart", SYM_RULE);
  init_symbol(&symbols[58u], "RL_par_blocks_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[59u], "RL_par_blocks_state_every", SYM_RULE);
  init_symbol(&symbols[60u], "RL_par_blocks_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[61u], "RL_par_blocks_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[62u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[63u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[64u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[65u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[66u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[67u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[68u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[69u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[70u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[71u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[72u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[73u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[74u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[75u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[76u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[77u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[78u],
	      "WILL_FIRE_RL_action_d_init_np",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_d_init_np,
	      1u);
  init_symbol(&symbols[79u],
	      "WILL_FIRE_RL_action_l13c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l13c17,
	      1u);
  init_symbol(&symbols[80u],
	      "WILL_FIRE_RL_action_l15c21",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l15c21,
	      1u);
  init_symbol(&symbols[81u],
	      "WILL_FIRE_RL_action_l16c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l16c17,
	      1u);
  init_symbol(&symbols[82u],
	      "WILL_FIRE_RL_action_l21c21",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l21c21,
	      1u);
  init_symbol(&symbols[83u],
	      "WILL_FIRE_RL_action_l23c22",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l23c22,
	      1u);
  init_symbol(&symbols[84u],
	      "WILL_FIRE_RL_action_l24c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l24c17,
	      1u);
  init_symbol(&symbols[85u],
	      "WILL_FIRE_RL_action_l28c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l28c9,
	      1u);
  init_symbol(&symbols[86u], "WILL_FIRE_RL_action_np", SYM_DEF, &DEF_WILL_FIRE_RL_action_np, 1u);
  init_symbol(&symbols[87u],
	      "WILL_FIRE_RL_action_r_init_l20c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_r_init_l20c17,
	      1u);
  init_symbol(&symbols[88u],
	      "WILL_FIRE_RL_actionpar_start_l10c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_actionpar_start_l10c9,
	      1u);
}


/* Rule actions */

void MOD_mkFSM::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas_AND_start_reg_2_wget___d3;
  DEF_start_reg_2_whas_AND_start_reg_2_wget___d3 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas_AND_start_reg_2_wget___d3);
}

void MOD_mkFSM::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkFSM::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15;
  DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15);
}

void MOD_mkFSM::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21;
  tUInt8 DEF_state_can_overlap__h1853;
  DEF_state_can_overlap__h1853 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h1853);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21);
}

void MOD_mkFSM::RL_par_blocks_start_reg__dreg_update()
{
  tUInt8 DEF_par_blocks_start_reg_1_whas__2_AND_par_blocks__ETC___d24;
  DEF_par_blocks_start_reg_1_whas__2_AND_par_blocks__ETC___d24 = INST_par_blocks_start_reg_1.METH_whas() && INST_par_blocks_start_reg_1.METH_wget();
  INST_par_blocks_start_reg.METH_write(DEF_par_blocks_start_reg_1_whas__2_AND_par_blocks__ETC___d24);
}

void MOD_mkFSM::RL_par_blocks_state_handle_abort()
{
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkFSM::RL_par_blocks_state_fired__dreg_update()
{
  tUInt8 DEF_par_blocks_state_fired_1_whas__4_AND_par_block_ETC___d36;
  DEF_par_blocks_state_fired_1_whas__4_AND_par_block_ETC___d36 = INST_par_blocks_state_fired_1.METH_whas() && INST_par_blocks_state_fired_1.METH_wget();
  INST_par_blocks_state_fired.METH_write(DEF_par_blocks_state_fired_1_whas__4_AND_par_block_ETC___d36);
}

void MOD_mkFSM::RL_par_blocks_state_every()
{
  tUInt8 DEF_par_blocks_state_set_pw_whas__7_OR_NOT_par_blo_ETC___d42;
  tUInt8 DEF_par_blocks_state_can_overlap__h4475;
  DEF_par_blocks_state_can_overlap__h4475 = INST_par_blocks_state_can_overlap.METH_read();
  DEF_par_blocks_state_set_pw_whas__7_OR_NOT_par_blo_ETC___d42 = INST_par_blocks_state_set_pw.METH_whas() || (!INST_par_blocks_state_overlap_pw.METH_whas() && DEF_par_blocks_state_can_overlap__h4475);
  INST_par_blocks_state_can_overlap.METH_write(DEF_par_blocks_state_set_pw_whas__7_OR_NOT_par_blo_ETC___d42);
}

void MOD_mkFSM::RL_par_blocks_restart()
{
  INST_par_blocks_start_wire.METH_wset((tUInt8)1u);
  INST_par_blocks_start_reg_1.METH_wset((tUInt8)1u);
}

void MOD_mkFSM::RL_par_blocks_1_start_reg__dreg_update()
{
  tUInt8 DEF_par_blocks_1_start_reg_1_whas__1_AND_par_block_ETC___d53;
  DEF_par_blocks_1_start_reg_1_whas__1_AND_par_block_ETC___d53 = INST_par_blocks_1_start_reg_1.METH_whas() && INST_par_blocks_1_start_reg_1.METH_wget();
  INST_par_blocks_1_start_reg.METH_write(DEF_par_blocks_1_start_reg_1_whas__1_AND_par_block_ETC___d53);
}

void MOD_mkFSM::RL_par_blocks_1_state_handle_abort()
{
  INST_par_blocks_1_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkFSM::RL_par_blocks_1_state_fired__dreg_update()
{
  tUInt8 DEF_par_blocks_1_state_fired_1_whas__3_AND_par_blo_ETC___d65;
  DEF_par_blocks_1_state_fired_1_whas__3_AND_par_blo_ETC___d65 = INST_par_blocks_1_state_fired_1.METH_whas() && INST_par_blocks_1_state_fired_1.METH_wget();
  INST_par_blocks_1_state_fired.METH_write(DEF_par_blocks_1_state_fired_1_whas__3_AND_par_blo_ETC___d65);
}

void MOD_mkFSM::RL_par_blocks_1_state_every()
{
  tUInt8 DEF_par_blocks_1_state_set_pw_whas__6_OR_NOT_par_b_ETC___d71;
  DEF_par_blocks_1_state_can_overlap__h18793 = INST_par_blocks_1_state_can_overlap.METH_read();
  DEF_par_blocks_1_state_set_pw_whas__6_OR_NOT_par_b_ETC___d71 = INST_par_blocks_1_state_set_pw.METH_whas() || (!INST_par_blocks_1_state_overlap_pw.METH_whas() && DEF_par_blocks_1_state_can_overlap__h18793);
  INST_par_blocks_1_state_can_overlap.METH_write(DEF_par_blocks_1_state_set_pw_whas__6_OR_NOT_par_b_ETC___d71);
}

void MOD_mkFSM::RL_par_blocks_1_restart()
{
  INST_par_blocks_1_start_wire.METH_wset((tUInt8)1u);
  INST_par_blocks_1_start_reg_1.METH_wset((tUInt8)1u);
}

void MOD_mkFSM::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkFSM::RL_action_r_init_l20c17()
{
  INST_par_blocks_1_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_par_blocks_1_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_1_state_set_pw.METH_wset();
  INST_par_blocks_1_jj_repeat_count.METH_write(1u);
}

void MOD_mkFSM::RL_action_l21c21()
{
  INST_par_blocks_1_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_par_blocks_1_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_1_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h47623 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,64", &__str_literal_1, DEF_v__h47623);
}

void MOD_mkFSM::RL_action_l23c22()
{
  INST_par_blocks_1_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_par_blocks_1_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_1_state_set_pw.METH_wset();
}

void MOD_mkFSM::RL_action_l24c17()
{
  INST_par_blocks_1_state_mkFSMstate.METH_write((tUInt8)6u);
  INST_par_blocks_1_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_1_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h48190 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,64", &__str_literal_2, DEF_v__h48190);
}

void MOD_mkFSM::RL_action_l13c17()
{
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_par_blocks_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h48488 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,64", &__str_literal_3, DEF_v__h48488);
}

void MOD_mkFSM::RL_action_d_init_np()
{
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_par_blocks_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_state_set_pw.METH_wset();
  INST_par_blocks_jj_delay_count.METH_write((tUInt8)0u);
}

void MOD_mkFSM::RL_action_np()
{
  tUInt8 DEF_x__h48975;
  DEF_par_blocks_jj_delay_count_read____d142 = INST_par_blocks_jj_delay_count.METH_read();
  DEF_x__h48975 = (tUInt8)127u & (DEF_par_blocks_jj_delay_count_read____d142 + (tUInt8)1u);
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_par_blocks_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_state_set_pw.METH_wset();
  INST_par_blocks_jj_delay_count.METH_write(DEF_x__h48975);
}

void MOD_mkFSM::RL_action_l15c21()
{
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_par_blocks_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_state_set_pw.METH_wset();
  INST_bol.METH_write((tUInt8)1u);
}

void MOD_mkFSM::RL_action_l16c17()
{
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_par_blocks_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h49551 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,64", &__str_literal_4, DEF_v__h49551);
}

void MOD_mkFSM::RL_actionpar_start_l10c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_par_blocks_1_start_wire.METH_wset((tUInt8)1u);
  INST_par_blocks_1_start_reg_1.METH_wset((tUInt8)1u);
  INST_par_blocks_start_wire.METH_wset((tUInt8)1u);
  INST_par_blocks_start_reg_1.METH_wset((tUInt8)1u);
  INST_par_running.METH_wset((tUInt8)1u);
}

void MOD_mkFSM::RL_action_l28c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h50201 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,64", &__str_literal_5, DEF_v__h50201);
}

void MOD_mkFSM::RL_action_ovlp_r_update_l20c17()
{
  tUInt32 DEF_x__h50433;
  tUInt32 DEF_IF_par_blocks_1_jj_repeat_count_read__1_BIT_9__ETC___d186;
  DEF_par_blocks_1_jj_repeat_count_read____d91 = INST_par_blocks_1_jj_repeat_count.METH_read();
  DEF_x__h50433 = 1023u & ((((tUInt32)(511u & DEF_par_blocks_1_jj_repeat_count_read____d91)) << 1u) | (tUInt32)((tUInt8)0u));
  DEF_IF_par_blocks_1_jj_repeat_count_read__1_BIT_9__ETC___d186 = (tUInt8)(DEF_par_blocks_1_jj_repeat_count_read____d91 >> 9u) ? 1u : DEF_x__h50433;
  INST_par_blocks_1_state_overlap_pw.METH_wset();
  INST_par_blocks_1_jj_repeat_count.METH_write(DEF_IF_par_blocks_1_jj_repeat_count_read__1_BIT_9__ETC___d186);
}

void MOD_mkFSM::RL_actionpar_run_l10c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_par_running.METH_wset((tUInt8)1u);
}

void MOD_mkFSM::RL_idle_l9c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkFSM::RL_idle_l18c13()
{
  INST_par_blocks_1_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_par_blocks_1_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_1_state_set_pw.METH_wset();
}

void MOD_mkFSM::RL_idle_l11c13()
{
  INST_par_blocks_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_par_blocks_state_fired_1.METH_wset((tUInt8)1u);
  INST_par_blocks_state_set_pw.METH_wset();
}

void MOD_mkFSM::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkFSM::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkFSM::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkFSM::__me_check_15()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_WILL_FIRE_RL_action_r_init_l20c17 && ((DEF_WILL_FIRE_RL_action_l21c21 || DEF_WILL_FIRE_RL_action_l23c22) || DEF_WILL_FIRE_RL_action_l24c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
    if ((((((((((DEF_WILL_FIRE_RL_action_r_init_l20c17 || DEF_WILL_FIRE_RL_action_l21c21) || DEF_WILL_FIRE_RL_action_l23c22) || DEF_WILL_FIRE_RL_action_l24c17) || DEF_WILL_FIRE_RL_action_l13c17) || DEF_WILL_FIRE_RL_action_d_init_np) || DEF_WILL_FIRE_RL_action_np) || DEF_WILL_FIRE_RL_action_l15c21) || DEF_WILL_FIRE_RL_action_l16c17) || DEF_WILL_FIRE_RL_actionpar_start_l10c9) && DEF_WILL_FIRE_RL_action_l28c9)
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
  }
}

void MOD_mkFSM::__me_check_16()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l21c21 && (DEF_WILL_FIRE_RL_action_l23c22 || DEF_WILL_FIRE_RL_action_l24c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
}

void MOD_mkFSM::__me_check_17()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l23c22 && DEF_WILL_FIRE_RL_action_l24c17)
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
}

void MOD_mkFSM::__me_check_19()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l13c17 && (((DEF_WILL_FIRE_RL_action_d_init_np || DEF_WILL_FIRE_RL_action_np) || DEF_WILL_FIRE_RL_action_l15c21) || DEF_WILL_FIRE_RL_action_l16c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
}

void MOD_mkFSM::__me_check_20()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_d_init_np && ((DEF_WILL_FIRE_RL_action_np || DEF_WILL_FIRE_RL_action_l15c21) || DEF_WILL_FIRE_RL_action_l16c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
}

void MOD_mkFSM::__me_check_21()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_np && (DEF_WILL_FIRE_RL_action_l15c21 || DEF_WILL_FIRE_RL_action_l16c17))
      dollar_error(sim_hdl, this, "s", &__str_literal_12);
}

void MOD_mkFSM::__me_check_22()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l15c21 && DEF_WILL_FIRE_RL_action_l16c17)
      dollar_error(sim_hdl, this, "s", &__str_literal_13);
}


/* Methods */


/* Reset routines */

void MOD_mkFSM::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_par_blocks_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_par_blocks_state_fired.reset_RST(ARG_rst_in);
  INST_par_blocks_state_can_overlap.reset_RST(ARG_rst_in);
  INST_par_blocks_start_reg.reset_RST(ARG_rst_in);
  INST_par_blocks_jj_delay_count.reset_RST(ARG_rst_in);
  INST_par_blocks_1_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_par_blocks_1_state_fired.reset_RST(ARG_rst_in);
  INST_par_blocks_1_state_can_overlap.reset_RST(ARG_rst_in);
  INST_par_blocks_1_start_reg.reset_RST(ARG_rst_in);
  INST_par_blocks_1_jj_repeat_count.reset_RST(ARG_rst_in);
  INST_bol.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkFSM::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkFSM::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_bol.dump_state(indent + 2u);
  INST_par_blocks_1_abort.dump_state(indent + 2u);
  INST_par_blocks_1_jj_repeat_count.dump_state(indent + 2u);
  INST_par_blocks_1_start_reg.dump_state(indent + 2u);
  INST_par_blocks_1_start_reg_1.dump_state(indent + 2u);
  INST_par_blocks_1_start_wire.dump_state(indent + 2u);
  INST_par_blocks_1_state_can_overlap.dump_state(indent + 2u);
  INST_par_blocks_1_state_fired.dump_state(indent + 2u);
  INST_par_blocks_1_state_fired_1.dump_state(indent + 2u);
  INST_par_blocks_1_state_mkFSMstate.dump_state(indent + 2u);
  INST_par_blocks_1_state_overlap_pw.dump_state(indent + 2u);
  INST_par_blocks_1_state_set_pw.dump_state(indent + 2u);
  INST_par_blocks_abort.dump_state(indent + 2u);
  INST_par_blocks_jj_delay_count.dump_state(indent + 2u);
  INST_par_blocks_start_reg.dump_state(indent + 2u);
  INST_par_blocks_start_reg_1.dump_state(indent + 2u);
  INST_par_blocks_start_wire.dump_state(indent + 2u);
  INST_par_blocks_state_can_overlap.dump_state(indent + 2u);
  INST_par_blocks_state_fired.dump_state(indent + 2u);
  INST_par_blocks_state_fired_1.dump_state(indent + 2u);
  INST_par_blocks_state_mkFSMstate.dump_state(indent + 2u);
  INST_par_blocks_state_overlap_pw.dump_state(indent + 2u);
  INST_par_blocks_state_set_pw.dump_state(indent + 2u);
  INST_par_running.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkFSM::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 56u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_d_init_np", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l13c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l15c21", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l16c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l21c21", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l23c22", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l24c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l28c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_np", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_r_init_l20c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_actionpar_start_l10c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "par_blocks_1_jj_repeat_count_read____d91", 10u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "par_blocks_1_state_can_overlap__h18793", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "par_blocks_jj_delay_count_read____d142", 7u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h47623", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h48190", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h48488", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h49551", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h50201", 64u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_bol.dump_VCD_defs(num);
  num = INST_par_blocks_1_abort.dump_VCD_defs(num);
  num = INST_par_blocks_1_jj_repeat_count.dump_VCD_defs(num);
  num = INST_par_blocks_1_start_reg.dump_VCD_defs(num);
  num = INST_par_blocks_1_start_reg_1.dump_VCD_defs(num);
  num = INST_par_blocks_1_start_wire.dump_VCD_defs(num);
  num = INST_par_blocks_1_state_can_overlap.dump_VCD_defs(num);
  num = INST_par_blocks_1_state_fired.dump_VCD_defs(num);
  num = INST_par_blocks_1_state_fired_1.dump_VCD_defs(num);
  num = INST_par_blocks_1_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_par_blocks_1_state_overlap_pw.dump_VCD_defs(num);
  num = INST_par_blocks_1_state_set_pw.dump_VCD_defs(num);
  num = INST_par_blocks_abort.dump_VCD_defs(num);
  num = INST_par_blocks_jj_delay_count.dump_VCD_defs(num);
  num = INST_par_blocks_start_reg.dump_VCD_defs(num);
  num = INST_par_blocks_start_reg_1.dump_VCD_defs(num);
  num = INST_par_blocks_start_wire.dump_VCD_defs(num);
  num = INST_par_blocks_state_can_overlap.dump_VCD_defs(num);
  num = INST_par_blocks_state_fired.dump_VCD_defs(num);
  num = INST_par_blocks_state_fired_1.dump_VCD_defs(num);
  num = INST_par_blocks_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_par_blocks_state_overlap_pw.dump_VCD_defs(num);
  num = INST_par_blocks_state_set_pw.dump_VCD_defs(num);
  num = INST_par_running.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkFSM::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFSM &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkFSM::vcd_defs(tVCDDumpType dt, MOD_mkFSM &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 10u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 7u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_d_init_np) != DEF_WILL_FIRE_RL_action_d_init_np)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_d_init_np, 1u);
	backing.DEF_WILL_FIRE_RL_action_d_init_np = DEF_WILL_FIRE_RL_action_d_init_np;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l13c17) != DEF_WILL_FIRE_RL_action_l13c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l13c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_l13c17 = DEF_WILL_FIRE_RL_action_l13c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l15c21) != DEF_WILL_FIRE_RL_action_l15c21)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l15c21, 1u);
	backing.DEF_WILL_FIRE_RL_action_l15c21 = DEF_WILL_FIRE_RL_action_l15c21;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l16c17) != DEF_WILL_FIRE_RL_action_l16c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l16c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_l16c17 = DEF_WILL_FIRE_RL_action_l16c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l21c21) != DEF_WILL_FIRE_RL_action_l21c21)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l21c21, 1u);
	backing.DEF_WILL_FIRE_RL_action_l21c21 = DEF_WILL_FIRE_RL_action_l21c21;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l23c22) != DEF_WILL_FIRE_RL_action_l23c22)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l23c22, 1u);
	backing.DEF_WILL_FIRE_RL_action_l23c22 = DEF_WILL_FIRE_RL_action_l23c22;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l24c17) != DEF_WILL_FIRE_RL_action_l24c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l24c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_l24c17 = DEF_WILL_FIRE_RL_action_l24c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l28c9) != DEF_WILL_FIRE_RL_action_l28c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l28c9, 1u);
	backing.DEF_WILL_FIRE_RL_action_l28c9 = DEF_WILL_FIRE_RL_action_l28c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_np) != DEF_WILL_FIRE_RL_action_np)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_np, 1u);
	backing.DEF_WILL_FIRE_RL_action_np = DEF_WILL_FIRE_RL_action_np;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_r_init_l20c17) != DEF_WILL_FIRE_RL_action_r_init_l20c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_r_init_l20c17, 1u);
	backing.DEF_WILL_FIRE_RL_action_r_init_l20c17 = DEF_WILL_FIRE_RL_action_r_init_l20c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_actionpar_start_l10c9) != DEF_WILL_FIRE_RL_actionpar_start_l10c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_actionpar_start_l10c9, 1u);
	backing.DEF_WILL_FIRE_RL_actionpar_start_l10c9 = DEF_WILL_FIRE_RL_actionpar_start_l10c9;
      }
      ++num;
      if ((backing.DEF_par_blocks_1_jj_repeat_count_read____d91) != DEF_par_blocks_1_jj_repeat_count_read____d91)
      {
	vcd_write_val(sim_hdl, num, DEF_par_blocks_1_jj_repeat_count_read____d91, 10u);
	backing.DEF_par_blocks_1_jj_repeat_count_read____d91 = DEF_par_blocks_1_jj_repeat_count_read____d91;
      }
      ++num;
      if ((backing.DEF_par_blocks_1_state_can_overlap__h18793) != DEF_par_blocks_1_state_can_overlap__h18793)
      {
	vcd_write_val(sim_hdl, num, DEF_par_blocks_1_state_can_overlap__h18793, 1u);
	backing.DEF_par_blocks_1_state_can_overlap__h18793 = DEF_par_blocks_1_state_can_overlap__h18793;
      }
      ++num;
      if ((backing.DEF_par_blocks_jj_delay_count_read____d142) != DEF_par_blocks_jj_delay_count_read____d142)
      {
	vcd_write_val(sim_hdl, num, DEF_par_blocks_jj_delay_count_read____d142, 7u);
	backing.DEF_par_blocks_jj_delay_count_read____d142 = DEF_par_blocks_jj_delay_count_read____d142;
      }
      ++num;
      if ((backing.DEF_v__h47623) != DEF_v__h47623)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h47623, 64u);
	backing.DEF_v__h47623 = DEF_v__h47623;
      }
      ++num;
      if ((backing.DEF_v__h48190) != DEF_v__h48190)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h48190, 64u);
	backing.DEF_v__h48190 = DEF_v__h48190;
      }
      ++num;
      if ((backing.DEF_v__h48488) != DEF_v__h48488)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h48488, 64u);
	backing.DEF_v__h48488 = DEF_v__h48488;
      }
      ++num;
      if ((backing.DEF_v__h49551) != DEF_v__h49551)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h49551, 64u);
	backing.DEF_v__h49551 = DEF_v__h49551;
      }
      ++num;
      if ((backing.DEF_v__h50201) != DEF_v__h50201)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h50201, 64u);
	backing.DEF_v__h50201 = DEF_v__h50201;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_d_init_np, 1u);
      backing.DEF_WILL_FIRE_RL_action_d_init_np = DEF_WILL_FIRE_RL_action_d_init_np;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l13c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_l13c17 = DEF_WILL_FIRE_RL_action_l13c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l15c21, 1u);
      backing.DEF_WILL_FIRE_RL_action_l15c21 = DEF_WILL_FIRE_RL_action_l15c21;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l16c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_l16c17 = DEF_WILL_FIRE_RL_action_l16c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l21c21, 1u);
      backing.DEF_WILL_FIRE_RL_action_l21c21 = DEF_WILL_FIRE_RL_action_l21c21;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l23c22, 1u);
      backing.DEF_WILL_FIRE_RL_action_l23c22 = DEF_WILL_FIRE_RL_action_l23c22;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l24c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_l24c17 = DEF_WILL_FIRE_RL_action_l24c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l28c9, 1u);
      backing.DEF_WILL_FIRE_RL_action_l28c9 = DEF_WILL_FIRE_RL_action_l28c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_np, 1u);
      backing.DEF_WILL_FIRE_RL_action_np = DEF_WILL_FIRE_RL_action_np;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_r_init_l20c17, 1u);
      backing.DEF_WILL_FIRE_RL_action_r_init_l20c17 = DEF_WILL_FIRE_RL_action_r_init_l20c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_actionpar_start_l10c9, 1u);
      backing.DEF_WILL_FIRE_RL_actionpar_start_l10c9 = DEF_WILL_FIRE_RL_actionpar_start_l10c9;
      vcd_write_val(sim_hdl, num++, DEF_par_blocks_1_jj_repeat_count_read____d91, 10u);
      backing.DEF_par_blocks_1_jj_repeat_count_read____d91 = DEF_par_blocks_1_jj_repeat_count_read____d91;
      vcd_write_val(sim_hdl, num++, DEF_par_blocks_1_state_can_overlap__h18793, 1u);
      backing.DEF_par_blocks_1_state_can_overlap__h18793 = DEF_par_blocks_1_state_can_overlap__h18793;
      vcd_write_val(sim_hdl, num++, DEF_par_blocks_jj_delay_count_read____d142, 7u);
      backing.DEF_par_blocks_jj_delay_count_read____d142 = DEF_par_blocks_jj_delay_count_read____d142;
      vcd_write_val(sim_hdl, num++, DEF_v__h47623, 64u);
      backing.DEF_v__h47623 = DEF_v__h47623;
      vcd_write_val(sim_hdl, num++, DEF_v__h48190, 64u);
      backing.DEF_v__h48190 = DEF_v__h48190;
      vcd_write_val(sim_hdl, num++, DEF_v__h48488, 64u);
      backing.DEF_v__h48488 = DEF_v__h48488;
      vcd_write_val(sim_hdl, num++, DEF_v__h49551, 64u);
      backing.DEF_v__h49551 = DEF_v__h49551;
      vcd_write_val(sim_hdl, num++, DEF_v__h50201, 64u);
      backing.DEF_v__h50201 = DEF_v__h50201;
    }
}

void MOD_mkFSM::vcd_prims(tVCDDumpType dt, MOD_mkFSM &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_bol.dump_VCD(dt, backing.INST_bol);
  INST_par_blocks_1_abort.dump_VCD(dt, backing.INST_par_blocks_1_abort);
  INST_par_blocks_1_jj_repeat_count.dump_VCD(dt, backing.INST_par_blocks_1_jj_repeat_count);
  INST_par_blocks_1_start_reg.dump_VCD(dt, backing.INST_par_blocks_1_start_reg);
  INST_par_blocks_1_start_reg_1.dump_VCD(dt, backing.INST_par_blocks_1_start_reg_1);
  INST_par_blocks_1_start_wire.dump_VCD(dt, backing.INST_par_blocks_1_start_wire);
  INST_par_blocks_1_state_can_overlap.dump_VCD(dt, backing.INST_par_blocks_1_state_can_overlap);
  INST_par_blocks_1_state_fired.dump_VCD(dt, backing.INST_par_blocks_1_state_fired);
  INST_par_blocks_1_state_fired_1.dump_VCD(dt, backing.INST_par_blocks_1_state_fired_1);
  INST_par_blocks_1_state_mkFSMstate.dump_VCD(dt, backing.INST_par_blocks_1_state_mkFSMstate);
  INST_par_blocks_1_state_overlap_pw.dump_VCD(dt, backing.INST_par_blocks_1_state_overlap_pw);
  INST_par_blocks_1_state_set_pw.dump_VCD(dt, backing.INST_par_blocks_1_state_set_pw);
  INST_par_blocks_abort.dump_VCD(dt, backing.INST_par_blocks_abort);
  INST_par_blocks_jj_delay_count.dump_VCD(dt, backing.INST_par_blocks_jj_delay_count);
  INST_par_blocks_start_reg.dump_VCD(dt, backing.INST_par_blocks_start_reg);
  INST_par_blocks_start_reg_1.dump_VCD(dt, backing.INST_par_blocks_start_reg_1);
  INST_par_blocks_start_wire.dump_VCD(dt, backing.INST_par_blocks_start_wire);
  INST_par_blocks_state_can_overlap.dump_VCD(dt, backing.INST_par_blocks_state_can_overlap);
  INST_par_blocks_state_fired.dump_VCD(dt, backing.INST_par_blocks_state_fired);
  INST_par_blocks_state_fired_1.dump_VCD(dt, backing.INST_par_blocks_state_fired_1);
  INST_par_blocks_state_mkFSMstate.dump_VCD(dt, backing.INST_par_blocks_state_mkFSMstate);
  INST_par_blocks_state_overlap_pw.dump_VCD(dt, backing.INST_par_blocks_state_overlap_pw);
  INST_par_blocks_state_set_pw.dump_VCD(dt, backing.INST_par_blocks_state_set_pw);
  INST_par_running.dump_VCD(dt, backing.INST_par_running);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}
